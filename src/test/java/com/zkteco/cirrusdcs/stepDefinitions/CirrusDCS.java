package com.zkteco.cirrusdcs.stepDefinitions;

import java.awt.AWTException;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.datatransfer.StringSelection;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import javax.imageio.ImageIO;

import org.apache.commons.lang3.RandomStringUtils;
import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;
import org.junit.Assert;
import org.junit.runner.RunWith;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

import com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter;
import com.zkteco.cirrusdcs.Resources.base;
import com.zkteco.cirrusdcs.pageObjects.Account;
import com.zkteco.cirrusdcs.pageObjects.Agencymanagement;
import com.zkteco.cirrusdcs.pageObjects.CirrusDCSLoginPageObjects;
import com.zkteco.cirrusdcs.pageObjects.CirrusDCSPageObjects;
import com.zkteco.cirrusdcs.pageObjects.CirrusDCSPageObjects2;
import com.zkteco.cirrusdcs.pageObjects.CirrusDCSPageObjects3;
import com.zkteco.cirrusdcs.pageObjects.CirrusDCSPageObjects4;
import com.zkteco.cirrusdcs.pageObjects.CirrusDCSPageObjects5;
import com.zkteco.cirrusdcs.pageObjects.CirrusDCSPageObjects6;
import com.zkteco.cirrusdcs.pageObjects.CirrusDCSPageObjectsBellschedule7;
import com.zkteco.cirrusdcs.pageObjects.CirrusDCSPageObjectst;
import com.zkteco.cirrusdcs.pageObjects.CirrusDcsHostLoginDashboard;
import com.zkteco.cirrusdcs.pageObjects.CompanySetup;
import com.zkteco.cirrusdcs.pageObjects.DashboardTenant;
import com.zkteco.cirrusdcs.pageObjects.DeviceOperationsAndAuditPageObjects;
import com.zkteco.cirrusdcs.pageObjects.DevicedataSyncPageObjects;
import com.zkteco.cirrusdcs.pageObjects.HostDeviceoperationAndAuditmodule;
import com.zkteco.cirrusdcs.pageObjects.HostUsersPageObjects;
import com.zkteco.cirrusdcs.pageObjects.Reports;
import com.zkteco.cirrusdcs.pageObjects.SuperTenantPageObjects;
import com.zkteco.cirrusdcs.pageObjects.SystemUtilitiesCirrusDCSPageObjects;
import com.zkteco.cirrusdcs.pageObjects.TenantDeviceManagerpageObjects;
import com.zkteco.cirrusdcs.pageObjects.TenantReports;
import com.zkteco.cirrusdcs.utility.Utils;

import io.cucumber.java.After;
import io.cucumber.java.Before;
import io.cucumber.java.Scenario;
import io.cucumber.java.en.And;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import io.cucumber.junit.Cucumber;
import ru.yandex.qatools.ashot.AShot;
import ru.yandex.qatools.ashot.Screenshot;
import ru.yandex.qatools.ashot.comparison.ImageDiff;
import ru.yandex.qatools.ashot.comparison.ImageDiffer;
import ru.yandex.qatools.ashot.shooting.ShootingStrategies;

@SuppressWarnings("ALL")
@RunWith(Cucumber.class)
public class CirrusDCS extends base {
	
	

	private WebDriver driver;
	private static Properties property;
	WebDriverWait wait;
	Utils util;
	private SystemUtilitiesCirrusDCSPageObjects systemUtilitiesCirrusDCSPageObjects;
	private CompanySetup companysetup;
	private CirrusDcsHostLoginDashboard Dashbord;
	private HostDeviceoperationAndAuditmodule Opt;
	private Reports RPTS;
	private Account account;
	private TenantReports tenantreports;
	private CirrusDCSPageObjects CirrusDCSPageObjects;
	CirrusDCSPageObjects2 cirrusDCSPageObjects2;
	CirrusDCSPageObjects3 cirrusDCSPageObjects3;
	CirrusDCSPageObjects4 cirrusDCSPageObjects4;
	CirrusDCSPageObjects5 CirrusDCSPageObjects5;
	CirrusDCSPageObjects6 CirrusDCSPageObjects6;
	private CirrusDCSPageObjectsBellschedule7 CirrusDCSPageObjects7;
	private CirrusDCSPageObjectst cirrusDCSPageObjectst;
	private DashboardTenant dashboardpageobject;
	private Agencymanagement agencymanagement;
	WebDriver newTab;
	private CirrusDCSLoginPageObjects cirrusDCSPageObjects;
	private HostUsersPageObjects hostHusersPageObjects;
	private DeviceOperationsAndAuditPageObjects deviceoperationspageobjects;
	private TenantDeviceManagerpageObjects tenantdevicemanagerpageobjects;
	private SuperTenantPageObjects supertenantpageobjects;
	private Actions actions;
	String devicesn;
	String devicename;
	String groupcode;
	String groupname;
	String devicegroupsn;
	String devicegroupname;
	String userFirstName;
	String userLoginId;
	private Logger logger;
	private DevicedataSyncPageObjects devicedataSyncPageObjects;
	private static final String UserFirstName=RandomStringUtils.randomAlphabetic(4);
	private static final String UserLastName=RandomStringUtils.randomAlphabetic(2);
	private static final String UserEmail=RandomStringUtils.randomAlphabetic(4)+"@test.com";
	private static final String UserPhoneNo=RandomStringUtils.randomNumeric(10);
	private static final String UserLoginID=RandomStringUtils.randomAlphabetic(6);
	private static final String EditUserFirstName=RandomStringUtils.randomAlphabetic(4);
	private static final String EditUserLastName=RandomStringUtils.randomAlphabetic(2);
	private static final String EditUserEmail=RandomStringUtils.randomAlphabetic(4)+"@test.com";
	private static final String EditUserPhoneNo=RandomStringUtils.randomNumeric(10);
	private static final String EditUserLoginID=RandomStringUtils.randomAlphabetic(6);
	private static final String GroupName=RandomStringUtils.randomAlphabetic(5);
	private static final String GroupCode="Group"+RandomStringUtils.randomNumeric(2);
	private static final String GroupDescrip=RandomStringUtils.randomAlphabetic(6);
	private static final String GroupInstalledLocation=RandomStringUtils.randomAlphabetic(6);
	private static final String EditGroupName=RandomStringUtils.randomAlphabetic(5);
	private static final String EditGroupCode="Group"+RandomStringUtils.randomNumeric(2);
	private static final String EditGroupDescrip=RandomStringUtils.randomAlphabetic(6);
	private static final String EditGroupInstalledLocation=RandomStringUtils.randomAlphabetic(6);
	public static final String DeviceSN=RandomStringUtils.randomAlphanumeric(5);
	private static final String DeviceName=RandomStringUtils.randomAlphabetic(5);
	private static final String DeviceTemplate=RandomStringUtils.randomAlphabetic(5);
	private static final String NewDeviceSN=RandomStringUtils.randomAlphanumeric(6);
	private static final String TemplateName=RandomStringUtils.randomAlphabetic(5);
	private static final String UserID = RandomStringUtils.randomAlphabetic(2);

	private static final String SignUpFirstName = "X" + RandomStringUtils.randomAlphabetic(4);
	private static final String clientName = "X" + RandomStringUtils.randomAlphabetic(3);

	private static final String SignUpLastName = "Y" + RandomStringUtils.randomAlphabetic(4);
	private static final String SignUpEmail = RandomStringUtils.randomAlphabetic(4) + "@test.com";
	private static final String SignUpContact = RandomStringUtils.randomNumeric(10);
	private static final String SignUpPassword = "T@1" + RandomStringUtils.randomAlphanumeric(9);
	private static final String SignUpConfirmPassword = SignUpPassword;
	private static final String passwordLengthpwd = RandomStringUtils.randomAlphanumeric(13);
	private static final String passwordlengthconfirm = passwordLengthpwd;
	private static final String IncorrectHostloginPwd = "Y" + RandomStringUtils.randomAlphabetic(4);

	private static final String RoleName = RandomStringUtils.randomAlphabetic(4);
	private static final String Description = RandomStringUtils.randomAlphabetic(4);
	private static final String True = null;
	static String firstName12;
	static String value2;
	static String Control_level;
	static String pagename;
	int j;
	

	static int mim;

	static String password;
	static String userId;
	static String LastName;
	static String UserName;
	static String className1;
	static String className2;
	static String statusName;
	static String Afterchange_statusName;
	static WebElement Clientlogo;
	static WebElement actualClientlogo;
	static Screenshot Screenshot;
	static Screenshot Screenshot1;
	static String Client_Name1;
	static String Client_Name2;
	static String Name1;
	static String passwordlifespanvalue;
	static String Sessiontimeout;
	static String TrackInterval;
	static String deletedpagesName;
	static String deleteduserName;
	static String passwordLength;
	static String passwordtraking;
	static String Maxlogintrialattempt;
	static String Lockoutinterval;
	static String Tenantcode;
	static String TenantType;
	static String TenantStatus;
	static List<String> list2;

	static boolean name;

	

	
	
	
	
	//private static final String UserPassword="T@1"+RandomStringUtils.randomAlphanumeric(6);
//	private static final String UserConfirmPassword=UserPassword;
	JavascriptExecutor js;
	
	
	 

	@Before("@CirrusDCS")
	public void i_initialize_drivers_for_DCS_automation() throws Throwable {

		property = new Properties();
		FileInputStream fis1 = new FileInputStream(System.getProperty("user.dir")
				+ "\\src\\test\\resources\\CirrusDCS.properties");
		property.load(fis1);
		driver = initializeDriver(property.getProperty("browser"), property.getProperty("processor"),
				property.getProperty("os"));
		
		//driver = initializeDriver(System.getProperty("browser"), System.getProperty("processor"),
			//	System.getProperty("os"));
		
		ExtentCucumberAdapter.addTestStepLog("Driver Initialized");
		
		 util=new Utils(driver);
		cirrusDCSPageObjects = new CirrusDCSLoginPageObjects(driver);
		
		hostHusersPageObjects=new HostUsersPageObjects(driver);
		
		deviceoperationspageobjects=new DeviceOperationsAndAuditPageObjects(driver);
		
		tenantdevicemanagerpageobjects=new TenantDeviceManagerpageObjects(driver);
		
		devicedataSyncPageObjects= new DevicedataSyncPageObjects(driver); 
		
		//CirrusDCSPageObjects = new CirrusDCSPageObjects(driver);
		
		cirrusDCSPageObjects2 = new CirrusDCSPageObjects2(driver);
		cirrusDCSPageObjects3 = new CirrusDCSPageObjects3(driver);
		cirrusDCSPageObjects4 = new CirrusDCSPageObjects4(driver);
		CirrusDCSPageObjects5 = new CirrusDCSPageObjects5(driver);
		CirrusDCSPageObjects6 = new CirrusDCSPageObjects6(driver);
		CirrusDCSPageObjects7 = new CirrusDCSPageObjectsBellschedule7(driver);
		cirrusDCSPageObjectst = new CirrusDCSPageObjectst(driver);
		dashboardpageobject = new DashboardTenant(driver);
		agencymanagement = new Agencymanagement(driver);
		Dashbord = new CirrusDcsHostLoginDashboard(driver);
		Opt = new HostDeviceoperationAndAuditmodule(driver);
		account = new Account(driver);
		RPTS = new Reports(driver);
		systemUtilitiesCirrusDCSPageObjects = new SystemUtilitiesCirrusDCSPageObjects(driver);
		companysetup = new CompanySetup(driver);

		supertenantpageobjects= new SuperTenantPageObjects(driver);
		
		logger = Logger.getLogger(CirrusDCS.class);
		
		Properties p1=new Properties();
		
		p1.load(new FileInputStream("D:\\DCSIntellj\\CirrusDCS\\src\\test\\resources\\log4j.properties"));
		
		PropertyConfigurator.configure(p1);
		
		
		
		
		
		wait=new WebDriverWait(driver,50);
		actions = new Actions(driver);
		driver.manage().window().maximize();

	}
	
	@After("@CirrusDCS")
    public void teardown(Scenario scenario) throws IOException, InterruptedException
    {

    	if(scenario.isFailed()){
    		
    		scenario.attach(getScreenshot(driver), "image/png", "screenshot name");
    		//driver.close();
    		
    	 }
    	else
    	{

    		//driver.quit();
    	}
}	

	@Given("^I visit CirrusDCS HostLogin page$")
	public void i_visit_cloud_access_url()  {
		driver.get(property.getProperty("DCSHostURL"));
	//	driver.get(System.getProperty("url"));

	}
	
	@Given("^I visit CirrusDCS TenantLogin page$")
	public void I_visit_CirrusDCS_TenantLogin_page()  {
		
		driver.get(property.getProperty("DCSTenantURL"));
	}

	@Then("^I verify user navigation to HostAdmin Login page$")
	public void I_verify_user_navigation_to_HostAdmin_Login_page()
	{
		//wait.until(ExpectedConditions.urlContains(property.getProperty("DCSHostURL")));
		if(driver.getCurrentUrl().equals(property.getProperty("DCSHostURL"))){
			
			System.out.println("User navigated to HostAdmin login successfully");
		}
		
	}
	
	@Then("^I validate all the components in HostAdmin login page$")
	public void I_validate_all_the_components_in_HostAdmin_login_page()
	{
		Assert.assertTrue(driver.findElement(cirrusDCSPageObjects.getLoginScreenUi()).isDisplayed());
		Assert.assertTrue(driver.findElement(cirrusDCSPageObjects.getUserName()).isDisplayed());
		Assert.assertTrue(driver.findElement(cirrusDCSPageObjects.getPassword()).isDisplayed());
		Assert.assertTrue(driver.findElement(cirrusDCSPageObjects.getSignInbtn()).isDisplayed());
		Assert.assertTrue(driver.findElement(cirrusDCSPageObjects.getZktecologo()).isDisplayed());
		Assert.assertTrue(driver.findElement(cirrusDCSPageObjects.getTermsofUSe()).isDisplayed());
		Assert.assertTrue(driver.findElement(cirrusDCSPageObjects.getPrivacypolicy()).isDisplayed());
		Assert.assertTrue(driver.findElement(cirrusDCSPageObjects.getDCSVersion()).isDisplayed());
		Assert.assertTrue(driver.findElement(cirrusDCSPageObjects.getForgotpassword()).isDisplayed());
		Assert.assertTrue(driver.findElement(cirrusDCSPageObjects.getCopyrightstext()).isDisplayed());
	}
	
	@Then("^I verify user navigation to terms of use page$")
	public void I_verify_user_navigation_to_terms_of_use_page()
	{
		driver.findElement(cirrusDCSPageObjects.getTermsofUSe()).click();
		Assert.assertEquals(driver.getCurrentUrl(), property.getProperty("DCShosttermsofuseURL"));
		
	}
	
	@Then("^I verify the data present in the terms of use text area field$")
	public void I_verify_the_terms_of_use_text_box()
	{
		Assert.assertTrue(driver.findElement(cirrusDCSPageObjects.getTermsofusewindow()).isDisplayed());
		
		String Actual=driver.findElement(cirrusDCSPageObjects.getTermsofusewindow()).getText();
		
		String Expected = driver.findElement(cirrusDCSPageObjects.getTermsofusewindow()).getText();
		
		Assert.assertEquals(Actual,Expected);
	}
	
//	@When("^I Click on back to login link$")
//	public void I_Click_on_back_to_login_link()
//	{
//		driver.findElement(cirrusDCSPageObjects.getBacktologinlink()).click();
//	}
//	
//	@Then("^I verify user navigation to privacy policy page$")
//	public void I_verify_user_navigation_to_privacy_policy_page()
//	{
//		driver.findElement(cirrusDCSPageObjects.getPrivacypolicy()).click();
//		
//		Assert.assertEquals(driver.getCurrentUrl(), property.getProperty("DCShostprivacypolicyURL"));
//		
//	}
//	
//	@When("^I Click on forgot password link$")
//	public void I_Click_on_forgot_password_link()
//	{
//		
//		driver.findElement(cirrusDCSPageObjects.getForgotpassword()).click();
//		
//		
//	}
//	
//	@Then("^I validate user navigation to forgotpassword page$")
//	public void I_validate_user_navigation_to_forgotpassword_page()
//	{
//		wait.until(ExpectedConditions.textToBePresentInElement(driver.findElement(cirrusDCSPageObjects.getForgotpasswordtext()), property.getProperty("Forgotpasswordtext")));
//		System.out.println(driver.findElement(cirrusDCSPageObjects.getForgotpasswordtext()).getText());
//		Assert.assertEquals(driver.findElement(cirrusDCSPageObjects.getForgotpasswordtext()).getText(), property.getProperty("Forgotpasswordtext"));
//	}
//	
//	@Then("^I validate the tabs present in the forgot password page$")
//	public void I_validate_the_tabs_present_in_the_forgot_password_page()
//	{
//		Assert.assertTrue(driver.findElement(cirrusDCSPageObjects.getForgotUserIdtab()).isDisplayed());
//		Assert.assertTrue(driver.findElement(cirrusDCSPageObjects.getForgotpasswordtab()).isDisplayed());
//	}
//	
//	@Then("^I validate the elements present in the Forgot User Id tab$")
//	public void I_validate_the_elements_present_in_the_Forgot_User_Id_tab()
//	{
//		
//		driver.findElement(cirrusDCSPageObjects.getForgotUserIdtab()).click();
//		
//		Assert.assertTrue(driver.findElement(cirrusDCSPageObjects.getForgotuseridEmail()).isDisplayed());
//		Assert.assertTrue(driver.findElement(cirrusDCSPageObjects.getForgotuseridRegisteredPhone()).isDisplayed());
//		Assert.assertTrue(driver.findElement(cirrusDCSPageObjects.getForgotuseridRecoverpasswordbtn()).isDisplayed());
//	}
//	
//	@Then("^I validate the elements present in the Forgotpassword tab$")
//	public void I_validate_the_elements_present_in_the_Forgotpassword_tab()
//	{
//		driver.findElement(cirrusDCSPageObjects.getForgotpasswordtab()).click();
//		Assert.assertTrue(driver.findElement(cirrusDCSPageObjects.getForgotpasswordusername()).isDisplayed());
//		Assert.assertTrue(driver.findElement(cirrusDCSPageObjects.getForgotpasswordemail()).isDisplayed());
//		Assert.assertTrue(driver.findElement(cirrusDCSPageObjects.getForgotpasswordregisteredphone()).isDisplayed());
//		Assert.assertTrue(driver.findElement(cirrusDCSPageObjects.getforgotpwdRecoverpasswordbtn()).isDisplayed());
//	}
//	
//	@Then("^I enter all valid details in required fields$")
//	public void I_enter_all_valid_details_in_required_fields()
//	{
//		driver.findElement(cirrusDCSPageObjects.getForgotuseridEmail()).sendKeys(property.getProperty("ForgotUseridEmail"));
//		driver.findElement(cirrusDCSPageObjects.getForgotuseridRegisteredPhone()).sendKeys(property.getProperty("ForgotUseridphone"));
//		driver.findElement(cirrusDCSPageObjects.getForgotuseridRecoverpasswordbtn()).click();
//	}
//	
//	@Then("^I validate the results$")
//	public void I_validate_the_results()
//	{
//		System.out.println(driver.findElement(cirrusDCSPageObjects.getLoginsuccessfulmessage()).getText());
//		Assert.assertEquals(driver.findElement(cirrusDCSPageObjects.getLoginsuccessfulmessage()).getText(),property.getProperty("loginsuccessfulmessage"));
//	}
//	
//	@Then("^I enter invalid details in forgot user id tab$")
//	public void I_enter_invalid_details_in_forgot_user_id_tab()
//	{
//		driver.findElement(cirrusDCSPageObjects.getForgotuseridEmail()).sendKeys(property.getProperty("InvalidForgotUseridEmail"));
//		driver.findElement(cirrusDCSPageObjects.getForgotuseridRegisteredPhone()).sendKeys(property.getProperty("InvalidForgotUseridEmail"));
//		driver.findElement(cirrusDCSPageObjects.getForgotuseridRecoverpasswordbtn()).click();
//	}
//	
//	@Then("^I validate the error message$")
//	public void I_validate_the_error_message()
//	{
//		String message = driver.findElement(cirrusDCSPageObjects.getLoginerrormessage()).getText().toLowerCase();
//
//		Assert.assertEquals(message,property.getProperty("forgotpassworderrormessage"));
//	}
//		
//	@Then("^I enter all valid details in forgot password required fields$")
//	public void I_enter_all_valid_details_in_forgot_password_required_fields()
//	{
//		driver.findElement(cirrusDCSPageObjects.getForgotpasswordtab()).click();
//		driver.findElement(cirrusDCSPageObjects.getForgotpasswordusername()).sendKeys(property.getProperty("ForgotpasswordUsername"));
//		driver.findElement(cirrusDCSPageObjects.getForgotpasswordemail()).sendKeys(property.getProperty("ForgotUseridEmail"));
//		driver.findElement(cirrusDCSPageObjects.getForgotpasswordregisteredphone()).sendKeys(property.getProperty("ForgotUseridphone"));
//		wait.until(ExpectedConditions.visibilityOf(driver.findElement(cirrusDCSPageObjects.getforgotpwdRecoverpasswordbtn())));
//		driver.findElement(cirrusDCSPageObjects.getforgotpwdRecoverpasswordbtn()).click();
//	}
//	@Then("^I validate the message for forgotpassword$")
//	public void I_validate_the_message_for_forgotpassword()
//	{
//		System.out.println(driver.findElement(cirrusDCSPageObjects.getLoginsuccessfulmessage()).getText());
//		Assert.assertEquals(driver.findElement(cirrusDCSPageObjects.getLoginsuccessfulmessage()).getText(),property.getProperty("forgotpasswordsuccessfulmessage"));
//	}
//	@Then("^I enter invalid details in forgot password tab$")
//	public void I_enter_invalid_details_in_forgot_password_tab()
//	{
//		driver.findElement(cirrusDCSPageObjects.getForgotpasswordtab()).click();
//		driver.findElement(cirrusDCSPageObjects.getForgotpasswordusername()).sendKeys(property.getProperty("ForgotpasswordUsername"));
//		driver.findElement(cirrusDCSPageObjects.getForgotpasswordemail()).sendKeys(property.getProperty("ForgotUseridEmail"));
//		driver.findElement(cirrusDCSPageObjects.getForgotpasswordregisteredphone()).sendKeys(property.getProperty("InvalidForgotUseridphone"));
//		wait.until(ExpectedConditions.visibilityOf(driver.findElement(cirrusDCSPageObjects.getforgotpwdRecoverpasswordbtn())));
//		driver.findElement(cirrusDCSPageObjects.getforgotpwdRecoverpasswordbtn()).click();
//	}
//	
//	@When("^I Click on Login button$")
//	public void I_Click_on_Login_button()
//	{
//		driver.findElement(cirrusDCSPageObjects.getSignInbtn()).click();
//	}
//	
//	@Then("^I validate the error message for mandatory fields$")
//	public void I_validate_the_error_message_for_mandatory_fields()
//	{
//		System.out.println(driver.findElement(cirrusDCSPageObjects.getLoginerrormessage()).getText());
//		Assert.assertEquals(driver.findElement(cirrusDCSPageObjects.getLoginerrormessage()).getText(),property.getProperty("Loginmandatoryfieldserrormessage"));
//		
//	}
//	
//	@Given("^I Enter valid credentails in login screen$")
//	public void I_Enter_valid_credentails_in_login_screen()
//	{
//		driver.findElement(cirrusDCSPageObjects.getUserName()).sendKeys(property.getProperty("Username"));
//		driver.findElement(cirrusDCSPageObjects.getPassword()).sendKeys(property.getProperty("Password"));
//	}
//	
//	
//	
//	@Then("^I validate the user navigation to home screen with valid credentials$")
//	public void I_validate_the_user_navigation_to_home_screen_with_valid_credentials()
//	{
//		if(driver.getCurrentUrl().equals(property.getProperty("HostHomePageURL")))
//		{
//			System.out.println("user navigated to Hostadmin home page successfully");
//			Assert.assertEquals(driver.getCurrentUrl(), property.getProperty("HostHomePageURL"));
//			
//		}
//	}
//	
//	@Given("^I Enter Invalid credentails in login screen$")
//	public void I_Enter_Invalid_credentails_in_login_screen() {
//		
//		driver.findElement(cirrusDCSPageObjects.getUserName()).sendKeys(property.getProperty("InvalidUsername"));
//		driver.findElement(cirrusDCSPageObjects.getPassword()).sendKeys(property.getProperty("InvalidPassword"));
//		
//	}
//	@Given("^I am in HostAdmin home page$")
//	public void I_am_in_HostAmdin_home_page() {
//		
//		I_Enter_valid_credentails_in_login_screen();
//		
//		I_Click_on_Login_button();
//		
//	}
//	
//	@When("^I click on Host Users$")
//	public void I_click_on_Host_Users() throws InterruptedException
//	{
//		driver.findElement(hostHusersPageObjects.getHostusersmodule()).click();
//		
//	}
//	
//	@Then("^I validate the user navigation to Hostusers page$")
//	public void I_validate_the_user_navigation_to_Hostusers_page()
//	{
//		
//		
//		if (driver.getTitle().equals(property.getProperty("HostUserstitlename")))
//		{
//			System.out.println(driver.getTitle());
//			Assert.assertEquals(driver.getTitle(), property.getProperty("HostUserstitlename"));
//		}
//	}
//	
//	@Then("^I validate the user list block in host page$")
//	public void I_validate_the_user_list_block_in_host_page() 
//	{
//		Assert.assertTrue(driver.findElement(hostHusersPageObjects.getUserListblock()).isDisplayed());
//		
//		
//	}
//	
//	@Then("^I Click on the Last Forward Btn andLast Page is displayed$")
//	public void I_Click_on_the_Last_Forward_Btn_andLast_Page_is_displayed() throws InterruptedException 
//	{
//		
//	WebElement ele = driver.findElement(cirrusDCSPageObjects.getFastforwardbtn());
//	
//	js=(JavascriptExecutor)driver;
//	
//	js.executeScript("arguments[0].click();", ele);
//		
//	Thread.sleep(2000);
//	List<WebElement> Pagebtn = driver.findElements(cirrusDCSPageObjects.getAllPaginationbtnone_By_One());
//	for(int i=0;i<Pagebtn.size();i++)
//	{
//		WebElement Pagebtn1= Pagebtn.get(i);
//		String Name2 = Pagebtn1.getText();
//		String Name = Pagebtn1.getAttribute("class");
//		System.out.println(Name);
//		System.out.println(Name2);
//		if(Name.equals(property.getProperty("pageactiveclass")))
//		{
//			Assert.assertEquals(Name, property.getProperty("pageactiveclass"));
//		}
//		
//		 	 
//	}	
//	}
	
//	@Then("^I Click on the firstPage backward Btn and first Page is displayed$")
//	public void I_Click_on_the_firstPage_backward_Btn_and_first_Page_is_displayed() throws InterruptedException 
//	{
//		js=(JavascriptExecutor)driver;
//		
//		js.executeScript("arguments[0].click();", driver.findElement(cirrusDCSPageObjects.getFastforwardbtn()));
//		
//		wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(cirrusDCSPageObjects.getFirstbackwardbtn())));
//		
//		js.executeScript("arguments[0].click();",driver.findElement(cirrusDCSPageObjects.getFirstbackwardbtn()));
//		
//		Thread.sleep(2000);
//		List<WebElement> s1ssd = driver.findElements(cirrusDCSPageObjects.getAllPaginationbtnone_By_One());
//		for(int i=0;i<s1ssd.size();i++)
//		{
//			WebElement ds= s1ssd.get(i);
//			String Name2 = ds.getText();
//			 String Name = ds.getAttribute("class");
//			 if(Name.equals(property.getProperty("pageactiveclass")))
//			 {
//				 System.out.println(Name);
//				 System.out.println(Name2);
//				 Assert.assertEquals(Name2, property.getProperty("firstPageNO"));
//			 }	 
//	}
//		}
	
	
//	@Then("^I Click on the backword btn and pages displaying accordingly$")
//	public void I_Click_on_the_backword_btn_and_pages_displaying_accordingly() throws InterruptedException  
//	{
//		wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(cirrusDCSPageObjects.getNormalbackwardbtn())));
//		js=(JavascriptExecutor)driver;
//		js.executeScript("arguments[0].click();",driver.findElement(cirrusDCSPageObjects.getNormalbackwardbtn()));
//		
//		Thread.sleep(2000);
//		for(int j=0;j<11;j++)
//			{
//				js.executeScript("arguments[0].click();",driver.findElement(cirrusDCSPageObjects.getAllPaginationbtnone_By_One()));
//				Thread.sleep(2000);
//				List<WebElement> s1ssd = driver.findElements(cirrusDCSPageObjects.getAllPaginationbtnone_By_One());
//				for(int i=s1ssd.size()-1;i>=0;i--)
//				{
//					WebElement ds= s1ssd.get(i);
//					String Name2 = ds.getText();
//					 String Name = ds.getAttribute("class");
//					 if(Name.equals("ui-paginator-page ui-state-default ui-corner-all ui-state-active"))
//					 {
//						 Assert.assertEquals(Name, property.getProperty("ClassAttribute"));
//						 System.out.println(Name2);
//					 }
//	           }
//			}
//	}
	
//	@Then("^I select the pages from pagedropdown and list of tenant display accordingly$")
//	public void I_select_the_pages_from_pagedropdown_and_list_of_tenant_display_accordingly() throws InterruptedException  
//	{   
//		
//		Select objselect = new Select(driver.findElement(cirrusDCSPageObjects.getPagecountdropdownbtn()));
//		List<WebElement> options = objselect.getOptions();
//		for(int i=0;i<options.size();i++)
//		{
//			js= (JavascriptExecutor)driver;
//	        
//	        js.executeScript("arguments[0].scrollIntoView(true);", driver.findElement(cirrusDCSPageObjects.getPagecountdropdownbtn()));
//			
//			WebElement optionsval = options.get(i);
//			
//			String ss =optionsval.getText();
//			
//			objselect.selectByIndex(i);
//		
//			Thread.sleep(2000);
//			List<WebElement> listTenant = driver.findElements(cirrusDCSPageObjects.getTabledata());
//			Thread.sleep(2000);
//			
//			String ele = driver.findElement(cirrusDCSPageObjects.getRecordscount()).getText();
//			
//			StringBuilder myNumbers = new StringBuilder();
//		    
//			for (int i1 = 0; i1 < ele.length(); i1++)
//		    {
//		        if (Character.isDigit(ele.charAt(i1))) {
//		            myNumbers.append(ele.charAt(i1));
//		          
//		        } 
//		    }
//		  
//			String val = myNumbers.toString();
//			
//			int count = Integer.parseInt(val);
//			
//			int no =listTenant.size();
//			
//			String b = String.valueOf(no);
//			
//			if(b.equals(ss)) 
//			{
//		
//			Assert.assertEquals(ss, b);
//	
//			}
//			else {
//				
//				Assert.assertEquals(no,count);
//				System.out.println(count);
//				
//			}
//			
//		
//		}
//		
//		
//	}
	
	@Then("I validate the user details block in host page")
	public void I_validate_the_user_details_block_in_host_page()
	{
		Assert.assertTrue(driver.findElement(hostHusersPageObjects.getUserdetailsblock()).isDisplayed());
	}
	
	@Then("^I validate clicking on particular user in the list$")
	public void Then_I_validate_clicking_on_particular_user_in_the_list() {
		
		List<WebElement> alldata = driver.findElements(cirrusDCSPageObjects.getTabledata());
		
		for(int i=0;i<alldata.size();i++)
		{
			js=(JavascriptExecutor)driver;
			js.executeScript("arguments[0].click();",alldata.get(i));
	
		String selectedstate = driver.findElement(cirrusDCSPageObjects.getTabledata()).getAttribute("aria-selected");
		if(selectedstate.equals("true"))
		{
			assert true;
			//System.out.println("User selected successfully");
		}
			
			
		}
	}
	
	@Then("^I click on New User button$")
	public void I_click_on_New_User_button() {
		
		js=(JavascriptExecutor)driver;
		
		js.executeScript("arguments[0].click();",driver.findElement(hostHusersPageObjects.getNewUserbtn()));
		
	}
	
	@Then("^I validate all the components in the New Host users page$")
	public void I_validate_all_the_components_in_the_New_Host_users_page() throws InterruptedException 
	{
		
		Thread.sleep(1000);
		Assert.assertTrue(driver.findElement(hostHusersPageObjects.getUserfirstname()).isDisplayed());
		Assert.assertTrue(driver.findElement(hostHusersPageObjects.getUserlastname()).isDisplayed());
		Assert.assertTrue(driver.findElement(hostHusersPageObjects.getUseremail()).isDisplayed());
		Assert.assertTrue(driver.findElement(hostHusersPageObjects.getUserphonenumber()).isDisplayed());
		Assert.assertTrue(driver.findElement(hostHusersPageObjects.getUserloginid()).isDisplayed());
		Assert.assertTrue(driver.findElement(hostHusersPageObjects.getUserpassword()).isDisplayed());
		Assert.assertTrue(driver.findElement(hostHusersPageObjects.getConfirmpassword()).isDisplayed());
		Assert.assertTrue(driver.findElement(hostHusersPageObjects.getActiveradiobtn()).isDisplayed());
		Assert.assertTrue(driver.findElement(hostHusersPageObjects.getInactiveradiobtn()).isDisplayed());
		Assert.assertTrue(driver.findElement(hostHusersPageObjects.getSendpasswordoveremail()).isDisplayed());
		Assert.assertTrue(driver.findElement(hostHusersPageObjects.getCancelbtn()).isDisplayed());
		Assert.assertTrue(driver.findElement(hostHusersPageObjects.getSavebtn()).isDisplayed());
		
	}

		
	@Then("^I Enter all the details$")
	public void I_Enter_all_the_details() throws InterruptedException 
	{
		Thread.sleep(2000);
		driver.findElement(hostHusersPageObjects.getUserfirstname()).sendKeys(util.randomAlphabetic());
		userFirstName=driver.findElement(hostHusersPageObjects.getUserfirstname()).getAttribute("value");
		driver.findElement(hostHusersPageObjects.getUserlastname()).sendKeys(util.randomAlphabetic());
		driver.findElement(hostHusersPageObjects.getUseremail()).sendKeys(util.randomAlphabeticemail());
		driver.findElement(hostHusersPageObjects.getUserphonenumber()).sendKeys(util.randomnumericphoneno());
		driver.findElement(hostHusersPageObjects.getUserloginid()).sendKeys(util.randomAlphabetic());
		userLoginId=driver.findElement(hostHusersPageObjects.getUserloginid()).getAttribute("value");
		driver.findElement(hostHusersPageObjects.getUserpassword()).sendKeys(property.getProperty("UserPassword"));
		driver.findElement(hostHusersPageObjects.getConfirmpassword()).sendKeys(property.getProperty("UserConfirmPassword"));
		driver.findElement(hostHusersPageObjects.getActiveradiobtn()).click();
		driver.findElement(hostHusersPageObjects.getSendpasswordoveremail()).click();
		Thread.sleep(2000);
		
		
	}
	
	@Then("^I validate the user creation$")
	public void I_validate_the_user_creation() throws InterruptedException
	{
		
		List<WebElement> ele1 = driver.findElements(cirrusDCSPageObjects.getAllPaginationbtnone_By_One());
		
		for(int j=0;j<ele1.size()-1;j++ )
		{
			Thread.sleep(2000);
			List<WebElement> cellvalues = driver.findElements(cirrusDCSPageObjects.getCellvalues());
			
	
		
		for(int i=0;i<cellvalues.size();i++)
		{	
			
			String val = cellvalues.get(i).getText();
			
			if(val.equals(userLoginId)) {
				
				Assert.assertEquals(val,userLoginId);
				System.out.println("user record is created successfully");
				break;
				
				
				
				
			}
			else if(val.equals(EditUserLoginID)){
				
				
				Assert.assertEquals(val,EditUserLoginID);
				System.out.println("user record is created successfully");
				break;
				
			}

			
		}
			
		js= (JavascriptExecutor)driver;
        
        js.executeScript("arguments[0].scrollIntoView(true);",driver.findElement(cirrusDCSPageObjects.getNormalnextbutton()));
		
		js=(JavascriptExecutor)driver;
		js.executeScript("arguments[0].click();",driver.findElement(cirrusDCSPageObjects.getNormalnextbutton()));
		Thread.sleep(2000);
		}
	
	}
	
	@Then("^I click on Save button$")
	public void I_click_on_Save_button()
	{
		js=(JavascriptExecutor)driver;
		js.executeScript("arguments[0].click();",driver.findElement(hostHusersPageObjects.getSavebtn()));
	}
	
	@Then("^I click on cancel button$")
	public void I_click_on_cancel_button() 
	{
		util.click(driver.findElement(hostHusersPageObjects.getCancelbtn()));	
		
	}
	
	@Then("I validate the cirrusDCS logo")
	public void I_validate_the_user_creation_on_click_of_cancel_button() throws IOException, InterruptedException 
	{
		Thread.sleep(3000);
		
	   	WebElement logoElement = driver.findElement(By.xpath("//img[@src='/iclock/images/CirrusDCS-logo.png']"));
		  
		  //Capture and store logo image
		  Screenshot shot = new AShot().takeScreenshot(driver, logoElement);
		  File file = new File(System.getProperty("user.dir")+"\\Images\\img.png");
		  System.out.println(file);
		  ImageIO.write(shot.getImage(), "PNG", file);
		  
		  
		  //Getting Expected Image
		  BufferedImage expectedImg = ImageIO.read(file);
		  
		  //Getting Actual Image
		  BufferedImage actualImg = shot.getImage();
		  
		  //Image Comparison
		  ImageDiffer imgDiff = new ImageDiffer();
		  ImageDiff dif = imgDiff.makeDiff(expectedImg, actualImg);
		  if(dif.hasDiff()){
			  System.out.println("Both images are different");
		  }else {
			  System.out.println("Both images are same");
		  }
	}
	
	@Then("^I validate the error message for mandatory fields in host users page$")
	public void I_validate_the_error_message_for_mandatory_fields1()
	{
		
		List<WebElement> msg = driver.findElements(hostHusersPageObjects.getMessages());
		
		ArrayList<String>l1=new ArrayList<String>();
		
		 
		for(int i=0;i<=msg.size()-4;i++ )
		{
			String Mandaterrormessage = msg.get(i).getText();
			
			l1.add(Mandaterrormessage);
			
	
			
		}
		
		System.out.println(l1);
		
		
			Assert.assertEquals(l1.get(0), property.getProperty("Loginid"));
			Assert.assertEquals(l1.get(1), property.getProperty("FirstNameerror"));
			Assert.assertEquals(l1.get(2), property.getProperty("Emailerror"));
			Assert.assertEquals(l1.get(3), property.getProperty("PhoneNoerror"));
		
	}
	@Then("^I Enter all the details with invalid password policy$")
	public void I_Enter_all_the_details_with_invalid_password_policy() throws InterruptedException 
	{
		Thread.sleep(2000);
		driver.findElement(hostHusersPageObjects.getUserfirstname()).sendKeys(UserFirstName);
		driver.findElement(hostHusersPageObjects.getUserlastname()).sendKeys(UserLastName);
		driver.findElement(hostHusersPageObjects.getUseremail()).sendKeys(UserEmail);
		driver.findElement(hostHusersPageObjects.getUserphonenumber()).sendKeys(UserPhoneNo);
		driver.findElement(hostHusersPageObjects.getUserloginid()).sendKeys(UserLoginID);
		driver.findElement(hostHusersPageObjects.getUserpassword()).sendKeys(property.getProperty("InvalidPassword"));
		driver.findElement(hostHusersPageObjects.getConfirmpassword()).sendKeys(property.getProperty("InvalidConfirmPassword"));
		driver.findElement(hostHusersPageObjects.getActiveradiobtn()).click();
		driver.findElement(hostHusersPageObjects.getSendpasswordoveremail()).click();
		Thread.sleep(2000);
		
		
	}
	
	@Then("^I validate password policy error message$")
	public void I_validate_password_policy_error_message()
	{
		
		Assert.assertTrue(driver.findElement(hostHusersPageObjects.getMessages()).isDisplayed());
		System.out.println(driver.findElement(hostHusersPageObjects.getMessages()).getText());
		//Assert.assertEquals(driver.findElement(hostHusersPageObjects.getMessages()).getText(), property.getProperty("PasswordPolicy"));
	}
	
	@Then("^I click on particular user for editing/deleting the details$")
	public void I_click_on_particular_user_for_editing_the_details() throws InterruptedException {
		
		
		
		List<WebElement> ele1 = driver.findElements(cirrusDCSPageObjects.getAllPaginationbtnone_By_One());
		
		for(int j=0;j<ele1.size()-1;j++ )
		{
			List<WebElement> alldata = driver.findElements(cirrusDCSPageObjects.getCellvalues());
		for(int i=0;i<alldata.size();i++)
		{
			if(alldata.get(i).getText().equals(userLoginId))
			{
			js=(JavascriptExecutor)driver;
			js.executeScript("arguments[0].click();",alldata.get(i));
			
			
			}
			
			
		}
		Thread.sleep(500);
		js= (JavascriptExecutor)driver;
        
        js.executeScript("arguments[0].scrollIntoView(true);",driver.findElement(cirrusDCSPageObjects.getNormalnextbutton()));
		
		js=(JavascriptExecutor)driver;
		js.executeScript("arguments[0].click();",driver.findElement(cirrusDCSPageObjects.getNormalnextbutton()));
		Thread.sleep(2000);
		
		}
		
	}
	
	@Then("^I modify the details of Host user$")
	public void I_modify_the_details_of_Host_user() throws InterruptedException 
	{
		Thread.sleep(2000);
		driver.findElement(hostHusersPageObjects.getUserfirstname()).clear();
		driver.findElement(hostHusersPageObjects.getUserfirstname()).sendKeys(EditUserFirstName);
		driver.findElement(hostHusersPageObjects.getUserlastname()).clear();
		driver.findElement(hostHusersPageObjects.getUserlastname()).sendKeys(EditUserLastName);
		driver.findElement(hostHusersPageObjects.getUseremail()).clear();
		driver.findElement(hostHusersPageObjects.getUseremail()).sendKeys(EditUserEmail);
		driver.findElement(hostHusersPageObjects.getUserphonenumber()).clear();
		driver.findElement(hostHusersPageObjects.getUserphonenumber()).sendKeys(EditUserPhoneNo);
		driver.findElement(hostHusersPageObjects.getUserpassword()).clear();
		driver.findElement(hostHusersPageObjects.getUserpassword()).sendKeys(property.getProperty("EditUserPassword"));
		driver.findElement(hostHusersPageObjects.getConfirmpassword()).clear();
		driver.findElement(hostHusersPageObjects.getConfirmpassword()).sendKeys(property.getProperty("EditUserConfirmPassword"));
		util.click(driver.findElement(hostHusersPageObjects.getActiveradiobtn()));
		util.click(driver.findElement(hostHusersPageObjects.getSendpasswordoveremail()));
		Thread.sleep(2000);
	}
	
	@Then("^I validate whether user details are modified$")
	public void I_validate_whether_user_details_are_modified()
	{
		Assert.assertEquals(driver.findElement(hostHusersPageObjects.getUserfirstname()).getAttribute("value"),EditUserFirstName);
		Assert.assertEquals(driver.findElement(hostHusersPageObjects.getUserlastname()).getAttribute("value"),EditUserLastName);
		Assert.assertEquals(driver.findElement(hostHusersPageObjects.getUseremail()).getAttribute("value"),EditUserEmail);
		Assert.assertEquals(driver.findElement(hostHusersPageObjects.getUserphonenumber()).getAttribute("value"),EditUserPhoneNo);
		
		
	}
	
	@Then("^I verify delete link is displayed$")
	public void I_verify_delete_link_is_displayed()
	{
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(hostHusersPageObjects.getDeleteuserlink())));
		Assert.assertTrue(driver.findElement(hostHusersPageObjects.getDeleteuserlink()).isDisplayed());
	}
	
	@Then("^I click on delete link$")
	public void I_click_on_delete_link() throws InterruptedException 
	{
		
		util.click(driver.findElement(hostHusersPageObjects.getDeleteuserlink()));
		
		Thread.sleep(1000);
	}
	
	@Then("^I validate the delete host user popup is displayed with all the fields$")
	public void I_validate_the_delete_host_user_popup_is_displayed_with_all_the_fields() throws InterruptedException 
	{
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(hostHusersPageObjects.getDisplayvalue1())));
		
		Assert.assertTrue(driver.findElement(hostHusersPageObjects.getDisplayvalue1()).isDisplayed());
		
		Assert.assertTrue(driver.findElement(hostHusersPageObjects.getDisplayvalue2()).isDisplayed());
		
		Assert.assertTrue(driver.findElement(hostHusersPageObjects.getReasonTextAreaField()).isDisplayed());
		
		Assert.assertTrue(driver.findElement(hostHusersPageObjects.getConfirmTextfield()).isDisplayed());
		
		Assert.assertTrue(driver.findElement(hostHusersPageObjects.getCancelbtn()).isDisplayed());
		
		Assert.assertTrue(driver.findElement(hostHusersPageObjects.getDeletebutton()).isDisplayed());
		
	}
	
	@Then("^I Enter all the details that are required to delete the user$")
	public void I_Enter_all_the_details_that_are_required_to_delete_the_user() throws InterruptedException
	{
		Thread.sleep(1000);
		util.sendtext(driver.findElement(hostHusersPageObjects.getReasonTextAreaField()),"testing");
		
		util.sendtext(driver.findElement(hostHusersPageObjects.getConfirmTextfield()),userLoginId);
	}
	
	@Then("^I click on delete button$")
	public void Then_I_click_on_delete_button()
	{
		util.click(driver.findElement(hostHusersPageObjects.getDeletebutton()));
		
	}
	
	@Then("^I click on Yes button$")
	public void I_click_on_Yes_button() throws InterruptedException
	{
		js=(JavascriptExecutor)driver;
		js.executeScript("arguments[0].click();",driver.findElement(hostHusersPageObjects.getYesButton()));
		Thread.sleep(2000);
	}
	
	@Then("^I click on No button$")
	public void I_click_on_No_button()
	{
		driver.findElement(hostHusersPageObjects.getNoButton()).click();
	}
	
	
	@Then("^I validate user deletion$")
	public void I_validate_user_deletion() throws InterruptedException 
	{
		
		String msg = driver.findElement(hostHusersPageObjects.getMessages()).getText();
		
		System.out.println(msg);
		
		I_validate_users_back_from_first_page();
		
	}
	
	@Then("^I validate users back from first page$")
	public void I_validate_users_back_from_first_page() throws InterruptedException
	{
		js.executeScript("arguments[0].click();",driver.findElement(hostHusersPageObjects.getFirstbackwardbtn()));
		
		List<WebElement> ele1 = driver.findElements(cirrusDCSPageObjects.getAllPaginationbtnone_By_One());
		
		for(int j=0;j<ele1.size()-1;j++ )
		{
			//Thread.sleep(2000);
			List<WebElement> cellvalues = driver.findElements(cirrusDCSPageObjects.getCellvalues());
		for(int i=0;i<cellvalues.size();i++)
		{
			
			String val = cellvalues.get(i).getText();
			
		
			if(val.equals(UserLoginID)) {
				
				Assert.assertEquals(val,UserLoginID);
				System.out.println("user record is not deleted");
				
				
			}
			else {
				
				assert true;
			//	System.out.println("user is deleted successfully");
				break;
				
			}
			
			
		}
		
		js= (JavascriptExecutor)driver;
        
        js.executeScript("arguments[0].scrollIntoView(true);",driver.findElement(cirrusDCSPageObjects.getNormalnextbutton()));
		
		js=(JavascriptExecutor)driver;
		js.executeScript("arguments[0].click();",driver.findElement(cirrusDCSPageObjects.getNormalnextbutton()));
		Thread.sleep(2000);
	}
		
		
		
	}
	
	@Then("^I verify roles tab and components present in it$")
	public void I_verify_roles_tab_and_components_present_in_it()
	{
		
		wait.until(ExpectedConditions.visibilityOf(hostHusersPageObjects.getTabs("Roles")));
		
		Assert.assertTrue(hostHusersPageObjects.getTabs("Roles").isDisplayed());
		
		util.Scroll(hostHusersPageObjects.getTabs("Roles"));
		
		util.click(hostHusersPageObjects.getTabs("Roles"));
		
		
		
//		js.executeScript("arguments[0].scrollIntoView(true);",hostHusersPageObjects.getTabs("Roles"));		
//		js.executeScript("arguments[0].click();",hostHusersPageObjects.getTabs("Roles"));
		
		
		
		List<WebElement> roles = driver.findElements(hostHusersPageObjects.getDefaultroles());
		
		for(WebElement ele:roles )
		{
			Assert.assertTrue(ele.isDisplayed());
		}
		
		List<WebElement> checkboxes = driver.findElements(hostHusersPageObjects.getCheckboxesforeachRoles());
		for(WebElement ele1:checkboxes )
		{
			Assert.assertTrue(ele1.isDisplayed());
		}
		
		Assert.assertTrue(driver.findElement(hostHusersPageObjects.getUpdateRolebutton()).isDisplayed());
	}
	
	@Then("^I select all checkboxes$")
	public void I_select_all_checkboxes_and_update_the_role_for_a_user()
	{
		util.click(driver.findElement(hostHusersPageObjects.getSelectingAllCheckbox()));
		
	}
	
	@Then("^I click on update role button and validate the roles update$")
	public void I_click_on_update_role_button_and_validate_the_roles_update()
	{
		
		util.click(driver.findElement(hostHusersPageObjects.getUpdateRolebutton()));
		
		System.out.println(driver.findElement(hostHusersPageObjects.getMessages()).getText());
		
		
	
	}
	
	@Then("^I select individual checkbox$")
	public void I_select_individual_checkbox()
	{
		List<WebElement> role = driver.findElements(hostHusersPageObjects.getCheckboxesforeachRoles());
		
		for(WebElement ele:role)
		{
			util.click(ele);
			
			util.click(driver.findElement(hostHusersPageObjects.getUpdateRolebutton()));
			
		//	System.out.println(driver.findElement(hostHusersPageObjects.getMessages()).getText());
			
		}
		
	}
	
	@Then("^I click on delegations tab$")
	public void I_click_on_delegations_tab()
	{
	util.click(hostHusersPageObjects.getTabs("Delegations"));
		
	}
	
	@Then("^I validate the components present in delegation tab$")
	public void I_validate_the_components_present_in_delegation_tab()
	{
		
		Assert.assertTrue(driver.findElement(hostHusersPageObjects.getDelegateButton()).isDisplayed());
		
		Assert.assertTrue(driver.findElement(hostHusersPageObjects.getSelectingAllCheckboxDelegate()).isDisplayed());
		
		List<WebElement> checkboxes = driver.findElements(hostHusersPageObjects.getIndividualcheckboxfordelegate());
		
		for(WebElement ele: checkboxes)
		{
			
			Assert.assertTrue(ele.isDisplayed());
		}
		
	}
	
	@Then("^I verify the columns present in the delegations tab$")
	public void I_verify_the_columns_present_in_the_delegations_tab()
	{
		List<WebElement> columns = driver.findElements(hostHusersPageObjects.getColumnsinDelegatetab());
		
		for(WebElement ele:columns)
		{
			
			System.out.println(ele.getText());
			
			Assert.assertTrue(ele.isDisplayed());
			
		}

		
	}
	
	@Then("^I Create delegate account for individual user$")
	public void I_Create_delegate_account_for_individual_user() throws InterruptedException
	{
		List<WebElement> checkbox = driver.findElements(hostHusersPageObjects.getIndividualcheckboxfordelegate());
		
		List<WebElement> cell = driver.findElements(hostHusersPageObjects.getClientNameCellvalue());
		
		for(int i=0;i<cell.size();i++)
			{
				if(cell.get(i).getText().equals(property.getProperty("clientname")))
					
						
				{
						util.Scroll(checkbox.get(i));
					
						util.click(checkbox.get(i));
						
						util.Scroll(driver.findElement(hostHusersPageObjects.getDelegateButton()));
				
						util.click(driver.findElement(hostHusersPageObjects.getDelegateButton()));
				
						Assert.assertTrue(driver.findElement(hostHusersPageObjects.getMessages()).isDisplayed());
				
						System.out.println(driver.findElement(hostHusersPageObjects.getMessages()).getText());
				
						break;
				
				}
			
			
		}
		
}
	
	@Then("^I validate user account is delegated for individual tenant$")
	public void I_validate_user_account_is_delegated() throws InterruptedException
	{
		
		driver.navigate().refresh();
		
		hostHusersPageObjects.getTabs("Delegations").click();		
		
		Thread.sleep(2000);
		
		List<WebElement> delegatcell = driver.findElements(hostHusersPageObjects.getDelegateCell());
		
		String val = driver.findElement(hostHusersPageObjects.getFirstcellvalue()).getText();
	
		String val2 = val.replaceAll(val, "h_"+val);
	
		String val1 = val2.concat("@zktk");

		for(WebElement ele:delegatcell)
		{
			
			if(ele.getText().equals(val1)){
				
				System.out.println(ele.getText());
				
				String expected = ele.getText();
				
				Assert.assertEquals(expected,ele.getText());
			}
		}
		
	}
	
	@Then("^I Create delegate account for all users$")
	public void I_Create_delegate_account_for_all_users()
	{
		driver.findElement(hostHusersPageObjects.getSelectingAllCheckboxDelegate()).click();
		
		util.Scroll(driver.findElement(hostHusersPageObjects.getDelegateButton()));
		
		util.click(driver.findElement(hostHusersPageObjects.getDelegateButton()));
		
		Assert.assertTrue(driver.findElement(hostHusersPageObjects.getMessages()).isDisplayed());
		
		System.out.println(driver.findElement(hostHusersPageObjects.getMessages()).getText());
		
		
		
	}
	
	@Then("^I validate user account is delegated for all tenants$")
	public void I_validate_user_account_is_delegated_for_all_tenants() throws InterruptedException
	{
		driver.navigate().refresh();
		
		util.click(hostHusersPageObjects.getTabs("Delegations"));		
		
		Thread.sleep(2000);
		
		List<WebElement> delegatcell = driver.findElements(hostHusersPageObjects.getDelegateCell());
		
		List<WebElement> clientid = driver.findElements(hostHusersPageObjects.getClientIdCellvalue());
		
		WebElement userid = driver.findElement(hostHusersPageObjects.getFirstcellvalue());
		
		
		

		
			
				String val1 = userid.getText();
				
				String val2 = val1.replaceAll(val1, "h_"+val1+"@");
				
				for(int i=0;i<clientid.size();i++)
				{
				
					String val = clientid.get(i).getText();
					
					String val3 = val2.concat(val);
					
					if(delegatcell.get(i).getText().equalsIgnoreCase(val3))
						{
				
					//	System.out.println(delegatcell.get(i).getText());
				
						String expected = delegatcell.get(i).getText();
				
						Assert.assertEquals(expected,delegatcell.get(i).getText());
						}
					}
		
				}
	
		
			
	@Then("^I click on subscription tab$")
	public void I_click_on_subscription_tab()
	{
	util.click(hostHusersPageObjects.getTabs("Subscription"));
		
	}
	
	@Then("^I subscribe for Individual Event$")
	public void I_subscribe_for_Individual_Event()
	{
		driver.findElement(hostHusersPageObjects.getIndividualcheckboxforsubscription()).click();
		
		util.Scroll(driver.findElement(hostHusersPageObjects.getUpdateSubscriptionbutton()));
		
		util.click(driver.findElement(hostHusersPageObjects.getUpdateSubscriptionbutton()));
		
		Assert.assertTrue(driver.findElement(hostHusersPageObjects.getMessages()).isDisplayed());
		
		System.out.println(driver.findElement(hostHusersPageObjects.getMessages()).getText());
		
		
		
	}
	
	@Then("^I validate individual event is subscribed/unscribed$")
	public void I_validate_event_is_subscribed()
	{
		driver.navigate().refresh();
		
		util.click(hostHusersPageObjects.getTabs("Subscription"));
		
		String active = driver.findElement(hostHusersPageObjects.getIndividualcheckboxforsubscription()).getAttribute("class");
		
		if(driver.findElement(hostHusersPageObjects.getIndividualcheckboxforsubscription()).getAttribute("class").equalsIgnoreCase(property.getProperty("checkboxactive")))
		{
			Assert.assertEquals(active,property.getProperty("checkboxactive"));
			System.out.println("event subscribed");
		}
		
		else {
			
			System.out.println("event unsubscribed");
		}
	}
	
	@Then("^I validate the components present in subscription tab$")
	public void I_validate_the_components_present_in_subscription_tab()
	{
		
		Assert.assertTrue(driver.findElement(hostHusersPageObjects.getUpdateSubscriptionbutton()).isDisplayed());
		
		Assert.assertTrue(driver.findElement(hostHusersPageObjects.getSelectingAllCheckboxforSubscription()).isDisplayed());
		
		List<WebElement> checkboxes = driver.findElements(hostHusersPageObjects.getCheckboxforallsubscription());
		
		for(WebElement ele: checkboxes)
		{
			
			Assert.assertTrue(ele.isDisplayed());
		}
		
	}
	
	@Then("^I subscribe for all Event$")
	public void I_subscribe_for_all_Events()
	{
		driver.findElement(hostHusersPageObjects.getSelectingAllCheckboxforSubscription()).click();
		
		util.Scroll(driver.findElement(hostHusersPageObjects.getUpdateSubscriptionbutton()));
		
		util.click(driver.findElement(hostHusersPageObjects.getUpdateSubscriptionbutton()));
		
		Assert.assertTrue(driver.findElement(hostHusersPageObjects.getMessages()).isDisplayed());
		
		System.out.println(driver.findElement(hostHusersPageObjects.getMessages()).getText());
		
		
		
	}
	
	@Then("^I validate all event is subscribed/unscribed$")
	public void I_validate_all_event_is_subscribed()
	{
		driver.navigate().refresh();
		
		util.click(hostHusersPageObjects.getTabs("Subscription"));
		
		String active = driver.findElement(hostHusersPageObjects.getSelectingAllCheckboxforSubscription()).getAttribute("class");
		
		if(driver.findElement(hostHusersPageObjects.getIndividualcheckboxforsubscription()).getAttribute("class").equalsIgnoreCase(property.getProperty("checkboxactive")))
		{
			Assert.assertEquals(active,property.getProperty("checkboxactive"));
			System.out.println("event subscribed");
		}
		
		else {
			
			System.out.println("event unsubscribed");
		}
	}
	
	@Then("^I verify the columns present in the subscription tab$")
	public void I_verify_the_columns_present_in_the_subscriptions_tab()
	{
		List<WebElement> columns = driver.findElements(hostHusersPageObjects.getSubscriptioncolumns());
		
		for(WebElement ele:columns)
		{
			
			//System.out.println(ele.getText());
			
			Assert.assertTrue(ele.isDisplayed());
			
		}

		
	}
	
	@When("^I perform mousehower on Device operation & Audit$")
	public void I_perform_mousehower_on_Device_operation_And_Audit()
	{
		actions.moveToElement(driver.findElement(deviceoperationspageobjects.getDeviceOperationsAndAudit())).build().perform();
		
		
	}
	
	@When("^I perform mousehower on Reports in SuperTenant$")
	public void I_perform_mousehower_on_Reports_in_SuperTenant() throws InterruptedException
	{
		Thread.sleep(2000);
		util.mousehoweronmodules("Reports");
		
	}
	
	@And("^I click on Device Operations sub module$")
	public void I_click_on_Device_Operations_sub_module()
	{
		util.click(driver.findElement(deviceoperationspageobjects.getDeviceOperations()));
		
		wait.until(ExpectedConditions.titleIs("Device Operations | ZK Data Collection services"));
		
	}
	
	@Then("^I validate user navigation to device operations page$")
	public void I_validate_user_navigation_to_device_operations_page()
	{
		System.out.println(driver.getTitle());
		
		String Actual = driver.getTitle();
		
		Assert.assertEquals(Actual,property.getProperty("deviceOperationTitle"));
	}
	
	@Then("^I validate the sections present in the device operations page$")
	public void I_validate_the_sections_present_in_the_device_operations_page()
	{
		
		Assert.assertTrue(deviceoperationspageobjects.getSections("Device List").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getSections("Device Remote Operation Advanced").isDisplayed());
		
		Assert.assertTrue(driver.findElement(deviceoperationspageobjects.getDeviceListSection()).isDisplayed());
		
		Assert.assertTrue(driver.findElement(deviceoperationspageobjects.getDeviceRemoteOperationAdvancedsection()).isDisplayed());
		
	}
	
	@Then("^I validate the components present in the device list section$")
	public void I_validate_the_components_present_in_the_device_list_section()
	{
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(deviceoperationspageobjects.getSearchtextfield())));
		
		Assert.assertTrue(driver.findElement(deviceoperationspageobjects.getSearchtextfield()).isDisplayed());
		
		Assert.assertTrue(driver.findElement(deviceoperationspageobjects.getSearchicon()).isDisplayed());
		
		Assert.assertTrue(driver.findElement(deviceoperationspageobjects.getDevicestatuscheckboxes()).isDisplayed());
		
		Assert.assertTrue(driver.findElement(deviceoperationspageobjects.getTotaldevicescount()).isDisplayed());
		
		
	}
	
	@Then("^I validate the components in device details section of device info page$")
	public void I_validate_the_components_in_device_details_section_of_device_info_page()
	{
		Assert.assertTrue(deviceoperationspageobjects.getButtons("Runtime Monitor").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getButtonswithindex("Refresh",2).isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getButtons("View Options").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getButtons("View Bell Schedule").isDisplayed());
		
	}
	
	@Then("^I validate whether all the devices are present$")
	public void I_validate_whether_all_the_devices_are_present() throws InterruptedException
	{
		
		
		wait.until(ExpectedConditions.invisibilityOf(driver.findElement(By.xpath("//img[@id='j_id_b']"))));
		
		List<WebElement> icons = driver.findElements(deviceoperationspageobjects.getRightarrow());
	
		for(int i=0;i<icons.size();i++)
		{
			
			
			if(icons.get(i).getAttribute("style").isEmpty())
			{

				util.click(icons.get(i));



			}
			
	}
		
		List<WebElement> status = driver.findElements(deviceoperationspageobjects.getDevicestatuscolor());
		
		for(int j=0;j<status.size();j++)
		{
			
			Assert.assertTrue(status.get(j).isDisplayed());
			
		
		}
		
	}
	
	@Then("^I validate whether all the components are present in device remote operation advanced section$")
	public void I_validate_whether_all_the_components_are_present_in_device_remote_operation_advanced_section() throws InterruptedException
	
	{
		Thread.sleep(1000);
		
		Assert.assertTrue(deviceoperationspageobjects.getInputtextfield("Tenant").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getInputtextfield("Device SN").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getInputtextfield("Device Name").isDisplayed());
		
		Assert.assertTrue(driver.findElement(deviceoperationspageobjects.getCommandtextarea()).isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getButtons("Submit").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getButtons("Send Att Resubmit to all clocks").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getButtons("Refresh").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getButtons("Move Device").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getButtons("Delete").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getTextareafield("Command").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getTextareafield("Command Result").isDisplayed());
		
		
		
	}
	
	@Then("^I enter tenant name into search field$")
	public void I_enter_tenant_name_into_search_field()
	{
		driver.findElement(deviceoperationspageobjects.getSearchtextfield()).sendKeys("tenantName");
	}
	
	@Then("^I enter tenant name into search field for supertenant customer$")
	public void I_enter_tenant_name_into_search_field_for_supertenant_customer()
	{
		driver.findElement(deviceoperationspageobjects.getSearchtextfield()).sendKeys(property.getProperty("customer"));
	}
	
	@Then("^I click on Search Icon$")
	public void I_click_on_search_icon()
	{
		util.click(driver.findElement(deviceoperationspageobjects.getSearchicon()));
	}
	
	@Then("^I validate the search results$")
	public void I_validate_the_search_results()
	{
		List<WebElement> ele = driver.findElements(deviceoperationspageobjects.getSearchresults());
		
		for(int i=0;i<ele.size();i++)
		{
			String val = ele.get(i).getText();
			
		if(val.equals("Guardian Pharmacy")) {
			
			System.out.println("record searched successfully with client name");
			
			ExtentCucumberAdapter.addTestStepLog("record searched successfully with client name");
			break;
		}
		else if(val.equals("CGP5201160105"))
		{
			System.out.println("record searched successfully with device sn");
			ExtentCucumberAdapter.addTestStepLog("record searched successfully with device sn");
			break;
			
		}
		
		else if(val.equals("testing device"))
		{
			System.out.println("record searched successfully with device name");
			ExtentCucumberAdapter.addTestStepLog("record searched successfully with device name");
			break;
		}
		
		
		}
	}
	
	@Then("^I enter devicesn into search field$")
	public void I_enter_devicesn_name_into_search_field() throws InterruptedException
	{
		util.sendtext(driver.findElement(deviceoperationspageobjects.getSearchtextfield()), devicesn);
		//driver.findElement(deviceoperationspageobjects.getSearchtextfield()).sendKeys("CGP5201160105");
	}
	
	@Then("^I enter devicename into search field$")
	public void I_enter_devicename_into_search_field()
	{
		util.sendtext(driver.findElement(deviceoperationspageobjects.getSearchtextfield()),devicesn);
	}
	
	@Then("^I validate columns after search results$")
	public void I_validate_columns_after_search_results() 
	{
		List<WebElement> columns = driver.findElements(deviceoperationspageobjects.getSearchcolumns());
		
		for(int i=0;i<columns.size()-2;i++)
		{
			System.out.println(columns.get(i).getText());
			
			Assert.assertTrue(columns.get(i).isDisplayed());
		}
		
	}
	
	@Then("^I click on online status check box$")
	public void I_click_on_online_status_check_box()
	{
		List<WebElement> status = driver.findElements(deviceoperationspageobjects.getDevicestatuscheckboxes());
		
		util.click(status.get(0));		
		
	}
	
	@Then("^I validate whether all the devices present based on the device status$")
	public void I_validate_whether_all_the_devices_present_based_on_the_device_status() throws InterruptedException
	
	{
		
		wait.until(ExpectedConditions.invisibilityOf(driver.findElement(By.xpath("//img[@id='j_id_b']"))));
		
		List<WebElement> icons = driver.findElements(deviceoperationspageobjects.getRightarrow());
	
	
		
		for(int i=0;i<icons.size();i++)
		{
			
			
			if(icons.get(i).getAttribute("style").isEmpty())
			{

				util.click(icons.get(i));

				Thread.sleep(300);

			}
			
		}
		
		
		
	
		List<WebElement> status = driver.findElements(deviceoperationspageobjects.getDevicestatuscolor());
		
		System.out.println(status.size());
		
		for(int j=0;j<status.size();j++)
		{
			
			Assert.assertTrue(status.get(j).isDisplayed());
			
		
		}
		
		util.click(driver.findElement(By.xpath("//div[@class='ui-chkbox-box ui-widget ui-corner-all ui-state-default ui-state-active']")));
		
		
		
		List<WebElement> ele = driver.findElements(deviceoperationspageobjects.getDevicestatuscount());
		 
		 for(int k=0;k<ele.size();k++)
		 {
			 
			 String txt = ele.get(k).getText();
			 
			 StringBuilder myNumbers = new StringBuilder();
	    
			 for (int i1 = 0; i1 < txt.length(); i1++)
			 {
				 if (Character.isDigit(txt.charAt(i1))) 
				 {
					 myNumbers.append(txt.charAt(i1));
	          
				 } 
			 }
	  
			 String val = myNumbers.toString();
			 
			 int count = Integer.parseInt(val);
			 
			//	 wait.until(ExpectedConditions.numberOfElementsToBe(deviceoperationspageobjects.getDevicestatuscolor(), count));
		
				if(status.size()==count)
				{
					System.out.println("record present as per the device status count");
				}
		
				
		
	}
			
	}
			
	
	
	@Then("^I click on pending status check box$")
	public void I_click_on_pending_status_check_box()
	{
		List<WebElement> status = driver.findElements(deviceoperationspageobjects.getDevicestatuscheckboxes());
		
		util.click(status.get(1));		
		
	}
		
	

	@Then("^I click on offline status check box$")
	public void I_click_on_offline_status_check_box()
	{
		List<WebElement> status = driver.findElements(deviceoperationspageobjects.getDevicestatuscheckboxes());
		
		util.click(status.get(2));		
		
	}
			
	@Then("^I click on deleted status check box$")
	public void I_click_on_deleted_status_check_box()
	{
		List<WebElement> status = driver.findElements(deviceoperationspageobjects.getDevicestatuscheckboxes());
		
		util.click(status.get(3));		
		
	}
		
	@Then("^I click on all status check box$")
	public void I_click_on_all_status_check_box()
	{
		List<WebElement> status = driver.findElements(deviceoperationspageobjects.getDevicestatuscheckboxes());
		
		for(WebElement ele:status)
		{
			util.click(ele);
		}
		
	}	
	
	@Then("^I validate whether all the devices present based on all the device status$")
	public void I_validate_whether_all_the_devices_present_based_on_all_the_device_status() throws InterruptedException
	
	{
		
		wait.until(ExpectedConditions.invisibilityOf(driver.findElement(By.xpath("//img[@id='j_id_b']"))));
		
		List<WebElement> icons = driver.findElements(deviceoperationspageobjects.getRightarrow());
	
	
		
		for(int i=0;i<icons.size();i++)
		{
			
			
			if(icons.get(i).getAttribute("style").isEmpty())
			{

				util.click(icons.get(i));

				Thread.sleep(500);

			}
			
		}
		
			int online = driver.findElements(By.xpath("//tbody/tr/td[3]//i[@style='color: green']")).size();

			int deleted = driver.findElements(By.xpath("//tbody/tr/td[3]//i[@style='color: red']")).size();
		
			int pending = driver.findElements(By.xpath("//tbody/tr/td[3]//i[@style='color: orange']")).size();

			int offline = driver.findElements(By.xpath("//tbody/tr/td[3]//i[@style='color: #E8E8E8']")).size();

		List<WebElement> all = driver.findElements(By.xpath("//div[@class='ui-chkbox-box ui-widget ui-corner-all ui-state-default ui-state-active']"));
		
		for(WebElement a:all )
		{

		util.click(a);
		
		}
		
		List<WebElement> ele = driver.findElements(deviceoperationspageobjects.getDevicestatuscount());
		 
		 for(int k=0;k<ele.size();k++)
		 {
			 
			 String txt = ele.get(k).getText();
			 
			 StringBuilder myNumbers = new StringBuilder();
	    
			 for (int i1 = 0; i1 < txt.length(); i1++)
			 {
				 if (Character.isDigit(txt.charAt(i1))) 
				 {
					 myNumbers.append(txt.charAt(i1));
	          
				 } 
			 }
	  
			 String val = myNumbers.toString();
			 
			 int count = Integer.parseInt(val);
			 
		
				if(online==count)
				{
					System.out.println("online devices filtered as per the count");
				}
				
				if(offline==count)
				{
					System.out.println("offline devices filtered as per the count");
				}
				if(deleted==count)
				{
					System.out.println("deleted devices filtered as per the count");
				}
				if(pending==count)
				{
					System.out.println("pending devices filtered as per the count");
				}
				
		
	}
			
	}
	
	
	@Then("^I validate data auto autopopulation based on the selected device$")
	public void I_validate_data_auto_autopopulation_based_on_the_selected_device() throws InterruptedException
	{
		List<WebElement> ele = driver.findElements(deviceoperationspageobjects.getSearchresults());
		
		ArrayList<String>l1=new ArrayList<String>();
		
		ele.get(1).click();
		
		wait.until(ExpectedConditions.invisibilityOf(driver.findElement(By.xpath("//img[@id='j_id_b']"))));
		
		for(int i=0;i<ele.size();i++)
		{
		
			String txt = ele.get(i).getText();
			
			l1.add(txt);
			
		}
		
	String tenantfield = driver.findElement(deviceoperationspageobjects.getTenantname()).getAttribute("value");
	
	String name = driver.findElement(deviceoperationspageobjects.getDevicename()).getAttribute("value");
	
	String sn=driver.findElement(deviceoperationspageobjects.getDevicesn()).getAttribute("value");
	
	if(l1.get(0).equals(tenantfield) && l1.get(1).equals(sn) && l1.get(2).equals(name) ) 
		{
			
			System.out.println("data autopopulated based on the selected device successfully");
			
			
		}
		
	}
	
	

	@Then("^I enter command into field$")
	public void I_enter_command_into_field() throws InterruptedException
	{
		Thread.sleep(2000);
		util.sendtext(driver.findElement(By.xpath("(//textarea)[1]")),property.getProperty("supportemail"));
	}
			
	
	@Then("^I click on submit button$")
	public void I_click_on_submit_button()
	{
		util.submitbutton();
	}
	
	@Then("^I select the device$")
	public void I_select_the_device(){
		
		List<WebElement> ele = driver.findElements(deviceoperationspageobjects.getSearchresults());
		
		ele.get(0).click();
	}
	
	@Then("^I validate the success message$")
	public void I_validate_the_success_message()
	{
		util.successmessage();
		
	}
	
	@Then("^I validate sent command is displayed in executed result table$")
	public void I_validate_sent_command_is_displayed_in_executed_result_table()
	{
		Assert.assertTrue(driver.findElement(deviceoperationspageobjects.getExecutedresultstable()).isDisplayed());
		
		System.out.println(driver.findElement(deviceoperationspageobjects.getExecutedresultstable()).getText());
	}
	
	@Then("^I validate the command results section after selecting the executed command$")
	public void I_validate_the_command_results_section_after_selecting_the_executed_command() throws InterruptedException
	{
		wait.until(ExpectedConditions.invisibilityOf(driver.findElement(hostHusersPageObjects.getMessages())));
	
		actions.moveToElement(driver.findElement(By.xpath("//table/tbody[@id='deviceOperationForm:commandResult_data']/tr"))).click().build().perform();
		
		util.Scroll(deviceoperationspageobjects.getTextareafield("Command"));
		
		Thread.sleep(1000);
		
		System.out.println(deviceoperationspageobjects.getTextareafield("Command").getAttribute("value"));
		
		Assert.assertEquals(deviceoperationspageobjects.getTextareafield("Command").getAttribute("value"),property.getProperty("supportemail"));
		
	//	Assert.assertTrue(deviceoperationspageobjects.getTextareafield("Command Result").isDisplayed());
		
		
	}
	
	@Then("^I validate device command popup is displayed for command field more button$")
	public void I_validate_device_command_popup_is_displayed()
	
	{
		deviceoperationspageobjects.morebtn(1).click();
		
		wait.until(ExpectedConditions.visibilityOf(deviceoperationspageobjects.getmorepopup("Device Command")));
		
		Assert.assertTrue(deviceoperationspageobjects.getmorepopup("Device Command").isDisplayed());
		
		String txt = deviceoperationspageobjects.getmorepopup("Device Command").getText();
		
		
		
		if(txt.contains(property.getProperty("supportemail")))
		{
		
			
			System.out.println("same command sent to device");
		}
		
		
	}
	
	@Then("^I validate device command popup is displayed for command Result more button$")
	public void I_validate_device_command_popup_is_displayed_for_command_Result_more_button() throws InterruptedException
	
	{
		driver.findElement(By.xpath("//td[.='Command Result :']/..//input/../..//span")).click();
		
		wait.until(ExpectedConditions.visibilityOf(deviceoperationspageobjects.getmorepopup("Device Command Result")));
		
		Assert.assertTrue(deviceoperationspageobjects.getmorepopup("Device Command Result").isDisplayed());
		
		String txt = deviceoperationspageobjects.getmorepopup("Device Command Result").getText();
		
		
		
		if(txt.contains(property.getProperty("supportemail")))
		{
		
			
			System.out.println("same command sent to device");
		}
		
		
	}
	
	@Then("^I click on Refresh button and I validate the page refresh$")
	public void I_click_on_Refresh_button()
	{
		util.refreshButton();
		
		Assert.assertTrue(driver.findElement(By.xpath("//img[@id='j_id_b']")).isDisplayed());
		
	}
	
	@Then("^I click on move device button$")
	public void I_click_on_move_device_button() throws InterruptedException
	{
		util.Scroll(deviceoperationspageobjects.getButtons("Move Device"));
		util.click(deviceoperationspageobjects.getButtons("Move Device"));
		Thread.sleep(2000);
		
	}
	
	@Then("^I verify move device popup window is displayed$")
	public void I_verify_move_device_popup_window_is_displayed()
	{
		
		Assert.assertTrue(driver.findElement(deviceoperationspageobjects.getMovedevicepopupwindow()).isDisplayed());
	}
	
	@Then("^I verify the components in move device popup$")
	public void I_verify_the_components_in_move_device_popup()
	{
		
		
		Assert.assertTrue(driver.findElement(deviceoperationspageobjects.getSelectclientdropdown()).isDisplayed());
		
		Assert.assertTrue(driver.findElement(By.xpath("(//textarea)[2]")).isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getButtons("Cancel").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getButtons("Move").isDisplayed());
		
		Assert.assertTrue(driver.findElement(deviceoperationspageobjects.getCloseiconinmovedevicepopup()).isDisplayed());
		
		
	}
	
	@Then("^I move the device to other tenant$")
	public void I_move_the_device_to_other_tenant() throws InterruptedException
	{
		util.click(driver.findElement(deviceoperationspageobjects.getSelectclientdropdown()));
		
		List<WebElement> drop = driver.findElements(deviceoperationspageobjects.getDropdownvalues());
		
		for(WebElement ele:drop)
		{
			if(ele.getText().equals(property.getProperty("devicemovetoclient")))
			{
				
				util.click(ele);
			}
		}
		
		util.sendtext(driver.findElement(By.xpath("(//textarea)[2]")), "test");
		
		util.click(deviceoperationspageobjects.getButtons("Move"));
		
		I_click_on_Yes_button();
		
		I_validate_the_success_message();
		
	}
	
	@Then("^I login to tenant and verify whether device is moved$")
	public void I_login_to_tenant_and_verify_whether_device_is_moved() throws AWTException, InterruptedException
	{
		Robot r=new Robot();
		
		r.keyPress(KeyEvent.VK_CONTROL);
		
		r.keyPress(KeyEvent.VK_P);
		
		
		r.keyRelease(KeyEvent.VK_CONTROL);
		
		r.keyRelease(KeyEvent.VK_P);
		
		driver.get(property.getProperty("tenanturl"));
		
		driver.findElement(cirrusDCSPageObjects.getUserName()).sendKeys(property.getProperty("tenantloginid"));
		driver.findElement(cirrusDCSPageObjects.getPassword()).sendKeys(property.getProperty("Password"));
		
		I_Click_on_Login_button();
		
		util.mousehoweronmodules("Device Manager");
		
		Thread.sleep(1000);
		
		util.clickonsubmodules("Devices Info");
		
		I_enter_devicesn_name_into_search_field();
		
		I_click_on_search_icon();
		

		List<WebElement> ele = driver.findElements(deviceoperationspageobjects.getSearchresults());
		
		for(int i=0;i<ele.size();i++)
		{
			String val = ele.get(i).getText();
			
			if(val.equals("CGP5201160105")) 
			{
			
			System.out.println("device moved successfully to other tenant");
			
			ExtentCucumberAdapter.addTestStepLog("record searched successfully with client name");
			
			}
			
		
		
		}
	}
	
	@Then("^I click on Delete button$")
	public void I_click_on_Delete_button() throws InterruptedException 
	{
		
		util.click(deviceoperationspageobjects.getButtons("Delete"));
		Thread.sleep(2000);
	}
	
	@Then("^I verify delete device popup window is displayed$")
	public void I_verify_delete_device_popup_window_is_displayed()
	{
		
		Assert.assertTrue(driver.findElement(deviceoperationspageobjects.getDeletedevicepopup()).isDisplayed());
	}
	
	@Then("^I verify the components present in the delete device popup$")
	public void I_verify_the_components_present_in_the_delete_device_popup()
	{
		
	wait.until(ExpectedConditions.visibilityOf(driver.findElement(deviceoperationspageobjects.getDeletedevicepopup())));
	
	Assert.assertTrue(deviceoperationspageobjects.getInputtextfieldfordeletepopup("Device Serial Number:").isDisplayed());
	
	Assert.assertTrue(deviceoperationspageobjects.getInputtextfieldfordeletepopup("Tenant:").isDisplayed());
	
	Assert.assertTrue(deviceoperationspageobjects.getDeletedevicepopuptextfields("deviceDeleteConfirmation").isDisplayed());
	
	Assert.assertTrue(deviceoperationspageobjects.getDeletedevicepopuptextfields("reasonForDelete").isDisplayed());
	
	Assert.assertTrue(driver.findElement(By.xpath("(//span[.='Delete'])[2]")).isDisplayed());
	
	
	}
	
	@Then("^I enter all the details and delete the device$")
	public void I_enter_all_the_details_and_delete_the_device() throws InterruptedException
	{
		deviceoperationspageobjects.getDeletedevicepopuptextfields("deviceDeleteConfirmation").sendKeys("delete device");
		
		deviceoperationspageobjects.getDeletedevicepopuptextfields("reasonForDelete").sendKeys("delete");
		
		util.click(driver.findElement(By.xpath("(//span[.='Delete'])[2]")));
		
		I_click_on_Yes_button();
		
		
		
	}
	
	@Then("^I validate deleted device is present$")
	public void I_validate_deleted_device_is_present() throws InterruptedException
	{
		I_enter_devicesn_name_into_search_field();
		
		I_click_on_search_icon();
		
		List<WebElement> ele = driver.findElements(deviceoperationspageobjects.getSearchresults());
		
		for(int i=0;i<ele.size();i++)
		{
			String val = ele.get(i).getText();
			
			if(val.isEmpty()) 
			{
			
			System.out.println("device deleted successfully");
			
			break;
			}
			
		
		
		}
		
		
	}
	
	@Then("^I click on Send Att Resubmit to all clocks$")
	public void I_click_on_Send_Att_Resubmit_to_all_clocks()
	{
		util.click(deviceoperationspageobjects.getButtons("Send Att Resubmit to all clocks"));	
	}
	
	@Then("^I click on device monitor submodule$")
	public void I_click_on_device_monitor_submodule()
	{
		util.clickonsubmodules("Device Monitor");
	}
	
	@Then("^I validate the command is sent to device or not$")
	public void I_validate_the_command_is_sent_to_device_or_not() throws InterruptedException
	{
		I_enter_devicesn_name_into_search_field();
		
		I_click_on_search_icon();
		
		I_select_the_device();
		
	}
	
	//Device Monitor
	
	@And("^I click on Device Monitor sub module$")
	public void I_click_on_Device_Monitor_sub_module()
	{
		
		util.clickonsubmodules("Device Monitor");
		
		wait.until(ExpectedConditions.titleIs("Device Monitor | ZK Data Collection services"));
		
	}
	
	@Then("^I validate user navigation to device monitor page$")
	public void I_validate_user_navigation_to_device_monitor_page()
	{
		System.out.println(driver.getTitle());
		
		String Actual = driver.getTitle();
		
		Assert.assertEquals(Actual,property.getProperty("deviceMonitorTitle"));
	}
	
	@Then("^I validate the sections present in the device monitor page$")
	public void I_validate_the_sections_present_in_the_device_monitor_page()
	{
		
		Assert.assertTrue(deviceoperationspageobjects.getSections("Device List").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getSections("Device Monitor").isDisplayed());
		
		Assert.assertTrue(driver.findElement(deviceoperationspageobjects.getDeviceListSection()).isDisplayed());
		
		Assert.assertTrue(driver.findElement(deviceoperationspageobjects.getDeviceRemoteOperationAdvancedsection()).isDisplayed());
		
	}
	
	@Then("^I validate the components present in the device live log tab$")
	public void I_verify_the_components_in_device_live_log_page()
	{
		Assert.assertTrue(deviceoperationspageobjects.getButtons("Off").isDisplayed());
		
	//	Assert.assertTrue(deviceoperationspageobjects.getAutopopulatedfields("Tenant").isDisplayed());
				
		Assert.assertTrue(deviceoperationspageobjects.getAutopopulatedfields("Auto Refresh").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getAutopopulatedfields("Device SN").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getAutopopulatedfields("Device Name").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getAutopopulatedfields("Last Heartbeat Time").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getAutopopulatedfields("HeartbeatServer Time").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getAutopopulatedfields("Last Reboot").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getAutopopulatedfields("Clock Sync Time").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getAutopopulatedfields("Last Transaction").isDisplayed());
		
		
		
	}
	
	@Then("^I validate data auto autopopulation based on the selected device in device live log tab$")
	public void I_validate_data_auto_autopopulation_based_on_the_selected_device_in_device_live_log_tab() throws InterruptedException
	{
		
		
		List<WebElement> ele = driver.findElements(deviceoperationspageobjects.getSearchresults());
		
		ele.get(0).click();
		
		List<WebElement> data = deviceoperationspageobjects.getautodata();
		
		ArrayList<String>l1=new ArrayList<String>();
		
		for(int i=0;i<data.size();i++)
		{
			Thread.sleep(1500);
			
			l1.add(data.get(i).getText());
			
			if(data.get(i).getText().equals(devicesn))
			{
				System.out.println("data autopopulated successfully");
				
			}
			
			
			
			
		}
		
		System.out.println(l1);
	}
	
	@Then("^I verify auto refresh functionality is working$")
	public void I_verify_auto_refresh_functionality_is_working()
	{
		
		util.click(deviceoperationspageobjects.getButtons("Off"));
		
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(deviceoperationspageobjects.getLoader())));
		
		if(driver.findElement(deviceoperationspageobjects.getLoader()).isDisplayed())
		{
			assert true;
			System.out.println("autorefresh is working");
		}
		
		else {
			
			assert false;
		}
		
		
		
		
	}
	
	@Then("^I click on Message Queue tab$")
	public void I_click_on_Message_Queue_tab() throws InterruptedException
	{
		Thread.sleep(2000);
		util.click(hostHusersPageObjects.getTabs("Message Queue"));
	}
	
	@Then("^I validate the components & columns present in the message queue tab$")
	public void I_verify_the_components_in_message_queue_tab() throws InterruptedException
	{
		Thread.sleep(2000);		
		
		Assert.assertTrue(deviceoperationspageobjects.getAutopopulatedfieldsinmessagequeuetab("Device SN").isDisplayed());
				
		Assert.assertTrue(deviceoperationspageobjects.getAutopopulatedfieldsinmessagequeuetab("Device Name").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.messagequeueautopopulatedfields("Count :").isDisplayed());
		
		Assert.assertTrue(driver.findElement(By.xpath("(//div[contains(@id,'messageQueueForm:messageQueueData')])[1]")).isDisplayed());
		
		List<WebElement> columns = driver.findElements(deviceoperationspageobjects.getMessagequeuetablecolumns());
	 
		for(WebElement ele:columns)
		 {
			 Assert.assertTrue(ele.isDisplayed());
			 
			 System.out.println(ele.getText());
		 }
		
		Assert.assertTrue(deviceoperationspageobjects.getButtons("Clean Commands").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getButtonswithindex("Refresh", 2).isDisplayed());

		
		
		
		
	}
	

	@Then("^I validate the components & columns present in the message queue tab in tenant$")
	public void I_verify_the_components_in_message_queue_tab_in_tenant() throws InterruptedException
	{
		Thread.sleep(2000);		
		
		Assert.assertTrue(deviceoperationspageobjects.getAutopopulatedfieldsinmessagequeuetab("Device SN").isDisplayed());
				
		Assert.assertTrue(deviceoperationspageobjects.getAutopopulatedfieldsinmessagequeuetab("Device Name").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.messagequeueautopopulatedfields("Count :").isDisplayed());
		
		Assert.assertTrue(driver.findElement(By.xpath("(//div[contains(@id,'messageQueueForm:messageQueueData')])[1]")).isDisplayed());
		
		List<WebElement> columns = driver.findElements(deviceoperationspageobjects.getMessagequeuetablecolumns());
	 
		for(WebElement ele:columns)
		 {
			 Assert.assertTrue(ele.isDisplayed());
			 
			 System.out.println(ele.getText());
		 }
		
		Assert.assertTrue(deviceoperationspageobjects.getButtons("Clean Commands").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getButtonswithindex("Refresh", 3).isDisplayed());
		
		
		
		
	}
	
	@Then("^I click on clean commands button and validate the results$")
	public void I_click_on_clean_commands_button_and_validate_the_results() throws InterruptedException
	{
		
		util.click(deviceoperationspageobjects.getButtons("Clean Commands"));
		
		I_click_on_Yes_button();
		
		util.successmessage();
		
		deviceoperationspageobjects.getNorecordsfound(2).getText();
		
		if(deviceoperationspageobjects.getNorecordsfound(2).isDisplayed())
		{
			System.out.println("pending commands cleaned successfully");
		}
	}
	
	@Then("^I validate the paginations in message queue tab$")
	public void I_validate_the_page_navigation_to_message_queue_tab()
	{
		if(deviceoperationspageobjects.messagequeueautopopulatedfields("Pending Message in the Queue ").isDisplayed())
		{
			System.out.println("user navigat");
		}
		
	}
	
	@Then("^I enter devicesn into search field for cleaning pending messages in queue$")
	public void I_enter_devicesn_into_search_field_for_cleaning_pending_messages_in_queue() throws InterruptedException
	{
		util.sendtext(driver.findElement(deviceoperationspageobjects.getSearchtextfield()), "12345678901");
		//driver.findElement(deviceoperationspageobjects.getSearchtextfield()).sendKeys("CGP5201160105");
	}
	
	@Then("^I select the searched device$")
	public void I_select_the_searched_devices()
	{
		List<WebElement> ele = driver.findElements(deviceoperationspageobjects.getSearchresults());
		
		ele.get(1).click();
	}
	
	@Then("^I verify the sent command from device operation is displayed in device monitor live log$")
	public void I_verify_the_sent_command_from_device_operation_is_displayed_in_device_monitor_live_log()
	{
		List<WebElement> value = driver.findElements(deviceoperationspageobjects.getDevicelivelogtable());
		
		for(WebElement ele:value)
		{
			
		if(ele.getText().contains("Data set successfully"))
					{
						System.out.println("sent command is displayed in device monitor");
					}
		}
		
		
	}
	
	@Then("^I click on Device Visualization tab$")
	public void I_click_on_Device_visualization_tab()
	{
		
		util.click(hostHusersPageObjects.getTabs("Device Visualization"));
	}
	
	@Then("^I validate the user navigation to device visualization page$")
	public void I_validate_the_user_navigation_to_device_visualization_page()
	{
	if((deviceoperationspageobjects.getButtons("Heart Beat Visualization").isDisplayed()))
	{
		System.out.println("user navigated successfully to device visualization tab");
	}
	}
	
	@Then("^I validate the components present in device visualization tab$")
	public void I_validate_the_components_present_in_device_visualization_tab()
	{
	
		Assert.assertTrue(deviceoperationspageobjects.getButtons("Heart Beat Visualization").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getButtons("Attendance Log Visualization").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getButtons("Device Command Visualization").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getButtons("Initial Push Visualization").isDisplayed());
		
		
	}
	
	@Then("I validate the components in device heart beat visualization popups")
	public void I_validate_the_components_in_device_heart_beat_visualization_popups()
	{
		Assert.assertTrue(deviceoperationspageobjects.datefields("fromDate_input").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.datefields("toDate_input").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getButtons("Go").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getCloseicon(6).isDisplayed());
		
		
		
	}
	@Then("I validate the components in device att log visualization popups")
	public void I_validate_the_components_in_device_att_log_visualization_popups()
	{
		Assert.assertTrue(deviceoperationspageobjects.datefields("fromDateAttLog_input").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.datefields("toDateAttLog_input").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getButtons("Go").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getCloseicon(6).isDisplayed());
		
		
	}
	
	@Then("I validate the components in device command visualization popups")
	public void I_validate_the_components_in_device_command_visualization_popups()
	{
		Assert.assertTrue(deviceoperationspageobjects.datefields("fromDateDeviceCommand_input").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.datefields("toDateDeviceCommand_input").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getButtons("Go").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getCloseicon(6).isDisplayed());

		
	}
	
	@Then("I validate the components in device intial visualization popups")
	public void I_validate_the_components_in_device_intial_visualization_popups()
	{
		Assert.assertTrue(deviceoperationspageobjects.datefields("fromDateInitialPush_input").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.datefields("toDateInitialPush_input").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getButtons("Go").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getCloseicon(6).isDisplayed());

		
	}
	
	
	
	@Then("^I click on heart beat visualization button$")
	public void I_click_on_heart_beat_visualization_button()
	{
	
		util.click(deviceoperationspageobjects.getButtons("Heart Beat Visualization"));
	
	}
	
	@Then("^I click on attendance log visualization button$")
	public void I_click_on_Attendance_Log_visualization_button()
	{
	
		util.click(deviceoperationspageobjects.getButtons("Attendance Log Visualization"));
	
	}
	
	@Then("^I click on device command visualization button$")
	public void I_click_on_device_command_visualization_button()
	{
	
		util.click(deviceoperationspageobjects.getButtons("Device Command Visualization"));
	
	}
	
	@Then("^I click on intial push visualization button$")
	public void I_click_on_intial_push_visualization_button()
	{
	
		util.click(deviceoperationspageobjects.getButtons("Initial Push Visualization"));
	
	}
	
	@And("^I click on Device Exception and Audit sub module$")
	public void I_click_on_Device_Exception_and_Audit_sub_module()
	{
		
		util.clickonsubmodules("Device Exception & Audit");
		
		wait.until(ExpectedConditions.titleIs("Device Exception & Audit | ZK Data Collection services"));
		
	}
	
	@Then("^I validate user navigation to device exception and audit page$")
	public void I_validate_user_navigation_to_device_exception_and_audit_page()
	{
		System.out.println(driver.getTitle());
		
		String Actual = driver.getTitle();
		
		Assert.assertEquals(Actual,property.getProperty("deviceaudit"));
	}
	
	@Then("^I validate the components in device exception tab$")
	public void I_validate_the_components_in_device_exception_tab()
	{
		Assert.assertTrue(deviceoperationspageobjects.datefieldswithindex("from_input", 1).isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.datefieldswithindex("to_input", 1).isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.datefieldswithindex("tenant", 1).isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getexportbuttons("CSV").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getexportbuttons("PDF").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getexportbuttons("Excel").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getButtons("Search").isDisplayed());
		
		
		
	}

	@Then("^I validate the table columns and table$")
	public void I_validate_the_table_columns_and_table()
	{
		Assert.assertTrue(driver.findElement(deviceoperationspageobjects.getDevicexceptionandaudittable()).isDisplayed());
		
		List<WebElement> columns = driver.findElements(deviceoperationspageobjects.getDevicexceptionandaudittablecolumns());
		
		for(WebElement ele:columns)
		{
			Assert.assertTrue(ele.isDisplayed());
			
			System.out.println(ele.getText());
			
		}
		
	}
	
	@Then("^I enter all the details for searching in deviceexception tab$")
	public void I_enter_all_the_details_for_searching() throws InterruptedException, AWTException
	{
		deviceoperationspageobjects.datefieldswithindex("from_input", 1).click();
		
		List<WebElement> calendar = driver.findElements(deviceoperationspageobjects.getCalendardates());
		
		for(int i=0;i<calendar.size(); i++)
		{
			
			
			String date = calendar.get(i).getText();
			
			if(date.equals("15"))
			{
				calendar.get(i).click();;
				
				break;
				
			}
		}
		
		deviceoperationspageobjects.datefieldswithindex("to_input", 1).click();
		
		
		deviceoperationspageobjects.getindividualdate(property.getProperty("date")).click();
		
	
		WebElement scroll = deviceoperationspageobjects.gettimescrollelement(1);
		
		driver.findElement(deviceoperationspageobjects.getHourslider()).click();
		
		for(int i=0;i<=12;i++)
		{
			scroll.sendKeys(Keys.ARROW_RIGHT);
	
		}
	
		driver.findElement(deviceoperationspageobjects.getMinslider()).click();
		
		for(int i=0;i<=12;i++)
		{
			
		Robot r = new Robot();
			
			r.keyPress(KeyEvent.VK_END);
			
			r.keyRelease(KeyEvent.VK_END);
			
	
		}
		
		deviceoperationspageobjects.datefieldswithindex("tenant", 1).sendKeys("ZKTK");
		
	}
	
	@Then("I enter the date manually without using calendar")
	public void I_enter_the_date_manually_without_using_calendar()
	{
		
		deviceoperationspageobjects.datefieldswithindex("from_input", 1).sendKeys(property.getProperty("fromdate"));
		
		deviceoperationspageobjects.datefieldswithindex("to_input", 1).sendKeys(property.getProperty("todate"));
		
	}
	
	
	@Then("^I click on Search button$")
	public void I_click_on_Search_button() throws InterruptedException
	{
		if(deviceoperationspageobjects.getButtons("Search").isDisplayed())
		{
		util.click(deviceoperationspageobjects.getButtons("Search"));
		}
		
		else
		{
			util.click(deviceoperationspageobjects.getButtonswithindex("Search",2));
		}
		
		Thread.sleep(2000);
		
	}
	
	@Then("^I click on Export as CSV button$")
	public void Then_I_click_on_Export_as_CSV_button()
	{
		if(deviceoperationspageobjects.getexportbuttons("CSV").isDisplayed()) {
		util.click(deviceoperationspageobjects.getexportbuttons("CSV"));
		}
		
		else{
			
			util.click(deviceoperationspageobjects.getexportbuttonsindex("CSV", 2));
		}
		
		

		
		
	}
	
	@Then("^I click on Export as Excel button$")
	public void Then_I_click_on_Export_as_Excel_button()
	{
		if(deviceoperationspageobjects.getexportbuttons("Excel").isDisplayed()) {
			util.click(deviceoperationspageobjects.getexportbuttons("Excel"));
			}
			
			else{
				
				util.click(deviceoperationspageobjects.getexportbuttonsindex("Excel", 2));
			}
		
	}
	
	@Then("^I click on Export as PDF button$")
	public void Then_I_click_on_Export_as_PDF_button()
	{
		if(deviceoperationspageobjects.getexportbuttons("PDF").isDisplayed()) {
			util.click(deviceoperationspageobjects.getexportbuttons("PDF"));
			}
			
			else{
				
				util.click(deviceoperationspageobjects.getexportbuttonsindex("PDF", 2));
			}
		
		
		
	}
	
	@Then("^I validate the downloaded file for csv$")
	public void I_validate_the_downloaded_file_csv()
	{
		
				
		util.validatedownloadedfile(property.getProperty("csvfilename"),property.getProperty("path"));
				
		
		
	}
	@Then("^I validate the downloaded file for pdf$")
	public void I_validate_the_downloaded_the_file_pdf()
	{
		
		util.validatedownloadedfile(property.getProperty("pdffilename"),property.getProperty("path"));
	}
	
	@Then("^I validate the downloaded file for excel$")
	public void I_validate_the_downloaded_the_file_csv()
	{
		
		util.validatedownloadedfile(property.getProperty("excelfilename"),property.getProperty("path"));
	}
	
	@Then("^I click on Device Audit tab$")
	public void I_click_on_Device_Audit_tab()
	{
		
		util.click(hostHusersPageObjects.getTabs("Device Audit"));
	}
	
	@Then("^I validate the components in device audit tab$")
	public void I_validate_the_components_in_device_audit_tab()
	{
		
		Assert.assertTrue(deviceoperationspageobjects.datefieldswithindex("from_input", 2).isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.datefieldswithindex("to_input", 2).isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.datefieldswithindex("deviceSn", 1).isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getexportbuttonsindex("CSV",2).isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getexportbuttonsindex("PDF",2).isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getexportbuttonsindex("Excel",2).isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getButtonswithindex("Search",2).isDisplayed());	
		
	}
	
	@Then("^I enter all the details for searching in deviceaudit tab$")
	public void I_enter_all_the_details_for_searching_in_deviceaudit_tab() throws InterruptedException, AWTException
	{
		deviceoperationspageobjects.datefieldswithindex("from_input", 2).click();
		
		List<WebElement> calendar = driver.findElements(deviceoperationspageobjects.getCalendardates());
		
		for(int i=0;i<calendar.size(); i++)
		{
			
			
			String date = calendar.get(i).getText();
			
			if(date.equals("15"))
			{
				calendar.get(i).click();;
				
				break;
				
			}
		}
		
		deviceoperationspageobjects.datefieldswithindex("to_input", 2).click();
		
		
		deviceoperationspageobjects.getindividualdate(property.getProperty("date")).click();
		
	
		WebElement scroll = deviceoperationspageobjects.gettimescrollelement(1);
		
		driver.findElement(deviceoperationspageobjects.getHourslider()).click();
		
		for(int i=0;i<=12;i++)
		{
			scroll.sendKeys(Keys.ARROW_RIGHT);
	
		}
	
		driver.findElement(deviceoperationspageobjects.getMinslider()).click();
		
		for(int i=0;i<=12;i++)
		{
			
		Robot r = new Robot();
			
			r.keyPress(KeyEvent.VK_END);
			
			r.keyRelease(KeyEvent.VK_END);
			
	
		}
		
		deviceoperationspageobjects.datefieldswithindex("deviceSn", 1).sendKeys("CGP5201160105");
		
	
		
	}
	
	@Then("^I validate the search results in deviceaudittable$")
	public void I_validate_the_search_results_in_deviceaudittable() throws InterruptedException
	{
	
		//System.out.println(driver.findElement(deviceoperationspageobjects.getDeviceaudittable()).getText());
		
		List<WebElement> data = driver.findElements(deviceoperationspageobjects.getDeviceaudittabledata());
		
		for(int i=0;i<data.size();i++)
		{
			
			if(data.get(i).getText().contains("CGP5201160105"))
			{
				
				System.out.println("audit ed as per the search results");
				
				break;
			}
			
			
		}
	}
	
	@Then("^I validate the downloaded file for csv in deviceaudit page$")
	public void I_validate_the_downloaded_file_csv_in_deviceaudit_page()
	{
		
		util.validatedownloadedfile(property.getProperty("deviceauditcsv"),property.getProperty("path"));
	}
	@Then("^I validate the downloaded file for pdf in deviceaudit page$")
	public void I_validate_the_downloaded_the_file_pdf_in_deviceaudit_page()
	{
		
		util.validatedownloadedfile(property.getProperty("deviceauditpdf"),property.getProperty("path"));
	}
	
	@Then("^I validate the downloaded file for excel in deviceaudit page$")
	public void I_validate_the_downloaded_the_file_csv_in_deviceaudit_page()
	{
		
		util.validatedownloadedfile(property.getProperty("deviceauditexcel"),property.getProperty("path"));
	}
	
	@Then("^I validate the search results in deviceaudittable after performing any operation$")
	public void I_validate_the_search_results_in_deviceaudittable_after_performing_any_operation() throws InterruptedException
	{
	
		//System.out.println(driver.findElement(deviceoperationspageobjects.getDeviceaudittable()).getText());
		
		List<WebElement> data = driver.findElements(deviceoperationspageobjects.getDeviceaudittabledata());
		
		for(int i=0;i<data.size();i++)
		{
			
			if(data.get(i).getText().contains("moved"))
			{
				
				System.out.println("audit ed as per the search results and as per the operation performed");
				
				break;
			}
			
			
		}
	}
	
	@And("^I click on Device Report sub module$")
	public void I_click_on_Device_Report_sub_module()
	{
		
		util.clickonsubmodules("Device Report");
		
		wait.until(ExpectedConditions.titleIs("Device Report | ZK Data Collection services"));
		
	}
	
	@And("^I click on Device Report in supertenant module$")
	public void I_click_on_Device_Report_in_supertenant_module()
	{
		
		util.clickonsubmodules("Devices");
		
		wait.until(ExpectedConditions.titleIs("Devices | ZK Data Collection services"));
		
	}
	
	@Then("^I validate user navigation to device report page$")
	public void I_validate_user_navigation_to_device_report_page()
	{
		System.out.println(driver.getTitle());
		
		String Actual = driver.getTitle();
		
		Assert.assertEquals(Actual,property.getProperty("devicereport"));
	}
	
	@Then("^I validate user navigation to device report supertenant page$")
	public void I_validate_user_navigation_to_device_report_supertenant_page()
	{
		System.out.println(driver.getTitle());
		
		String Actual = driver.getTitle();
		
		Assert.assertEquals(Actual,property.getProperty("supertenantreport"));
	}
	
	@Then("^I validate the sections present in the device report page$")
	public void I_validate_the_sections_present_in_the_device_report_page()
	{
		
		Assert.assertTrue(deviceoperationspageobjects.getSections("Device Reports").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getSections("Device Report").isDisplayed());
		
		Assert.assertTrue(driver.findElement(deviceoperationspageobjects.getDeviceListSection()).isDisplayed());
		
		Assert.assertTrue(driver.findElement(deviceoperationspageobjects.getDeviceRemoteOperationAdvancedsection()).isDisplayed());
		
	}
	
	@Then("^I validate the components in device reports page section$")
	public void I_validate_the_components_in_device_report_page()
	{
		
		//Assert.assertTrue(deviceoperationspageobjects.getdropdownfield("clients_label").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getinputtextfields("deviceSnOrName").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getinputtextfields("deviceGroup").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getdropdownfield("platform_label").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getinputtextfields("employeeGroup").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getinputtextfields("location").isDisplayed());
		
		List<WebElement> checkboxes = driver.findElements(deviceoperationspageobjects.getDevicestatuscheckboxes());
		
		for(WebElement ele:checkboxes)
		{
			Assert.assertTrue(ele.isDisplayed());
			
		}
		
		Assert.assertTrue(deviceoperationspageobjects.getButtons("Submit").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getButtons("Reset").isDisplayed());	
		
	}
	
	@Then("^I validate the components in device report page section$")
	public void I_validate_the_components_in_device_report_page_section()
	{
		
		
		Assert.assertTrue(deviceoperationspageobjects.getButtonswithindex("Export as CSV",1).isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getexportbuttonsreports("PDF").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getButtonswithindex("Export as Excel",1).isDisplayed());
		
	}
	
	@Then("^I validate the table columns$")
	public void I_validate_the_table_columns() throws InterruptedException, AWTException
	{
		
		
		
		List<WebElement> checkboxes = driver.findElements(deviceoperationspageobjects.getDevicestatuscheckboxes());
		
		util.minimize();
		
		Thread.sleep(2000);
		
		for(WebElement ele1:checkboxes)
		{
			actions.moveToElement(ele1).click().build().perform();
			
		}
		
		Thread.sleep(2000);
		driver.findElement(By.xpath("//div[@class='ui-datatable-tablewrapper']")).click();
		
		deviceoperationspageobjects.gettabledata();
		
		
	}
	
	@Then("^I filter the data by client$")
	public void I__the_data_by_client() throws InterruptedException
	{
		
		util.click(deviceoperationspageobjects.getdropdownfield("clients_label"));
		
		List<WebElement> value = driver.findElements(deviceoperationspageobjects.getGenericdropdownvalues());
		
		for(int i=0;i<value.size();i++)
		{
			
			String option = value.get(i).getText();
			
			if(option.equals("ZKTeco"))
			{
				
				util.click(value.get(i));
				break;
			}
		}
		
		driver.navigate().refresh();
		
		
		
	}
	
	@Then("^I filter the data by client in supertenant$")
	public void I__the_data_by_client_in_supertenant() throws InterruptedException
	{
		
		util.click(supertenantpageobjects.getcustomerDropdown());
		
		List<WebElement> value = supertenantpageobjects.getdevicereportDropdownOptions();
		
		for(int i=0;i<value.size();i++)
		{
			
			String option = value.get(i).getText();
			
			if(option.equals(property.getProperty("customer")))
			{
				
				util.click(value.get(i));
				break;
			}
		}
		
		driver.navigate().refresh();
		
		
		
	}
	
	@Then("^I validate the search results in reports$")
	public void I_validate_the_search_results_in_reports()
	{
		
		List<WebElement> value = driver.findElements(deviceoperationspageobjects.getGenericcellvalue());
		
		for(int i=0;i<value.size();i++)
		{
			
			Assert.assertTrue(value.get(i).isDisplayed());
			
		}
		
		
		
		
	}
	
	@Then("^I validate the search results in reports based on customer name$")
	public void I_validate_the_search_results_in_reports_based_on_customer_name() throws InterruptedException
	{
		
		List<WebElement> value = deviceoperationspageobjects.getGenericcellvalue3();
		
		for(int i=0;i<value.size();i++)
		{
			Thread.sleep(300);
			if(value.get(i).getText().equals(property.getProperty("customer")))
			{
				logger.info("filter successfull");
				break;
			}
			
		}
		
		
		
		
	}
	
	@Then("^I validate the search results in reports for device sn$")
	public void I_validate_the_search_results_in_reports_for_devicesn() throws InterruptedException
	{
		Thread.sleep(2000);
		
		List<WebElement> value = driver.findElements(deviceoperationspageobjects.getGenericcellvalue());
		
		
		for(int i=0;i<value.size();i++)
		{
			
			
			if(value.get(i).getText().equals(devicesn))
			{
					ExtentCucumberAdapter.addTestStepLog("successful through device sn");
					
					System.out.println("successful through device sn");
					
					break;
			}
			
			
			
		}
			
	}
	
	@Then("^I validate the search results in reports for device name$")
	public void I_validate_the_search_results_in_reports_for_device_name() throws InterruptedException
	{
		Thread.sleep(2000);
		
		List<WebElement> value = driver.findElements(deviceoperationspageobjects.getGenericcellvalue());
		
		
		for(int i=0;i<value.size();i++)
		{
			
			
			if(value.get(i).getText().equals(devicename))
			{
					//ExtentCucumberAdapter.addTestStepLog("successful through device sn");
					
					System.out.println("successful through device name");
					
					break;
			}
			
		}
		
	}
			

	@Then("^I validate the search results in reports for location$")
	public void I_validate_the_search_results_in_reports_for_location() throws InterruptedException
	{
		Thread.sleep(2000);
		
		List<WebElement> value = driver.findElements(deviceoperationspageobjects.getGenericcellvalue());
		
		
		for(int i=0;i<value.size();i++)
		{
			
			
			if(value.get(i).getText().equals(property.getProperty("locationid")))
			{
					ExtentCucumberAdapter.addTestStepLog("successful through device sn");
					
					System.out.println("successful through device location");
					
					break;
			}
			
		}
			
	}
	
	@Then("^I validate the search results in reports for devicegroup$")
	public void I_validate_the_search_results_in_reports_for_devicegroup() throws InterruptedException
	{
		Thread.sleep(2000);
		
		List<WebElement> value = driver.findElements(deviceoperationspageobjects.getGenericcellvalue());
		
		
		for(int i=0;i<value.size();i++)
		{
			
			
			if(value.get(i).getText().equals(property.getProperty("devicegroup")))
			{
					ExtentCucumberAdapter.addTestStepLog("successful through device sn");
					
					System.out.println("successful through device group");
					
					break;
			}
			
		}
			
	}
	
	@Then("^I validate the search results in reports for platform$")
	public void I_validate_the_search_results_in_reports_for_platform() throws InterruptedException
	{
		Thread.sleep(2000);
		
		List<WebElement> value = driver.findElements(deviceoperationspageobjects.getGenericcellvalue());
		
		
		for(int i=0;i<value.size();i++)
		{
			
			
			if(value.get(i).getText().equals(property.getProperty("deviceplatform")))
			{
					ExtentCucumberAdapter.addTestStepLog("successful through device sn");
					
					System.out.println("successful through device platform");
					
					break;
			}
			
		}
			
	}
	
	
	
	
	@Then("I enter devicesn for filtering in reports")
	public void I_enter_devicesn_or_name_for_ing_in_reports() 
	{
		
		util.sendtext(deviceoperationspageobjects.getinputtextfields("deviceSnOrName"),devicesn);
		
	}
	
	@Then("I enter devicename for filtering in reports")
	public void I_enter_devicename_for_ing_in_reports() 
	{
		util.sendtext(deviceoperationspageobjects.getinputtextfields("deviceSnOrName"),devicename);
		
	}
	
	@Then("I enter location for filtering in reports")
	public void I_enter_location_for_ing_in_reports() throws InterruptedException 
	{
		Thread.sleep(3000);
		util.sendtext(deviceoperationspageobjects.getinputtextfields("location"),property.getProperty("locationid"));
		
	}
	
	@Then("I enter group name for filtering in reports")
	public void I_enter_group_name_for_ing_in_reports() throws InterruptedException 
	{
		Thread.sleep(2000);
		util.sendtext(deviceoperationspageobjects.getinputtextfields("location"),property.getProperty("devicegroup"));
		
	}
	
	@Then("^I enter device platform$")
	public void I_enter_device_platform_for_ing() throws InterruptedException, AWTException
	{
		
		Thread.sleep(3000);
		
		util.click(deviceoperationspageobjects.getdropdownfield("platform_label"));
		
		Thread.sleep(2000);
		
		List<WebElement> platformvalues = driver.findElements(deviceoperationspageobjects.getPlatformdropdown());
		
		for(WebElement ele:platformvalues)
		{
			if(ele.getText().equals("ANDROID"))
			{
				util.click(ele);
				
			}
			
		}
		
	}
	
	@Then("I enter employeegroup for ing")
	public void I_enter_employeegroup_for_ing() 
	{
		
		util.sendtext(deviceoperationspageobjects.getinputtextfields("employeeGroup"),property.getProperty("empgroup"));
		
	}
	
	@Then("^I validate the search results in reports for employeegroup$")
	public void I_validate_the_search_results_in_reports_for_employeegroup() throws InterruptedException
	{
		Thread.sleep(2000);
		
		List<WebElement> value = driver.findElements(deviceoperationspageobjects.getGenericcellvalue());
		
		
		for(int i=0;i<value.size();i++)
		{
			
			
			if(value.get(i).getText().equals(property.getProperty("deviceplatform")))
			{
					ExtentCucumberAdapter.addTestStepLog("successful through device sn");
					
					System.out.println("successful through employee group");
					
					break;
			}
			
		}
			
	}
	
	@Then("^I validate the search results for device status$")
	public void I_validate_the_search_results_for_device_status() throws InterruptedException
	{
		Thread.sleep(2000);
		
		List<WebElement> value = driver.findElements(deviceoperationspageobjects.getGenericcellvalue());
		
		
		for(int i=0;i<value.size();i++)
		{
			
			
			if(value.get(i).getText().equals("ONLINE"))
			{
					ExtentCucumberAdapter.addTestStepLog("successful through device sn");
					
					System.out.println("online device successful");
					
					break;
			}
			
			else if(value.get(i).getText().equals("OFFLINE"))
			{
				System.out.println("offline device successful");
				
				break;
			}
			
			else if(value.get(i).getText().equals("PENDING"))
			{
				System.out.println("pending device successful");
				
				break;
			}
			
			else if(value.get(i).getText().equals("DELETED"))
			{
				System.out.println("deleted device successful");
				
				break;
			}
			else if(value.get(i).getText().equals("MB"))
			{
				System.out.println("storage details successful");
				
				break;
			}
			else if(value.get(i).getText().equals("Ver"))
			{
				System.out.println("network details successful");
				
				break;
			}
			else if(value.get(i).getText().equals("Yes")|| value.get(i).getText().equals("No"))
			{
				System.out.println("hardware details successful");
				
				break;
			}
			
			
		}
			
	}
	
	@Then("^I click on pending status check box in reports$")
	public void I_click_on_pending_status_check_box_in_report()
	{
		List<WebElement> status = driver.findElements(deviceoperationspageobjects.getDevicestatuscheckboxes());
		
		util.click(status.get(2));		
		
	}
	
	@Then("^I click on offline status check box in reports$")
	public void I_click_on_offline_status_check_box_in_report()
	{
		List<WebElement> status = driver.findElements(deviceoperationspageobjects.getDevicestatuscheckboxes());
		
		util.click(status.get(1));		
		
	}
	
	@Then("^I click on storage status check box$")
	public void I_click_on_storage_status_check_box()
	{
		List<WebElement> status = driver.findElements(deviceoperationspageobjects.getDevicestatuscheckboxes());
		
		util.click(status.get(4));		
		
	}
	
	@Then("^I click on network status check box$")
	public void I_click_on_network_status_check_box()
	{
		List<WebElement> status = driver.findElements(deviceoperationspageobjects.getDevicestatuscheckboxes());
		
		util.click(status.get(5));		
		
	}
	@Then("^I click on hardware status check box$")
	public void I_click_on_hardware_status_check_box()
	{
		List<WebElement> status = driver.findElements(deviceoperationspageobjects.getDevicestatuscheckboxes());
		
		util.click(status.get(6));		
		
	}
	
	@Then("^I validate the storage filter$")
	public void I_validate_the_storage_() throws InterruptedException
	{

		Thread.sleep(2000);
	
		List<WebElement> value = driver.findElements(deviceoperationspageobjects.getGenericcellvalue());
		
			
			for(int i=0;i<value.size();i++)
				{
					
					//System.out.println(value.get(i).getText());
					
					if(value.get(i).getText().equals("MB"))
					{
					ExtentCucumberAdapter.addTestStepLog("successful through device sn");
					
					System.out.println("storage successful");
					
					break;
					}
			
			}
		}
	
	@Then("^I validate the network filter$")
	public void I_validate_the_network_() throws InterruptedException
	{

		Thread.sleep(2000);
	
		List<WebElement> value = driver.findElements(deviceoperationspageobjects.getGenericcellvalue());
		
			
			for(int i=0;i<value.size();i++)
				{
					
					//System.out.println(value.get(i).getText());
					
					if(value.get(i).getText().contains("Ver"))
					{
					ExtentCucumberAdapter.addTestStepLog("successful through device sn");
					
					System.out.println("network successful");
					
					break;
					}
			
			}
		}
	
	
	@Then("^I validate the hardware filter$")
	public void I_validate_the_hardware_() throws InterruptedException
	{

		Thread.sleep(2000);
	
		List<WebElement> value = driver.findElements(deviceoperationspageobjects.getGenericcellvalue());
		
			
			for(int i=0;i<value.size();i++)
				{
					
					//System.out.println(value.get(i).getText());
					
					if(value.get(i).getText().equals("Yes")|| value.get(i).getText().equals("No"))
					{
					ExtentCucumberAdapter.addTestStepLog("successful through device sn");
					
					System.out.println("hardware successful");
					
					break;
					}
			
			}
		}
	
	@Then("^I enter all filters in report$")
	public void I_enter_all_s_in_report() throws InterruptedException, AWTException
	{
		
		
		
		List<WebElement> checkboxes = driver.findElements(deviceoperationspageobjects.getDevicestatuscheckboxes());
		
		util.minimize();
		
		Thread.sleep(2000);
		
		for(WebElement ele1:checkboxes)
		{
			actions.moveToElement(ele1).click().build().perform();
			
		}
		
		I_enter_device_platform_for_ing();
		
		I_enter_location_for_ing_in_reports();
		
		I_enter_devicename_for_ing_in_reports();
		
		
		
		
	}
	
	@Then("^I click on Reset button$")
	public void I_click_on_Reset_button()
	{
		
		util.click(deviceoperationspageobjects.getButtons("Reset"));
		
	}
		
	@Then("^I validate all the filter results in device report$")
	public void I_validate_all_the__results_in_device_report() throws InterruptedException
	{

		I_validate_the_search_results_in_reports_for_device_name();

		I_validate_the_search_results_in_reports_for_location();

		I_validate_the_search_results_in_reports_for_devicegroup();


		I_validate_the_search_results_in_reports_for_platform();


		I_validate_the_search_results_in_reports_for_employeegroup();

		I_validate_the_search_results_for_device_status();

		I_validate_the_storage_();

		I_validate_the_network_();

		I_validate_the_hardware_();
		
	}
	
	@Then("^I validate the downloaded file for csv in device report$")
	public void I_validate_the_downloaded_file_csv_in_device_report()
	{
		
				
		util.validatedownloadedfile(property.getProperty("devicereportcsv"),property.getProperty("path"));
				
		
		
	}
	@Then("^I validate the downloaded file for pdf in device report$")
	public void I_validate_the_downloaded_the_file_pdf_in_device_report()
	{
		
		util.validatedownloadedfile(property.getProperty("devicereportpdf"),property.getProperty("path"));
	}
	
	@Then("^I validate the downloaded file for excel in device report$")
	public void I_validate_the_downloaded_the_file_csv_in_device_report()
	{
		
		
		util.validatedownloadedfile(property.getProperty("devicereportexcel"),property.getProperty("path"));
	}
	
	
	@Then("^I click on export as csv button in device report$")
	public void I_click_on_export_as_csv_button_in_device_reports() throws InterruptedException
	{

			
			util.click(deviceoperationspageobjects.getButtonswithindex("Export as CSV",1));
			
			Thread.sleep(2000);
	
		
	}
	
	@Then("^I click on export as pdf button in device report$")
	public void I_click_on_export_as_pdf_button_in_device_reports()
	{

			
			util.click(deviceoperationspageobjects.getexportbuttonsreports("PDF"));
			
	}
	
	@Then("^I click on export as excel button in device report$")
	public void I_click_on_export_as_excel_button_in_device_reports() throws InterruptedException
	{
			
			util.click(deviceoperationspageobjects.getButtonswithindex("Export as Excel",1));
			
			Thread.sleep(2000);

	}
	
	@Then("^I enter invalid data in filters in report$")
	public void I_enter_invaliddata_in_reports() throws InterruptedException, AWTException
	{
		
		util.sendtext(deviceoperationspageobjects.getinputtextfields("deviceSnOrName"),"123");
		
		
	
	}
	
	@Then("^I validate invalid filter results$")
	public void I_validate_invalid__results()
	{
		deviceoperationspageobjects.getNorecordsfound(1).getText();
		
		if(deviceoperationspageobjects.getNorecordsfound(1).isDisplayed())
		{
			System.out.println("user not able to filter through invalid details");
		}
	}
	
	//Device Info
	
	 @Then("^I verify the Device operation & Audit module is displayed$")
     public void verify_the_device_operation_audit_module() throws Throwable
	 {
		 Assert.assertTrue(driver.findElement(deviceoperationspageobjects.getDeviceOperationsAndAudit()).isDisplayed());
  	
	 }
	 
	 @Then("^verify the all sub modules in the Device operation &Audit module is present$")
     public void verify_the_all_sub_modules_in_the_device_operation_audit_module_is_present() throws Throwable 
	 {
 	   
 	   List<WebElement> submodules = driver.findElements(deviceoperationspageobjects.getDeviceoperationandauditsubmodules());
 	   
 	   for(WebElement ele:submodules)
 	   {
 		   Assert.assertTrue(ele.isDisplayed());
 		   
 	   }
 	   	   
  }
	 
	 @And("^I click on Device Info sub module$")
		public void I_click_on_Device_info_sub_module()
		{
		 	
		 	
			util.clickonsubmodules("Device Info");
			
			wait.until(ExpectedConditions.titleIs("Device Info | ZK Data Collection services"));
			
		}
	 
	 @Then("^I verify the page navigation to device info page$")
     public void I_validate_the_user_navigation_to_deviceinfo_page() throws Throwable 
	 {
		 System.out.println(driver.getTitle());
		 if (driver.getTitle().equals(property.getProperty("deviceinfo")))
			{
				
				Assert.assertEquals(driver.getTitle(), property.getProperty("deviceinfo"));
			}

	 }
	 
	 @Then("^I validate the sections present in the device info page$")
		public void I_validate_the_sections_present_in_the_device_info_page()
		{
			
			Assert.assertTrue(deviceoperationspageobjects.getSections("Device List").isDisplayed());
			
			Assert.assertTrue(deviceoperationspageobjects.getSections("Device Details Information").isDisplayed());
			
			Assert.assertTrue(driver.findElement(deviceoperationspageobjects.getDeviceListSection()).isDisplayed());
			
			Assert.assertTrue(driver.findElement(deviceoperationspageobjects.getDeviceRemoteOperationAdvancedsection()).isDisplayed());
			
			
		}
	 
	 @Then("^I verify all the tabs in the Device Details$")
     public void verify_all_the_tabs_in_the_device_details() throws Throwable 
	 {
  	  
		  List<WebElement> tabs = driver.findElements(deviceoperationspageobjects.getTabsindeviceinfo());
		  
		  ArrayList<String>l1=new ArrayList<String>();
		  
		  for(int i=0;i<tabs.size();i++)
		  {
			  Assert.assertTrue(tabs.get(i).isDisplayed());
			 
			  String txt = tabs.get(i).getText();
			  
			  l1.add(txt);
			  
			  Assert.assertEquals(tabs.get(i).getText(), l1.get(i)); 
			  
		  }
		  
	 }
	 
	 @Then("^I click on the Product Information tab$")
     public void click_on_the_product_information_tab() throws Throwable 
	 {
		 List<WebElement> tabs = driver.findElements(deviceoperationspageobjects.getTabsindeviceinfo());
		  
		 for(int i=0;i<tabs.size();i++)
		  {
			  
			 String txt = tabs.get(i).getText();
			  
			  if(txt.equals("Product Information"))
			  {
				  
				  util.click(tabs.get(i));
			  }
			  
			 
		  }

	 }
	 
	 @Then("^I verify all the fields in device info page$")
	 public void I_verify_all_the_fields_in_device_info_page()
	 {
		 
		 List<WebElement> fields = driver.findElements(deviceoperationspageobjects.getDeviceinfofields());
		 
		 
		 
		 for(WebElement ele:fields)
		 {
			 
			 Assert.assertTrue(ele.isDisplayed());
			 
			 System.out.println("    "+ele.getText());
		 }
		 
	 }
	 
	 @Then("^I verify whether the device details tabs are getting minimized in device info page$")
     public void I_verify_whether_the_device_details_tabs_are_getting_minimized_in_device_info_page() throws Throwable 
	 {
  	  
		  List<WebElement> tabs = driver.findElements(deviceoperationspageobjects.getTabsindeviceinfo());
		  
		
		  for(int j=0;j<tabs.size();j++)
		  {
			 
			 util.click(tabs.get(j));
			  
			 if(tabs.get(j).getAttribute("aria-expanded").equals("false"))
			  {
				  assert true;
				  
				 
				  
				  
			  }
			 
			 else {
				 
				 assert false;
				 
				 
			 }
			 
			 
		 }
		  
	 }
	 
	 @Then("^I verify whether the device details tabs are getting maximized in device info page$")
     public void I_verify_whether_the_device_details_tabs_are_getting_maximized_in_device_info_page() throws Throwable 
	 {
  	  
		  List<WebElement> tabs = driver.findElements(deviceoperationspageobjects.getTabsindeviceinfo());
		  
		
		  for(int j=0;j<tabs.size();j++)
		  {
			 
			 util.click(tabs.get(j));
			 
			 util.click(tabs.get(j));
			  
			 if(tabs.get(j).getAttribute("aria-expanded").equals("true"))
			  {
				  assert true;
				  
				  
			  }
			 else
			 {
				 assert false;
				 
				 
			 }
			 
			 
		 }
		  
	 }
	 
	 @Then("^I verify view options popup is displayed on click of view options button$")
	 public void I_verify_view_options_popup_is_displayed_on_click_of_view_options_button() throws InterruptedException
	 {
		 Thread.sleep(2000);
		 Assert.assertTrue(deviceoperationspageobjects.getpopup("Device Options").isDisplayed());
	 }
	 
	 @Then("^I click on view options button in device info page$")
	 public void I_click_on_view_options_button_in_device_info_page()
	 {
		 
		 util.click(deviceoperationspageobjects.getButtons("View Options"));
	 }
	 
	 @Then("^I click on View Bell Schedule button$")
	 public void I_click_on_View_Bell_Schedule_button() throws InterruptedException
	 {
		 
		 util.click(deviceoperationspageobjects.getButtons("View Bell Schedule"));
		 
		 Thread.sleep(2000);
	 }
	 
	 @Then("^I verify view bell schedule popup is displayed on click of view Bell Schedule button$")
	 public void I_verify_view_bell_schedule_popup_is_displayed_on_click_of_view_Bell_Schedule_button() throws InterruptedException
	 {
		 Thread.sleep(2000);
		 Assert.assertTrue(deviceoperationspageobjects.getpopup("Bell Schedule - ").isDisplayed());
	 }
	 
	 @Then("^I validate the columns in view bell schedule popup$")
	 public void I_validate_the_columns_in_view_bell_schedule_popup()
	 {
		List<WebElement> columns = driver.findElements(deviceoperationspageobjects.getViewBellSchedulecolumns());
		
		for(WebElement ele:columns)
		{
			
			Assert.assertTrue(ele.isDisplayed());
			
			System.out.println(ele.getText());
		}
		 
	 }
	 
	 @Then("^I click on Runtime monitor button in device info page$")
	 public void I_click_on_Runtime_monitor_button() throws InterruptedException
	 {
		 
		 util.click(deviceoperationspageobjects.getButtons("Runtime Monitor"));
		 
		 wait.until(ExpectedConditions.titleIs(property.getProperty("deviceMonitorTitle"))); 
		 
	 }
	 //Tenant
	 
	 @Given("^I Enter valid credentails in tenant login screen$")
	 public void I_Enter_valid_credentails_in_tenant_login_screen()
		{
			driver.findElement(cirrusDCSPageObjects.getUserName()).sendKeys(property.getProperty("TenantUsername"));
			driver.findElement(cirrusDCSPageObjects.getPassword()).sendKeys(property.getProperty("TenantPassword"));
		}
	 
	 
	 @Given("^I am in Tenant home page$")
	 public void I_am_in_Tenant_home_page() 
	 {
			
		 	I_Enter_valid_credentails_in_tenant_login_screen();
			
			I_Click_on_Login_button();
			
	}
	 
	 
	 
	 @Then("^I verify the device manager module and its submodules are present$")
	 public void I_verify_the_device_manager_module_and_its_submodules_are_present()
	 {
		 List<WebElement> submodules = tenantdevicemanagerpageobjects.getsubmodules("Device Manager");
		 
		 int count = submodules.size();
		 
		 
		 for(WebElement ele:submodules)
		 {
			 Assert.assertTrue(ele.isDisplayed());
			 
			 System.out.println(ele.getText());
			 
			 Assert.assertEquals(count, 10);
			 
			 
		 }
		 	
	 }
	 
	 
	 @When("^I perform mousehower on Device manager$")
		public void I_perform_mousehower_on_Device_manager()
		{
			util.mousehoweronmodules("Device Manager");
			
		}
	 
	 @And("^I click on Device Groups sub module$")
		public void I_click_on_Device_Group_sub_module() throws InterruptedException
		{
		 	util.clickonsubmodules("Device Groups");
		 	
		 	wait.until(ExpectedConditions.titleIs("Device Group | ZK Data Collection services"));
			
		}
	 
	 @Then("^I validate user navigation to device groups page$")
		public void I_validate_user_navigation_to_device_groups_page()
		{
			System.out.println(driver.getTitle());
			
			String Actual = driver.getTitle();
			
			Assert.assertEquals(Actual,property.getProperty("deviceGroupTitle"));
		}
	
	 @Then("^I validate the sections present in the device groups page$")
		public void I_validate_the_sections_present_in_the_device_groups_page()
		{
			
			Assert.assertTrue(deviceoperationspageobjects.getSections("Device Group List").isDisplayed());
			
			Assert.assertTrue(deviceoperationspageobjects.getSections("Device Group Information").isDisplayed());
			
			Assert.assertTrue(driver.findElement(deviceoperationspageobjects.getDeviceListSection()).isDisplayed());
			
			Assert.assertTrue(driver.findElement(deviceoperationspageobjects.getDeviceRemoteOperationAdvancedsection()).isDisplayed());
			
			
		}
	 
	 @Then("^I validate the components present in the Device Group List$")
		public void I_validate_the_components_present_in_the_device_group_list_section() throws InterruptedException
		{

			Thread.sleep(2000);
			
			Assert.assertTrue(driver.findElement(deviceoperationspageobjects.getDevicegroupsearchfield()).isDisplayed());
			
			Assert.assertTrue(driver.findElement(deviceoperationspageobjects.getDevicegroupsearchicon()).isDisplayed());
			
			Assert.assertTrue(driver.findElement(deviceoperationspageobjects.getDevicegroupcount()).isDisplayed());
			
			Assert.assertTrue(deviceoperationspageobjects.getButtons("New Group").isDisplayed());
			
			
		}
	 
	 @Then("^I validate the columns present in device group table$")
	 public void I_validate_the_columns_present_in_device_group_table() throws InterruptedException
	 {
		 Thread.sleep(1000);
		tenantdevicemanagerpageobjects.getDevicegrouptablecolumns();
	 }
	 
	 @Then("^I validate the tabs present in device group information section$")
	 public void I_validate_the_tabs_present_in_device_group_information_section()
	 {
		 Assert.assertTrue(hostHusersPageObjects.getTabs("Basic Info").isDisplayed());
		 
		 Assert.assertTrue(hostHusersPageObjects.getTabs("Device Subscription").isDisplayed());
		 
		 
	 }
	 
	 @Then("^I validate the components present in the Device Group basic info tab$")
	 public void I_validate_the_components_present_in_the_device_group_basic_info_tab() throws InterruptedException
		{

		 	wait.until(ExpectedConditions.visibilityOf(tenantdevicemanagerpageobjects.gettextfieldname("Group Code")));
		
			Assert.assertTrue(tenantdevicemanagerpageobjects.gettextfieldname("Group Code").isDisplayed());
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.gettextfieldname("Group Name").isDisplayed());
			
			wait.until(ExpectedConditions.visibilityOf(tenantdevicemanagerpageobjects.gettextfieldname("Description")));

			Assert.assertTrue(tenantdevicemanagerpageobjects.gettextfieldname("Description").isDisplayed());
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.gettextfieldname("Installed Location").isDisplayed());
			
			wait.until(ExpectedConditions.visibilityOf(tenantdevicemanagerpageobjects.gettextfieldname("Location")));
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.gettextfieldname("Location").isDisplayed());
			
			wait.until(ExpectedConditions.visibilityOf(tenantdevicemanagerpageobjects.gettextfieldname("Active")));
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.gettextfieldname("Active").isDisplayed());
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.gettextfieldname("Enable Sync").isDisplayed());
			
			
			Thread.sleep(2000);
			
			 tenantdevicemanagerpageobjects.getpopulateddata();
			 
			 Assert.assertTrue(deviceoperationspageobjects.getButtons("Save").isDisplayed());
			 
			 Assert.assertTrue(deviceoperationspageobjects.getButtons("Edit").isDisplayed());
			 
			 Assert.assertTrue(deviceoperationspageobjects.getButtons("Assign Device").isDisplayed());
			 
			List<WebElement> checkboxes = driver.findElements(tenantdevicemanagerpageobjects.getCheckboxes());
			
			for(WebElement ele:checkboxes)

			{
				Assert.assertTrue(ele.isDisplayed());
			}
			 
			
		}
	 
	 @Then("^I click on device subscription tab$")
		public void I_click_on_device_subscription_tab() throws InterruptedException
		{
		 Thread.sleep(2000);
		util.click(hostHusersPageObjects.getTabs("Device Subscription"));
			
		}
	 
	 @Then("^I verify the tables and columns present in the device subscription tab$")
	 public void I_verify_the_tables_present_in_the_device_subscription_tab()
	 {
		 Assert.assertTrue(tenantdevicemanagerpageobjects.getTemperatureeventtable(1).isDisplayed());
		 
		 Assert.assertTrue(tenantdevicemanagerpageobjects.getTemperatureeventtable(2).isDisplayed());
		 
		 List<WebElement> columns = tenantdevicemanagerpageobjects.getTemperatureeventtablecolumns(1);
		 
		 for(WebElement ele:columns)
		 {
			 
			 Assert.assertTrue(ele.isDisplayed());
			 
			 System.out.println(ele.getText());
		 }
		 
		 List<WebElement> columns1 = tenantdevicemanagerpageobjects.getTemperatureeventtablecolumns(2);
		 
		 for(WebElement ele:columns1)
		 {
			 
			 Assert.assertTrue(ele.isDisplayed());
			 
			 System.out.println(ele.getText());
		 }
		 
		 Assert.assertTrue(deviceoperationspageobjects.getButtons("Add subscription").isDisplayed());
	 }
	 
	@Then("^I enter all the details for creating device group$")
	public void I_enter_all_the_details_for_creating_device_group() throws InterruptedException
	{
		
//	util.sendtext(driver.findElement(tenantdevicemanagerpageobjects.getGroupCode()),GroupCode);
//	
//	util.sendtext(driver.findElement(tenantdevicemanagerpageobjects.getGroupName()),GroupName);
//	
//	Thread.sleep(1000);
//	
//	util.sendtext(tenantdevicemanagerpageobjects.gettextareafields(1),GroupDescrip);
//	
//	util.sendtext(tenantdevicemanagerpageobjects.gettextareafields(2),GroupInstalledLocation);
		
	util.sendtext(driver.findElement(tenantdevicemanagerpageobjects.getGroupCode()),util.randomAlphanumeric());
	
	groupcode = driver.findElement(tenantdevicemanagerpageobjects.getGroupCode()).getAttribute("value");
		
	util.sendtext(driver.findElement(tenantdevicemanagerpageobjects.getGroupName()),util.randomAlphabetic());
	
	groupname = driver.findElement(tenantdevicemanagerpageobjects.getGroupName()).getAttribute("value");
		
	Thread.sleep(1000);
		
	util.sendtext(tenantdevicemanagerpageobjects.gettextareafields(1),util.randomAlphabetic());
		
	util.sendtext(tenantdevicemanagerpageobjects.gettextareafields(2),util.randomAlphabetic());
	
	util.click(driver.findElement(tenantdevicemanagerpageobjects.getGroupLocation()));
	
	util.click(tenantdevicemanagerpageobjects.clickondropdownOption("Bangalore"));
	
	List<WebElement> checkboxes = driver.findElements(tenantdevicemanagerpageobjects.getCheckboxes());
	
	checkboxes.get(0).click();
		
		for(WebElement ele:checkboxes)

		{
			util.click(ele);
			
			
		}
		
		
		
	}
	
	@And("^I Click on save button$")
	public void I_Click_on_save_button()
	{
		util.click(deviceoperationspageobjects.getButtons("Save"));
	 
	}
	 
	@Then("^I validate the device group creation$")
	public void I_validate_the_device_group_creation() throws InterruptedException
	{
	
		List<WebElement> ele1 = driver.findElements(cirrusDCSPageObjects.getAllPaginationbtnone_By_One());
		
		for(int j=0;j<ele1.size();j++ )
		{
			Thread.sleep(2000);
			
			List<WebElement> cellvalues = driver.findElements(tenantdevicemanagerpageobjects.getDevicegroupcellvalues());
			
		
			for(WebElement ele:cellvalues)
			{
			
				String val = ele.getText();
			
				if(val.equals(groupcode)) 
				{
				
				Assert.assertEquals(val,groupcode);
				System.out.println("device group created successfully");
				break;
				
				
				}
				else if(val.equals(EditGroupCode))
				{
				
				
				Assert.assertEquals(val,EditGroupCode);
				System.out.println("device group edited successfully");
				break;
				
				}
				
			
				
			}
		
		js= (JavascriptExecutor)driver;
        
        js.executeScript("arguments[0].scrollIntoView(true);",driver.findElement(cirrusDCSPageObjects.getNormalnextbutton()));
		
		js=(JavascriptExecutor)driver;
		js.executeScript("arguments[0].click();",driver.findElement(cirrusDCSPageObjects.getNormalnextbutton()));
		Thread.sleep(2000);
	}
	}
	
	@And("^I Click on New group button$")
	public void I_Click_on_new_group_button() throws InterruptedException
	{
		util.click(deviceoperationspageobjects.getButtons("New Group"));
		
		Thread.sleep(2000);
	 
	}
	 
	@And("^I Click on cancel button$")
	public void I_Click_on_cancel_button()
	{
		util.click(deviceoperationspageobjects.getButtons("Cancel"));
	 
	}
	
	@Then("^I validate the device group creation on click of cancel$")
	public void I_validate_the_device_group_creation_on_click_of_cancel() throws InterruptedException
	{
	
		List<WebElement> ele1 = driver.findElements(cirrusDCSPageObjects.getAllPaginationbtnone_By_One());
		
		for(int j=0;j<ele1.size();j++ )
		{
			Thread.sleep(2000);
			
			List<WebElement> cellvalues = driver.findElements(tenantdevicemanagerpageobjects.getDevicegroupcellvalues());
			
		
			for(WebElement ele:cellvalues)
			{
			
				String val = ele.getText();
			
				if(val.equals(GroupCode)) 
				{
				
				Assert.assertEquals(val,GroupCode);
				System.out.println("device group created successfully");
				break;
				
				
				}
				else if(val.equals(EditUserLoginID))
				{
				
				
				Assert.assertEquals(val,EditUserLoginID);
				System.out.println("device group edited successfully");
				break;
				
				}
				
				else {
					
				//	System.out.println("device group not created");
					break;
				}
				
			
				
			}
		
		js= (JavascriptExecutor)driver;
        
        js.executeScript("arguments[0].scrollIntoView(true);",driver.findElement(cirrusDCSPageObjects.getNormalnextbutton()));
		
		js=(JavascriptExecutor)driver;
		js.executeScript("arguments[0].click();",driver.findElement(cirrusDCSPageObjects.getNormalnextbutton()));
		Thread.sleep(2000);
	}
	}
	
	@Then("^I enter device group code into search text field$")
	public void I_enter_device_group_code_into_search_text_field()
	{
		
		util.sendtext(driver.findElement(deviceoperationspageobjects.getDevicegroupsearchfield()),groupcode);
		
		
	}
	
	@Then("^I enter device group name into search text field$")
	public void I_enter_device_group_name_into_search_text_field()
	{
		
		driver.findElement(deviceoperationspageobjects.getDevicegroupsearchfield()).sendKeys(groupname);
		
		
	}
	@Then("^I click on device group search icon$")
	public void I_click_on_device_group_search_icon() throws InterruptedException
	{
		driver.findElement(deviceoperationspageobjects.getDevicegroupsearchicon()).click();
		Thread.sleep(1000);

	}
	
	@Then("^I validate the filter results for groupcode$")
	public void I_validate_the_filter_results() throws InterruptedException
	{
		List<WebElement> cellvalues = driver.findElements(tenantdevicemanagerpageobjects.getDevicegroupcellvalues());
		
		for(WebElement ele:cellvalues)
		{
			if(ele.getText().equals(groupcode))
			{
				Assert.assertEquals(groupcode,ele.getText());
				System.out.println(" successful with group code");
				break;
			}
			else {
				assert false;
			}
		}
		
	}
	
	@Then("^I validate the filter results for groupname$")
	public void I_validate_the_filter_results_for_group_name() throws InterruptedException
	{
		List<WebElement> cellvalues1 = driver.findElements(tenantdevicemanagerpageobjects.getDevicegroupcellvalues());
		
		ArrayList<String>l1=new ArrayList<String>();
		
		for(WebElement ele1:cellvalues1)
		{
			String val = ele1.getText();
			
			l1.add(val);
			
		}
		
		for(String a:l1)
		{
			if(a.equals(groupname))
				{
					Assert.assertEquals(groupname,a);
					System.out.println("filter successful with group name");
					break;
				}

		}
		
	}
	
	@Then("^I enter invalid device group code into search text field$")
	public void I_enter_invalid_device_group_code_into_search_text_field()
	{
		
		driver.findElement(deviceoperationspageobjects.getDevicegroupsearchfield()).sendKeys("133322");
		
		
	}
	
	@Then("^I validate the search results for invalid data$")
	public void I_validate_the_results_for_invalid_data()
	{
		System.out.println(deviceoperationspageobjects.getNorecordsfound(1).getText());
		
		Assert.assertTrue(deviceoperationspageobjects.getNorecordsfound(1).isDisplayed());
	}
	
	@Then("^I select the device group$")
	public void I_select_the_device_group()
	{
		
		List<WebElement> cellvalues = driver.findElements(tenantdevicemanagerpageobjects.getDevicegroupcellvalues());
		
		cellvalues.get(0).click();
	}
	
	@And("^I Click on Edit button$")
	public void I_Click_on_Edit_button()
	{
		util.click(deviceoperationspageobjects.getButtons("Edit"));
	 
	}
	
	@Then("^I edit all the details for creating device group$")
	public void I_edit_all_the_details_for_creating_device_group() throws InterruptedException
	{
		
	util.sendtext(driver.findElement(tenantdevicemanagerpageobjects.getGroupCode()),EditGroupCode);
	
	util.sendtext(driver.findElement(tenantdevicemanagerpageobjects.getGroupName()),EditGroupName);
	
	Thread.sleep(1000);
	
	util.sendtext(tenantdevicemanagerpageobjects.gettextareafields(1),EditGroupDescrip);
	
	util.sendtext(tenantdevicemanagerpageobjects.gettextareafields(2),EditGroupInstalledLocation);
	
	util.click(driver.findElement(tenantdevicemanagerpageobjects.getGroupLocation()));
	
	util.click(tenantdevicemanagerpageobjects.clickondropdownOption("Bangalore"));
	
	List<WebElement> checkboxes = driver.findElements(tenantdevicemanagerpageobjects.getCheckboxes());
	

		
		for(WebElement ele:checkboxes)

		{
			for(int i=0;i<2;i++)
			{
			util.click(ele);
			}
			
			
		}
		
		
	}
	
	@Then("I validate the device group reccords count")
	public void I_validate_the_device_group_reccords_count() throws InterruptedException
	{
		
		List<WebElement> records = tenantdevicemanagerpageobjects.getgrouprec();
		
		ArrayList<Integer>l1=new ArrayList<Integer>();
		
		List<WebElement> ele1 = cirrusDCSPageObjects.getallpage();
		
		for(int j=0;j<ele1.size();j++ )
		{
			
			if(ele1.get(j).getAttribute("class").contains("active")) 
			{
				for(int i=0;i<records.size();i++)
					{
						
						l1.add(i);
			
					}
			}
		js=(JavascriptExecutor)driver;
		js.executeScript("arguments[0].click();",driver.findElement(cirrusDCSPageObjects.getNormalnextbutton()));
		
	
		Thread.sleep(2000);
			
		}
		
		String count = driver.findElement(tenantdevicemanagerpageobjects.getDevicegroupcountfield()).getText();
		
		int count1 = Integer.parseInt(count);
		
		Assert.assertEquals(count1, l1.size());
		
		

	}

	
	@Then("^I click on deletion icon$")
	public void I_click_on_deletion_icon()
	{
		List<WebElement> delete = driver.findElements(tenantdevicemanagerpageobjects.getDeletionicon());
		
		List<WebElement> cellvalues1 = driver.findElements(tenantdevicemanagerpageobjects.getDevicegroupcellvalues());
		
		for(int i=0;i<delete.size();i++)
		{
			if(cellvalues1.get(i).getText().equals(groupcode)) 
			{
				util.click(delete.get(i));
				
			}
			
			
		}
	}
	
	@Then("^I validate the device group deletion$")
	public void I_validate_the_device_group_deletion() throws InterruptedException
	{
	
		List<WebElement> ele1 = driver.findElements(cirrusDCSPageObjects.getAllPaginationbtnone_By_One());
		
		for(int j=0;j<ele1.size();j++ )
		{
			Thread.sleep(2000);
			
			List<WebElement> cellvalues = driver.findElements(tenantdevicemanagerpageobjects.getDevicegroupcellvalues());
			
		
			for(WebElement ele:cellvalues)
			{
			
				String val = ele.getText();
			
				if(val.equals(groupcode)) 
				{
				
				Assert.assertEquals(val,groupcode);
				System.out.println("device group created successfully");
				break;
				
				
				}
				else if(val.equals(EditGroupCode))
				{
				
				
				Assert.assertEquals(val,EditGroupCode);
				System.out.println("device group edited successfully");
				break;
				
				}
				else {
					System.out.println("Group deleted successfully");
					break;
				}
				
			
				
			}
		
		js= (JavascriptExecutor)driver;
        
        js.executeScript("arguments[0].scrollIntoView(true);",driver.findElement(cirrusDCSPageObjects.getNormalnextbutton()));
		
		js=(JavascriptExecutor)driver;
		js.executeScript("arguments[0].click();",driver.findElement(cirrusDCSPageObjects.getNormalnextbutton()));
		Thread.sleep(2000);
	}
	}
	
	@And("^I click on assigned device button$")
	public void I_click_on_assign_device_button() throws InterruptedException
	{
		
			util.click(deviceoperationspageobjects.getButtons("Assign Device"));
		
		
		
	}
	
	@Then("I validate table & components in assign device popup")
	public void I_validate_table_and_components_in_assign_device_popup() throws InterruptedException
	{
		Assert.assertTrue(tenantdevicemanagerpageobjects.searchpanel(1).isDisplayed());
		
		Assert.assertTrue(tenantdevicemanagerpageobjects.searchpanel(2).isDisplayed());
		
		Assert.assertTrue(driver.findElement(tenantdevicemanagerpageobjects.getAssigneddevicetable()).isDisplayed());
		
		Assert.assertTrue(driver.findElement(tenantdevicemanagerpageobjects.getUnassigneddevicetable()).isDisplayed());
		
		List<WebElement> asscolumns = tenantdevicemanagerpageobjects.getAssigneddevicetablecolumns();
		
		List<WebElement> unasscolumns = tenantdevicemanagerpageobjects.getUnassigneddevicetablecolumns();

		List<WebElement> asscheckboxes = driver.findElements(tenantdevicemanagerpageobjects.getAssigneddevicecheckboxforallrecords());
		
		List<WebElement> unasscheckboxes = driver.findElements(tenantdevicemanagerpageobjects.getAssigneddevicecheckboxforallrecords());
		
		for(WebElement ele:unasscolumns)
		{
			
			Assert.assertTrue(ele.isDisplayed());
			
			System.out.println(ele.getText());
		}
		for(WebElement ele:asscheckboxes)
		{
			

			Assert.assertTrue(ele.isDisplayed());
		
		}
		
		for(WebElement ele:unasscheckboxes)
		{
			

			Assert.assertTrue(ele.isDisplayed());
			
		}
		
		
		Assert.assertTrue(deviceoperationspageobjects.getButtons("Add >>").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getButtons("<< Remove").isDisplayed());
		
		}
	
	@Then("^I select the device to add in unassignedtable$")
	public void I_select_the_device_to_add() throws InterruptedException
	{
		
		util.sendtext(tenantdevicemanagerpageobjects.searchpanel(1),devicesn);
		
		tenantdevicemanagerpageobjects.searchpanel(1).sendKeys(Keys.ENTER);

		Thread.sleep(1000);
		
		List<WebElement> asscheckboxes = driver.findElements(tenantdevicemanagerpageobjects.getUnassigneddevicecheckboxforallrecords());
		
		util.click(asscheckboxes.get(0));
		
		
		
	}
	
	@Then("^I click on Add button$")
	public void I_click_on_Add_button()
	{
		deviceoperationspageobjects.getButtons("Add >>").click();
	}
	
	@Then("I validate the device adding in assigned device window")
	public void I_validate_the_device_adding_in_assigned_device_window()
	{
		 List<WebElement> cellvalue = driver.findElements(tenantdevicemanagerpageobjects.getAssignedtablecellvalue());
		 
		 for(WebElement ele:cellvalue)
		 {
			 if(ele.getText().equals("7075220900001"))
			 {
				 
				 Assert.assertEquals(ele.getText(),"7075220900001");
			 }
		 }
	}
	
	@Then("^I click on Remove button$")
	public void I_click_on_remove_button()
	{
		deviceoperationspageobjects.getButtons("<< Remove").click();
	}
	
	@Then("I validate the device removing in assigned device window")
	public void I_validate_the_device_removing_in_assigned_device_window()
	{
		 List<WebElement> cellvalue = driver.findElements(tenantdevicemanagerpageobjects.getUnassignedtablecellvalue());
		 
		 for(WebElement ele:cellvalue)
		 {
			 if(ele.getText().equals(devicesn))
			 {
				 
				 Assert.assertEquals(ele.getText(),devicesn);
			 }
		 }
	}
	
	
	@Then("^I select the device to add in assignedtable$")
	public void I_select_the_device_to_add_in_assignedtable() throws InterruptedException
	{
		
		util.sendtext(tenantdevicemanagerpageobjects.searchpanel(2),devicesn);
		
		tenantdevicemanagerpageobjects.searchpanel(2).sendKeys(Keys.ENTER);

		Thread.sleep(1000);
		
		List<WebElement> asscheckboxes = driver.findElements(tenantdevicemanagerpageobjects.getAssignedtablecellvalue());
		
		util.click(asscheckboxes.get(0));
		
		
		
	}
	
	@Then("^I click on device group subscription tab$")
	public void I_click_on_device_group_subscription_tab() throws InterruptedException
	{
		Thread.sleep(2000);
		util.click(hostHusersPageObjects.getTabs("Device Subscription"));
	}
	
	@Then("^I click on add subscription button$")
	public void I_click_on_add_subscription_button()
	{
		util.click(deviceoperationspageobjects.getButtons("Add subscription"));
	}
	
	@Then("^I add subscription for low and High temperature$")
	public void I_add_subscription_for_low_and_High_temperature() throws InterruptedException
	{
		util.click(driver.findElement(tenantdevicemanagerpageobjects.getEventdropdown()));
		
		Thread.sleep(1000);
		
		util.click(tenantdevicemanagerpageobjects.clickondropdownOption("LowTemperatureEvent"));
		
		tenantdevicemanagerpageobjects.gettextareafields(3).sendKeys("akshay@zkteco.in");
		
		util.click(deviceoperationspageobjects.getButtonswithindex("Save",2));
		
		I_click_on_Yes_button();
		
		
		I_click_on_add_subscription_button();
		
		util.click(driver.findElement(tenantdevicemanagerpageobjects.getEventdropdown()));
		
		Thread.sleep(1000);
		
		util.click(tenantdevicemanagerpageobjects.clickondropdownOption("HighTemperatureEvent"));
		
		tenantdevicemanagerpageobjects.gettextareafields(3).sendKeys("akshay@zkteco.in");
		
		util.click(deviceoperationspageobjects.getButtonswithindex("Save",2));

		I_click_on_Yes_button();

	}
	
	@Then("^I vaidate the whether the subscriptions are added or updated or deleted$")
	public void I_vaidate_the_whether_the_subscriptions_are_added()
	{
		
		List<WebElement> low = tenantdevicemanagerpageobjects.gettemptable(1);
		
		List<WebElement> high = tenantdevicemanagerpageobjects.gettemptable(2);
		
		for(WebElement ele:low)
		{
			if(ele.getText().equals("akshay@zkteco.in"))
			{
				
				Assert.assertEquals(ele.getText(),"akshay@zkteco.in");
			}
			else if(ele.getText().equals("akshay1@zkteco.in"))
			{
				Assert.assertEquals(ele.getText(),"akshay1@zkteco.in");
				
			}
			else if(ele.getText().isEmpty())
			{

				System.out.println("subscription deleted");


			}
		}
		
		for(WebElement ele:high)
		{
			if(ele.getText().equals("akshay@zkteco.in"))
			{
				
				Assert.assertEquals(ele.getText(),"akshay@zkteco.in");
			}
			
			else if(ele.getText().equals("akshay1@zkteco.in"))
			{
				Assert.assertEquals(ele.getText(),"akshay1@zkteco.in");
				
			}
			
			else if(ele.getText().isEmpty())
			{

				System.out.println("subscription deleted");


			}
		}
		
	}
	
	@Then("^I click on edit icon and update all the details$")
	public void I_click_on_edit_icon() throws InterruptedException
	{
		wait.until(ExpectedConditions.visibilityOf(	tenantdevicemanagerpageobjects.getediticon().get(0)));
		
		tenantdevicemanagerpageobjects.getediticon().get(0).click();
		
		Thread.sleep(1000);
		
		tenantdevicemanagerpageobjects.gettextareafields(3).clear();
		
		tenantdevicemanagerpageobjects.gettextareafields(3).sendKeys("akshay1@zkteco.in");
		
		util.click(deviceoperationspageobjects.getButtonswithindex("Save",2));
		
		I_click_on_Yes_button();
		
		tenantdevicemanagerpageobjects.getediticon().get(1).click();
		
		Thread.sleep(1000);
		
		tenantdevicemanagerpageobjects.gettextareafields(3).clear();

		tenantdevicemanagerpageobjects.gettextareafields(3).sendKeys("akshay1@zkteco.in");
		
		util.click(deviceoperationspageobjects.getButtonswithindex("Save",2));
		
		I_click_on_Yes_button();
		
		
		
		
	}
	
	@Then("^I click on delete icon and validate the deletion$")
	public void I_click_on_delete_icon_and_validate_the_deletion() throws InterruptedException
	{
		Thread.sleep(2000);
		
		tenantdevicemanagerpageobjects.subscriptiondeletionicon().get(0).click();
		
		I_click_on_Yes_button();
		
		tenantdevicemanagerpageobjects.subscriptiondeletionicon().get(0).click();
		
		I_click_on_Yes_button();
		
		
	}
	
	 @Then("^I verify the Device manager module is displayed$")
     public void verify_the_device_manager_module_displayed() throws Throwable
	 {
		 Assert.assertTrue(driver.findElement(tenantdevicemanagerpageobjects.getDeviceManager()).isDisplayed());
  	
	 }
	 
	 @And("^I click on tenant Device Info sub module$")
		public void I_click_on_tenant_Device_info_sub_module()
		{
		 	
		 	
			util.clickonsubmodules("Devices Info");
			
			wait.until(ExpectedConditions.titleIs("Device Info | ZK Data Collection services"));
			
		}
	 
	 	@And("^I click on Device Setup sub module$")
		public void I_click_on_Device_Setup_sub_module()
		{
	 		util.clickonsubmodules("Device Setup");
			
			wait.until(ExpectedConditions.titleIs("Device Setup | ZK Data Collection services"));
			
		}
	 	
	 	@Then("^I validate user navigation to device setup page$")
		public void I_validate_user_navigation_to_device_setup_page()
		{
			System.out.println(driver.getTitle());
			
			String Actual = driver.getTitle();
			
			Assert.assertEquals(Actual,property.getProperty("devicesetup"));
		}
	
	 	@Then("^I validate the sections present in the device setup page$")
		public void I_validate_the_sections_present_in_the_device_setup_page()
		{
			
			Assert.assertTrue(deviceoperationspageobjects.getSections("Device List").isDisplayed());
			
			Assert.assertTrue(driver.findElement(deviceoperationspageobjects.getDeviceListSection()).isDisplayed());
			
			Assert.assertTrue(driver.findElement(deviceoperationspageobjects.getDeviceRemoteOperationAdvancedsection()).isDisplayed());
			
		}
	 	
	 	 @Then("^I validate the tabs present in device setup page$")
		 public void I_validate_the_tabs_present_in_device_setup_page()
		 {
			 Assert.assertTrue(hostHusersPageObjects.getTabs("Device").isDisplayed());
			 
			 Assert.assertTrue(hostHusersPageObjects.getTabs("Device Template").isDisplayed());
			 
			 
		 }
	 	 
	 	@Then("^I validate whether all the components are present in device setup device list section$")
		public void I_validate_whether_all_the_components_are_present_in_device_setup_device_list_section() throws InterruptedException
		
		{
	 		wait.until(ExpectedConditions.visibilityOf(driver.findElement(deviceoperationspageobjects.getSearchtextfield())));
			
			Assert.assertTrue(deviceoperationspageobjects.getButtons("Batch Enroll").isDisplayed());
			
			Assert.assertTrue(deviceoperationspageobjects.getButtons("Copy Device").isDisplayed());
			
			Assert.assertTrue(deviceoperationspageobjects.getButtons("Refresh").isDisplayed());
			
			Assert.assertTrue(deviceoperationspageobjects.getButtons("New Device").isDisplayed());
			
			Assert.assertTrue(deviceoperationspageobjects.getButtons("Save Device As Template").isDisplayed());
			
			Assert.assertTrue(deviceoperationspageobjects.getButtons("Change Device Sn").isDisplayed());
			
			Assert.assertTrue(driver.findElement(deviceoperationspageobjects.getSearchtextfield()).isDisplayed());
			
			Assert.assertTrue(driver.findElement(deviceoperationspageobjects.getSearchicon()).isDisplayed());
			
			Assert.assertTrue(driver.findElement(deviceoperationspageobjects.getDevicestatuscheckboxes()).isDisplayed());
			
			Assert.assertTrue(driver.findElement(deviceoperationspageobjects.getTotaldevicescount()).isDisplayed());

			
		}
	 	
	 	@Then("^I validate data auto autopopulation based on the selected device in device setup page$")
		public void I_validate_data_auto_autopopulation_based_on_the_selected_device_in_device_setup_page() throws InterruptedException
		{
			List<WebElement> ele = driver.findElements(tenantdevicemanagerpageobjects.getSearchresultsdevicesetup());
			
			ArrayList<String>l1=new ArrayList<String>();
			
			ele.get(1).click();
			
			wait.until(ExpectedConditions.invisibilityOf(driver.findElement(By.xpath("//img[@id='j_id_b']"))));
			
			for(int i=0;i<ele.size();i++)
			{
			
				String txt = ele.get(i).getText();
				
				l1.add(txt);
				
			}
			
			System.out.println(l1);
		
		String name = tenantdevicemanagerpageobjects.getdevicename(1).getAttribute("value");
		
		String sn=tenantdevicemanagerpageobjects.getdevicesn(1).getAttribute("value");
		
		if( l1.get(0).equals(sn) && l1.get(1).equals(name) ) 
			{
				
				System.out.println("data autopopulated based on the selected device successfully");
				
				
			}
			
		}
		
	 	@Then("^I click on batch enroll button$")
		public void I_click_on_batch_enroll_button()
		{
			util.click(deviceoperationspageobjects.getButtons("Batch Enroll"));
		}
	 	
	 	@Then("^I verify the popup in batch enroll$")
	 	public void I_verify_the_popup_in_batch_enroll() throws InterruptedException
	 	{
	 		Thread.sleep(1000);
	 		Assert.assertTrue(driver.findElement(tenantdevicemanagerpageobjects.batchenrollcolumns).isDisplayed());
	 	}
	 	
	 	@Then("^I verify the components in batch Enroll popup$")
	 	public void I_verify_the_components_in_batch_Enroll_popup() throws InterruptedException
	 	{
	 		Thread.sleep(1000);
	 		Assert.assertTrue(deviceoperationspageobjects.getButtons("Choose").isDisplayed());
	 		
	 		Assert.assertTrue(deviceoperationspageobjects.getButtons("Upload").isDisplayed());
	 		
	 		Assert.assertTrue(tenantdevicemanagerpageobjects.getbuttonsbatchenroll().isDisplayed());
	 		
	 		Assert.assertTrue(deviceoperationspageobjects.getButtons("Enroll").isDisplayed());
	 		
	 		
	 	}
	 	
	 	@Then("^I verify the table columns in batch Enroll popup$")
	 	public void I_verify_the_table_columns_in_batch_Enroll_popup() throws InterruptedException
	 	{
	 		Thread.sleep(1000);
	 		
	 		List<WebElement> columns = driver.findElements(tenantdevicemanagerpageobjects.getBatchenrollcolumns());
	 		
	 		for(WebElement ele:columns)
	 		{
	 			Assert.assertTrue(ele.isDisplayed());
	 			
	 			System.out.println(ele.getText());
	 		}
	 		
	 		
	 	}
	 	
	 	@Then("^I upload the csv file for batch enroll$")
	 	public void I_upload_the_csv_file_for_batch_enroll() throws InterruptedException
	 	{
	 		Thread.sleep(2000);
	 		driver.findElement(tenantdevicemanagerpageobjects.getChoosebutton()).sendKeys("C:\\Users\\Akshay\\Desktop\\batch.csv\\");
	 		
	 	}
	 	
	 	@Then("^I click on upload button$")
	 	public void I_click_on_upload_button() throws InterruptedException
	 	{
	 		util.click(deviceoperationspageobjects.getButtons("Upload"));
	 		
	 		Thread.sleep(2000);
	 		
	 	}
	 	
	 	@Then("^I validate whether the device uploaded through batch enroll in device setup page$")
		public void I_validate_whether_the_device_uploaded_through_batch_enroll_in_device_setup_page() throws InterruptedException
		{
			List<WebElement> ele = driver.findElements(tenantdevicemanagerpageobjects.getSearchresultsdevicesetup());
			
			ele.get(1).click();
			
			wait.until(ExpectedConditions.invisibilityOf(driver.findElement(By.xpath("//img[@id='j_id_b']"))));
			
			for(int i=0;i<ele.size();i++)
			{
			
				String txt = ele.get(i).getText();
				
				if(txt.equals("CGP123456"))
				{
					
					System.out.println("device uploaded successfully");
				}
				
			}
			
			
		}
	 	
	 	@Then("^I enter devicesn into search field for validating upload functionality$")
		public void I_enter_devicesn_into_search_field_for_validating_upload_functionality() throws InterruptedException
		{
			util.sendtext(driver.findElement(deviceoperationspageobjects.getSearchtextfield()), "CGP123456");
			//driver.findElement(deviceoperationspageobjects.getSearchtextfield()).sendKeys("CGP5201160105");
		}
	 	
		@Then("^I click on Enroll button$")
	 	public void I_click_on_Enroll_button() throws InterruptedException
	 	{
			Thread.sleep(1000);
	 		util.click(deviceoperationspageobjects.getButtons("Enroll"));
	 		
	 	}
		
		@Then("^I click on copy device button$")
		public void I_click_on_copy_device_button() throws InterruptedException
		{
			util.click(deviceoperationspageobjects.getButtons("Copy Device"));
			Thread.sleep(1000);
		}
		
		@Then("^I verify the popup in copy device$")
	 	public void I_verify_the_popup_in_copy_device() throws InterruptedException
	 	{
	 		Thread.sleep(1000);
	 		Assert.assertTrue(driver.findElement(tenantdevicemanagerpageobjects.getCopyDevicepopup()).isDisplayed());
	 	}
		
		
		
		@Then("^I verify the components in Copy Device popup$")
	 	public void I_verify_the_components_in_Copy_Device_popup() throws InterruptedException
	 	{
	 		Thread.sleep(1000);
	 		Assert.assertTrue(deviceoperationspageobjects.messagequeueautopopulatedfields("From Customer :").isDisplayed());
	 		
	 		Assert.assertTrue(tenantdevicemanagerpageobjects.getpopupbuttonname("Device Details","Save").isDisplayed());
	 		
	 		Assert.assertTrue(driver.findElement(tenantdevicemanagerpageobjects.getToCustomerdropdown()).isDisplayed());
	 		
	 		Assert.assertTrue(tenantdevicemanagerpageobjects.getdevicename(2).isDisplayed());
			
	 		Assert.assertTrue(tenantdevicemanagerpageobjects.getdevicesn(3).isDisplayed());
	 		
	 		
	 	}
		
		@Then("^I enter all the details and copy the device configuration$")
		public void I_enter_all_the_details_for_copying_device_configuration() throws InterruptedException
		{
			
			tenantdevicemanagerpageobjects.getdevicename(2).sendKeys(DeviceName);
			
	 		tenantdevicemanagerpageobjects.getdevicesn(3).sendKeys(DeviceSN);
	 		
	 		util.click(tenantdevicemanagerpageobjects.getpopupbuttonname("Device Details","Save"));
	 		
	 		util.click(tenantdevicemanagerpageobjects.getpopupbuttonname("Confirmation","Yes"));
	 		
	 		
		}
		
		@Then("I verify the data is uploaded in Batch enroll popup")
		public void I_verify_the_data_is_uploaded_in_Batch_enroll_popup()
		{
			List<WebElement> data = driver.findElements(tenantdevicemanagerpageobjects.getUploadeddata());
			
			for(WebElement ele:data)
			{
				
				Assert.assertTrue(ele.isDisplayed());
			}
		}
		
		@Then("^I click on new device button$")
		public void I_click_on_new_device_button() throws InterruptedException
		{
			util.click(deviceoperationspageobjects.getButtons("New Device"));
			Thread.sleep(1000);
		}
		
		@Then("I validate the tabs in device setup page")
		public void I_validate_the_tabs_in_device_setup_page()
		{
			List<WebElement> tabs = driver.findElements(tenantdevicemanagerpageobjects.getTabs());
			
			for(WebElement ele:tabs)
			{
				Assert.assertTrue(ele.isDisplayed());
				System.out.println(ele.getText());
				
			}
		}
		
		@Then("I validate the components in Device Enrollment tab in device setup")
		public void I_validate_the_components_in_Device_Enrollment_tab_in_device_setup()
		{
			Assert.assertTrue(tenantdevicemanagerpageobjects.getdropdownfields("deviceAsTemplate_label").isDisplayed());
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getdropdownfields("devicePlatformDropDown_label").isDisplayed());
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getdropdownfields("deviceLanguage_label").isDisplayed());
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getdropdownfieldswithtext("Select a device group").isDisplayed());
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getdropdownfieldswithtext("Select One").isDisplayed());
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getdevicename(1).isDisplayed());
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getdevicesn(1).isDisplayed());
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getinputfields("deviceIpAddress").isDisplayed());
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getinputfields("deviceModel").isDisplayed());

			Assert.assertTrue(tenantdevicemanagerpageobjects.getinputfields("deviceCode").isDisplayed());

			Assert.assertTrue(tenantdevicemanagerpageobjects.gettextareafields(1).isDisplayed());
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.gettextareafields(1).isDisplayed());
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getSaveandCancelbtn(1, "Save").isDisplayed());

			Assert.assertTrue(tenantdevicemanagerpageobjects.getSaveandCancelbtn(1,"Cancel").isDisplayed());

			
			}
		
		@Then("I validate the components in Device basic config tab in device setup")
		public void I_validate_the_components_in_Device_basic_config_tab_device_setup()
		{
			util.Scroll(tenantdevicemanagerpageobjects.getdropdownfields("deviceTemplate_label"));
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getdropdownfields("deviceTemplate_label").isDisplayed());
			
			util.Scroll(tenantdevicemanagerpageobjects.getdropdownfields("devTimeZone_label"));
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getdropdownfields("devTimeZone_label").isDisplayed());
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getdropdownfields("deviceLanguage_label").isDisplayed());
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getinputfields("pushDelay").isDisplayed());
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getinputfields("pushTimeout").isDisplayed());
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getinputfields("pushSyncTime").isDisplayed());

			Assert.assertTrue(tenantdevicemanagerpageobjects.getinputfields("pushErrorDelay").isDisplayed());
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getSaveandCancelbtn(2, "Save").isDisplayed());

			Assert.assertTrue(tenantdevicemanagerpageobjects.getSaveandCancelbtn(2,"Cancel").isDisplayed());
			
		}
		
		@Then("I validate the components in general settings tab in device setup")
		public void I_validate_the_components_in_general_settings_tab_device_setup()
		{
			
			util.Scroll(tenantdevicemanagerpageobjects.getdropdownfields("homeScreenDateFormat_label"));
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getdropdownfields("homeScreenDateFormat_label").isDisplayed());
			
			util.Scroll(tenantdevicemanagerpageobjects.getdropdownfields("homeScreenTimeFormat_label"));

			Assert.assertTrue(tenantdevicemanagerpageobjects.getdropdownfields("homeScreenTimeFormat_label").isDisplayed());
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getdropdownfields("innerScreenDateFormat_label").isDisplayed());
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getdropdownfields("innerScreenTimeFormat_label").isDisplayed());
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getSlidebars("Screen Brightness and Sound Settings",1).isDisplayed());
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getSlidebars("Screen Brightness and Sound Settings",2).isDisplayed());
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getSaveandCancelbtn(3, "Save").isDisplayed());

			Assert.assertTrue(tenantdevicemanagerpageobjects.getSaveandCancelbtn(3,"Cancel").isDisplayed());
			
		}
		
		@Then("^I click on all tabs in device setup page$")
		public void I_click_on_all_tabs_in_device_setup_page() throws InterruptedException
		{
			List<WebElement> tabs = driver.findElements(tenantdevicemanagerpageobjects.getTabs());
			
			for(int i=1;i<tabs.size();i++)
			{
				util.click(tabs.get(i));
			}
			
			Thread.sleep(2000);
		}
		
		@Then("I enter the details and add the device")
		public void I_enter_the_details_and_add_the_device()
		{
			
			
			
			tenantdevicemanagerpageobjects.getdevicename(1).sendKeys(util.randomAlphabetic());
			
			devicename=tenantdevicemanagerpageobjects.getdevicename(1).getAttribute("value");

			
			tenantdevicemanagerpageobjects.getdevicesn(1).sendKeys(util.randomAlphanumeric());
			
			 devicesn = tenantdevicemanagerpageobjects.getdevicesn(1).getAttribute("value");
			
			
			util.click(tenantdevicemanagerpageobjects.getSaveandCancelbtn(1, "Save"));
			
			
			
			
			
		}
		
		@Then("^I enter devicesn into search field for validating device adding$")
		public void I_enter_devicesn_into_search_field_for_validating_device_adding() throws InterruptedException
		{
			util.sendtext(driver.findElement(deviceoperationspageobjects.getSearchtextfield()),devicesn);
			
		}
		
		@Then("^I validate the whether device is added$")
		public void I_validate_the_whether_device_is_added()
		{
			List<WebElement> ele = driver.findElements(tenantdevicemanagerpageobjects.getSearchresultsdevicesetup());
			
			for(int i=0;i<ele.size();i++)
			{
				String val = ele.get(i).getText();
				
			if(val.equals(devicesn)) {
				
				System.out.println("device added successfully");
				
				ExtentCucumberAdapter.addTestStepLog("record searched successfully with client name");
				break;
				
				
			}
			
			}
		}
		
		@Then("^I click on save device as template button$")
		public void I_click_on_save_device_as_template_button() throws InterruptedException
		{
			util.click(deviceoperationspageobjects.getButtons("Save Device As Template"));
			Thread.sleep(1000);
		}
		
		@Then("^I enter details for saving template and save$")
		public void I_enter_details_for_saving_template() throws InterruptedException
		{
			tenantdevicemanagerpageobjects.getinputfields("saveDeviceAsTemplateForm:deviceSn").sendKeys(DeviceTemplate);
			
	 		util.click(tenantdevicemanagerpageobjects.getpopupbuttonname("Save as Device Template","Save"));
	 		
	 		util.click(tenantdevicemanagerpageobjects.getpopupbuttonname("Confirmation","Yes"));
	 		
	 		
	 		
	 		

		}
		
		@Then("I click on device template tab in device setup page")
		public void I_click_on_device_template_tab_in_device_setup_page() throws InterruptedException
		{
			Thread.sleep(2000);
			util.click(hostHusersPageObjects.getTabs("Device Template"));
			
		}

		@Then("^I validate the template creation in device setup page$")
		public void I_validate_the_template_creation_in_device_setup_page() throws InterruptedException
		{
			Thread.sleep(2000);
			util.sendtext(driver.findElement(tenantdevicemanagerpageobjects.getDevicetemplatesearchfield()),DeviceTemplate);
			
			driver.findElement(tenantdevicemanagerpageobjects.getDevicetemplatesearchfield()).sendKeys(Keys.ENTER);
			
			Thread.sleep(2000);
			
			List<WebElement> result = driver.findElements(tenantdevicemanagerpageobjects.getDevicetemplatesearchresults());
			
			for(int i=0;i<result.size();i++)
			{
				
				String val = result.get(i).getText();
				
				System.out.println(val);
				
				if(val.equals(DeviceTemplate))
				{
					System.out.println("template added");
					Assert.assertEquals(val, DeviceTemplate);
				}
				
			}
		}
		
		@Then("^I click on change device sn button$")
		public void I_click_on_change_device_sn_button() throws InterruptedException
		{
			
			util.click(deviceoperationspageobjects.getButtons("Change Device Sn"));
			Thread.sleep(1000);
			
		}
		
		@Then("^I enter all the details for changing device sn$")
		public void I_enter_all_the_details_for_changing_device_sn()
		{
			tenantdevicemanagerpageobjects.getinputfields("newSn").sendKeys(NewDeviceSN);
			
			driver.findElement(tenantdevicemanagerpageobjects.getReasonTextarea()).sendKeys("test");
			
			util.click(deviceoperationspageobjects.getButtons("Change Sn"));
			
			util.click(tenantdevicemanagerpageobjects.getpopupbuttonname("Confirmation","Yes"));

			
		}
		
		@Then("^I validate whether device sn is changed$")
		public void I_validate_whether_device_sn_is_changes() throws InterruptedException
		{
			Thread.sleep(1000);
			Assert.assertTrue(deviceoperationspageobjects.getNorecordsfound(1).isDisplayed());
		}
		
		@Then("I enter the details and add the device to verify tabs based on the device platform")
		public void I_enter_the_details_and_add_the_deviceto_verify_tabs_based_on_the_device_platform() throws InterruptedException
		{
			tenantdevicemanagerpageobjects.getdevicename(1).sendKeys(DeviceName);
			
			tenantdevicemanagerpageobjects.getdevicesn(1).sendKeys(DeviceSN);
			
			tenantdevicemanagerpageobjects.getdropdownfields("devicePlatformDropDown_label").click();
			
			util.click(tenantdevicemanagerpageobjects.clickondropdownOption("LINUX"));
			
			Thread.sleep(2000);
			
			
			//util.click(tenantdevicemanagerpageobjects.getSaveandCancelbtn(1, "Save"));
			
			
			
		}
		
		@Then("^I verify all the components in Hardware setup$")
		public void I_verify_all_the_components_in_Hardware_setup() throws InterruptedException
		{
			
			List<WebElement> thermal = tenantdevicemanagerpageobjects.getcomponents("Enable Thermal Module");
			
			util.click(thermal.get(0));
			
			
			
			for(WebElement ele:thermal)
			{
				wait.until(ExpectedConditions.visibilityOf(ele));
				
				Assert.assertTrue(ele.isDisplayed());
			}
			
			List<WebElement> temp = tenantdevicemanagerpageobjects.getcomponents("Show Temperature In");
			
			wait.until(ExpectedConditions.visibilityOf(temp.get(0)));
			
			for(WebElement ele:temp)
			{
				
				Assert.assertTrue(ele.isDisplayed());
			}
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getSlidebars("Body Temperature Threshold(high)", 1).isDisplayed());
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getSlidebars("Body Temperature Threshold(low)", 1).isDisplayed());
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getinputfields("screenTimeout").isDisplayed());
			
			List<WebElement> thermalfailure = tenantdevicemanagerpageobjects.getcomponents("Accept Thermal Failure Punches");
			
			util.click(thermalfailure.get(0));
			
			Thread.sleep(1000);

			
			for(WebElement ele:thermalfailure)
			{
				
				Assert.assertTrue(ele.isDisplayed());
			}
			
			List<WebElement> recordTemp = tenantdevicemanagerpageobjects.getcomponents("Record Temperature");
			
			
			util.click(recordTemp.get(0));
			
			for(WebElement ele:recordTemp)
			{
				
				Assert.assertTrue(ele.isDisplayed());
			}
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getinputfields("eyeDetectionUpperLimit").isDisplayed());
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getinputfields("eyeDetectionLowerLimit").isDisplayed());
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getinputfields("eyeDetectionLeftLimit").isDisplayed());
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getinputfields("eyeDetectionRightLimit").isDisplayed());
			
			List<WebElement> MotionBasedThermalDetection = tenantdevicemanagerpageobjects.getcomponents("Motion Based Thermal Detection");
			
			util.click(MotionBasedThermalDetection.get(0));
			
						
			for(int i=0;i<MotionBasedThermalDetection.size();i++)
			{
				
				Assert.assertTrue(MotionBasedThermalDetection.get(0).isDisplayed());
				
			}
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getinputfields("motionBasedThermalSamples").isDisplayed());
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getdropdownfields("bodyTemperaturePunchAction_label").isDisplayed());
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getdropdownfields("highBodyTemperatureFatPunchAction_label").isDisplayed());
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getdropdownfields("lowBodyTemperaturePunchAction_label").isDisplayed());
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getdropdownfields("lowBodyTemperatureFatPunchAction_label").isDisplayed());
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getpopupbuttonnamewithlabel("Thermal Module Setup","Save",1).isDisplayed());
			
			List<WebElement> Fingerprintsetup = tenantdevicemanagerpageobjects.getcomponents("Enable Fingerprint Detection");
			
			util.click(Fingerprintsetup.get(0));

			
			for(WebElement ele:Fingerprintsetup)
			{
				
				Assert.assertTrue(ele.isDisplayed());
				
			}
			
			
			List<WebElement> Fingerprintimagedisplay = tenantdevicemanagerpageobjects.getcomponents("Fingerprint Image Display Mode");
			
			util.click(Fingerprintimagedisplay.get(0));

			
			for(WebElement ele:Fingerprintimagedisplay)
			{
				
				Assert.assertTrue(ele.isDisplayed());
				
			}
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getinputfields("enrollmentThreshold").isDisplayed());
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getinputfields("matchThreshold").isDisplayed());

			Assert.assertTrue(tenantdevicemanagerpageobjects.getinputfields("trialTimesForMatching").isDisplayed());
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getpopupbuttonnamewithlabel("Thermal Module Setup","Save",2).isDisplayed());
			
			List<WebElement> EnableAccessControl = tenantdevicemanagerpageobjects.getcomponents("Enable Access Control");
			
			util.click(EnableAccessControl.get(0));
			
			

			
			for(WebElement ele:EnableAccessControl)
			{
				
				Assert.assertTrue(ele.isDisplayed());
				
			}
			List<WebElement> EnableRelay1 = tenantdevicemanagerpageobjects.getcomponents("Enable Relay1");
			
			

			for(WebElement ele:EnableRelay1)
			{
				
				Assert.assertTrue(ele.isDisplayed());
				
			}
			
			List<WebElement> EnableRelay2 = tenantdevicemanagerpageobjects.getcomponents("Enable Relay2");
			
			wait.until(ExpectedConditions.visibilityOf(EnableRelay2.get(0)));
			
			util.click(EnableRelay2.get(0));
			
			for(WebElement ele:EnableRelay2)
			{
				
				Assert.assertTrue(ele.isDisplayed());
				
			}
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getinputfields("relayTimeout").isDisplayed());

			Assert.assertTrue(tenantdevicemanagerpageobjects.getpopupbuttonnamewithlabel("Thermal Module Setup","Save",3).isDisplayed());
			
			List<WebElement> EnableFacialDetection = tenantdevicemanagerpageobjects.getcomponents("Enable Facial Detection");
			
			util.click(EnableFacialDetection.get(0));

			
			for(WebElement ele:EnableFacialDetection)
			{
				
				Assert.assertTrue(ele.isDisplayed());
				
			}
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getSlidebars("Enrollment Threshold", 1).isDisplayed());
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getSlidebars("Face Recognition Threshold", 1).isDisplayed());
			
			List<WebElement> AcceptMaskFailurePunches = tenantdevicemanagerpageobjects.getcomponents("Accept Mask Failure Punches");
			
			
			
			util.click(AcceptMaskFailurePunches.get(0));

			for(WebElement ele:AcceptMaskFailurePunches)
			{
				
				Assert.assertTrue(ele.isDisplayed());
				
			}
			
           List<WebElement> FaceRecognitionWithMask = tenantdevicemanagerpageobjects.getcomponents("Face Recognition With Mask");
           
			util.click(FaceRecognitionWithMask.get(0));

			
			for(WebElement ele:FaceRecognitionWithMask)
			{
				
				Assert.assertTrue(ele.isDisplayed());
				
			}
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getdropdownfields("punchActionWhenMaskAbsent_label").isDisplayed());
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getpopupbuttonnamewithlabel("Thermal Module Setup","Save",1).isDisplayed());
			
			 List<WebElement> RFIDReader = tenantdevicemanagerpageobjects.getcomponents("RFID Reader");
			 
				util.click(RFIDReader.get(0));

				
				for(WebElement ele:RFIDReader)
				{
					
					Assert.assertTrue(ele.isDisplayed());
					
				}
				
				 List<WebElement> SmartCardReader = tenantdevicemanagerpageobjects.getcomponents("Smart Card Reader");
				 
					util.click(SmartCardReader.get(0));

					
				 for(WebElement ele:SmartCardReader)
					{
						
						Assert.assertTrue(ele.isDisplayed());
						
					}
					
				List<WebElement> MagneticReader = tenantdevicemanagerpageobjects.getcomponents("Magnetic Reader");
				
				util.click( MagneticReader.get(0));

						
				for(WebElement ele:MagneticReader)
						{
							
							Assert.assertTrue(ele.isDisplayed());
							
						}
						
				 List<WebElement> BarcodeReader = tenantdevicemanagerpageobjects.getcomponents("Barcode Reader");
				 
					util.click(BarcodeReader.get(0));

							
				for(WebElement ele:BarcodeReader)
							{
								
								Assert.assertTrue(ele.isDisplayed());
								
							}
							
				
				Assert.assertTrue(tenantdevicemanagerpageobjects.getpopupbuttonnamewithlabel("Facial Detection Setup","Save",2).isDisplayed());
				
				//Wiegand Setup
				
				Assert.assertTrue(tenantdevicemanagerpageobjects.getdropdownfields("cardFormat_label").isDisplayed());
				
				Assert.assertTrue(tenantdevicemanagerpageobjects.getpopupbuttonnamewithlabel("Facial Detection Setup","Save",3).isDisplayed());
				
				//Smart Card Setup
				
				tenantdevicemanagerpageobjects.getinputfields("startBit1").sendKeys("5");
				
				tenantdevicemanagerpageobjects.getinputfields("endBit1").sendKeys("10");
				
				wait.until(ExpectedConditions.visibilityOf(tenantdevicemanagerpageobjects.getpopupbuttonnamewithlabel("Facial Detection Setup","Save",4)));
				
				Assert.assertTrue(tenantdevicemanagerpageobjects.getpopupbuttonnamewithlabel("Facial Detection Setup","Save",4).isDisplayed());
				
				Thread.sleep(3000);
				
				//Magnetic Card Setup
				
				List<WebElement> TruncateCardNumber = tenantdevicemanagerpageobjects.getcomponents("Truncate Card Number");
				
				
				util.click(TruncateCardNumber.get(0));

				
				for(int i=0;i<TruncateCardNumber.size();i++)
				{
									
				Assert.assertTrue(TruncateCardNumber.get(i).isDisplayed());
									
				}
			
				Assert.assertTrue(tenantdevicemanagerpageobjects.getinputfields("startPosition").isDisplayed());
				
				Assert.assertTrue(tenantdevicemanagerpageobjects.getinputfields("cardSize").isDisplayed());
				
				Assert.assertTrue(tenantdevicemanagerpageobjects.getpopupbuttonnamewithlabel("Facial Detection Setup","Save",5).isDisplayed());

				
				//BarCode Setup
				
				List<WebElement> barcode = tenantdevicemanagerpageobjects.getrespectivesection("truncateCardNumber1");
				
				util.click(barcode.get(0));
				
				
				Assert.assertTrue(tenantdevicemanagerpageobjects.getinputfields("startPosition1").isDisplayed());
				
				Assert.assertTrue(tenantdevicemanagerpageobjects.getinputfields("cardSize1").isDisplayed());
				
				Assert.assertTrue(tenantdevicemanagerpageobjects.getpopupbuttonnamewithlabel("Facial Detection Setup","Save",6).isDisplayed());
				
				
				//Enable Photo Capture
				
				List<WebElement> EnablePhotoCapture = tenantdevicemanagerpageobjects.getcomponents("Enable Photo Capture");
				
				util.click(EnablePhotoCapture.get(0));

				
				for(WebElement ele:EnablePhotoCapture)
				{
									
				Assert.assertTrue(ele.isDisplayed());
									
				
				
				}
				
				List<WebElement> DisplayPreview = tenantdevicemanagerpageobjects.getcomponents("Display Preview");
				
				util.click(DisplayPreview.get(0));

				
				for(WebElement ele:DisplayPreview)
				{
									
				Assert.assertTrue(ele.isDisplayed());
									
				
				}
				
				Assert.assertTrue(tenantdevicemanagerpageobjects.getinputfields("previewTimeout").isDisplayed());
				
				Assert.assertTrue(tenantdevicemanagerpageobjects.getdropdownfields("photoCaptureCondition_label").isDisplayed());
				
				Assert.assertTrue(tenantdevicemanagerpageobjects.getpopupbuttonnamewithlabel("Facial Detection Setup","Save",7).isDisplayed());
				
				
		}
		
		
		
		
		@Then("I validate the components in Additional settings tab in device setup")
		public void I_validate_the_components_in_Additional_settings_tab_device_setup()
		{
			
			 Assert.assertTrue(tenantdevicemanagerpageobjects.getinputfields("dlatitude").isDisplayed());
			 
			 Assert.assertTrue(tenantdevicemanagerpageobjects.getinputfields("dlongitude").isDisplayed());
			 
			 util.Scroll(deviceoperationspageobjects.getButtons("Add"));
			 
			 Assert.assertTrue(deviceoperationspageobjects.getButtons("Add").isDisplayed());
			 
			 Assert.assertTrue(tenantdevicemanagerpageobjects.getadditionalsetupsavebtn().isDisplayed());
			 
			 
			
		}
		
		@Then("I validate the components in message settings tab in device setup")
		public void I_validate_the_components_in_message_settings_tab_device_setup()
		{
			
			 Assert.assertTrue(tenantdevicemanagerpageobjects.getdropdownfields("messagePrivilege_label").isDisplayed());
			 
			 util.Scroll(tenantdevicemanagerpageobjects.getinputfields("messageLockoutStartTime_input"));
			 
			 Assert.assertTrue(tenantdevicemanagerpageobjects.getinputfields("messageLockoutStartTime_input").isDisplayed());
			 
			 Assert.assertTrue(tenantdevicemanagerpageobjects.getinputfields("messageLockoutEndTime_input").isDisplayed());
			 
			 Assert.assertTrue(tenantdevicemanagerpageobjects.getinputfields("messageLockoutStartTime2_input").isDisplayed());
			 
			 Assert.assertTrue(tenantdevicemanagerpageobjects.getinputfields("messageLockoutEndTime2_input").isDisplayed());
			 
			 Assert.assertTrue(tenantdevicemanagerpageobjects.getinputfields("messageLockoutStartTime3_input").isDisplayed());
			 
			 Assert.assertTrue(tenantdevicemanagerpageobjects.getinputfields("messageLockoutEndTime3_input").isDisplayed());
			 
			 Assert.assertTrue(tenantdevicemanagerpageobjects.getinputfields("messageLockoutStartTime4_input").isDisplayed());
			 
			 Assert.assertTrue(tenantdevicemanagerpageobjects.getinputfields("messageLockoutEndTime4_input").isDisplayed());
			 
			 Assert.assertTrue(tenantdevicemanagerpageobjects.getmessagesavebtn().isDisplayed());
			 
			 
			
		}
		
		@Then("I validate the components in device subscription tab in device setup")
		public void I_validate_the_components_in_device_subscription_tab_in_device_setup()
		{
			
			util.Scroll(deviceoperationspageobjects.getButtons("Add subscription"));
			 
			 Assert.assertTrue(deviceoperationspageobjects.getButtons("Add subscription").isDisplayed());
			 
			 
			
		}
		
		//visitor module
		
		@Then("I validate the components in visitor module tab in device setup")
		public void I_validate_the_components_in_visitor_module_tab_in_device_setup() throws InterruptedException
		{
			
			 List<WebElement> EnableVisitorAttestationModule = tenantdevicemanagerpageobjects.getcomponents("Enable Visitor Attestation Module");
			 
			 util.click(EnableVisitorAttestationModule.get(0));
			 
			 Thread.sleep(2000);
			 
			 for(WebElement ele:EnableVisitorAttestationModule)
				{
									
				Assert.assertTrue(ele.isDisplayed());
									
				
				}
			 
			 List<WebElement> EnableVisitorPhotoCapture = tenantdevicemanagerpageobjects.getcomponents("Enable Visitor Photo Capture");
			 
			 for(WebElement ele:EnableVisitorPhotoCapture)
				{
									
				Assert.assertTrue(ele.isDisplayed());
									
				
				}
			 
			 List<WebElement> EnableEmployeeVisitorLog = tenantdevicemanagerpageobjects.getcomponents("Enable Employee Visitor Log");
			 
			 for(WebElement ele:EnableEmployeeVisitorLog)
				{
									
				Assert.assertTrue(ele.isDisplayed());
									
				
				}
			 
			 Assert.assertTrue(tenantdevicemanagerpageobjects.getdropdownfields("visitorAttestationProfile_label").isDisplayed());
			 	 
			
		}
		

		@Then("I validate the components in clock function provision tab in device setup")
		public void I_validate_the_components_in_clock_function_provision_tab_in_device_setup()
		{
		
			
			 Assert.assertTrue(driver.findElement(tenantdevicemanagerpageobjects.getAddnewicon()).isDisplayed());
			 
			 Assert.assertTrue(deviceoperationspageobjects.getButtons("Save as Template").isDisplayed());
			 
			 Assert.assertTrue(deviceoperationspageobjects.getButtons("Load Template").isDisplayed());
			 
			 Assert.assertTrue(deviceoperationspageobjects.getButtons("Sync To Device").isDisplayed());

			 
			 
			
		}
		
		@Then("I validate the components in Add new function key popup")
		public void I_validate_the_components_in_Add_new_function_key_popup()
		{
		
			
			 Assert.assertTrue(tenantdevicemanagerpageobjects.getclockfunctionfields("Punch Function Type:").isDisplayed());
			 
			 Assert.assertTrue(tenantdevicemanagerpageobjects.getclockfunctionfields("Punch Event Code:").isDisplayed());
			 
			 Assert.assertTrue(tenantdevicemanagerpageobjects.getclockfunctionfields("Punch Event Label:").isDisplayed());
			 
			 Assert.assertTrue(tenantdevicemanagerpageobjects.getclockfunctionfields("Attendance Action:").isDisplayed());
			 
			 List<WebElement> AddClosePunch = tenantdevicemanagerpageobjects.getcomponents("Add Close Punch:");
			 
			 for(WebElement ele:AddClosePunch)
				{
									
				Assert.assertTrue(ele.isDisplayed());
									
				
				}
			 Assert.assertTrue(tenantdevicemanagerpageobjects.getclockfunctionfields("Close Punch Event Code:").isDisplayed());
			 
			 List<WebElement> DisplayPersonnelMessage = tenantdevicemanagerpageobjects.getcomponents("Display Personnel Message:");
			 
			 for(WebElement ele:DisplayPersonnelMessage)
				{
									
				Assert.assertTrue(ele.isDisplayed());
									
				
				}
			 
			 Assert.assertTrue(tenantdevicemanagerpageobjects.getplusicon("Time and Labor Tracking Code Setup").isDisplayed());
			 
			 Assert.assertTrue(tenantdevicemanagerpageobjects.getclockfunctionfields("Level 1:").isDisplayed());
			 
			 Assert.assertTrue(tenantdevicemanagerpageobjects.getplusicon("Punch Rule Setup").isDisplayed());
			 
			 Assert.assertTrue(tenantdevicemanagerpageobjects.getclockfunctionfields("Rule 1:").isDisplayed());
			 
			 Assert.assertTrue(tenantdevicemanagerpageobjects.getclockfunctionfields("Attestation Profile").isDisplayed());

			 List<WebElement> addsetting = driver.findElements(tenantdevicemanagerpageobjects.getClockfuncaddsettings());
			 
			 for(WebElement ele:addsetting)
				{
									
				Assert.assertTrue(ele.isDisplayed());
									
				
				}
			 
			 Assert.assertTrue(driver.findElement(tenantdevicemanagerpageobjects.getAddfunctionkeysavebtn()).isDisplayed());
			 
				 
			
		}
		
		@Then("^I configure all the details and save$")
		public void I_configure_all_the_details_and_save() throws InterruptedException
		{
			List<WebElement> thermal = tenantdevicemanagerpageobjects.getcomponents("Enable Thermal Module");
			
			util.click(thermal.get(0));
			
			List<WebElement> temp = tenantdevicemanagerpageobjects.getcomponents("Show Temperature In");
			
			wait.until(ExpectedConditions.visibilityOf(temp.get(0)));
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getSlidebars("Body Temperature Threshold(high)", 1).isDisplayed());
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getSlidebars("Body Temperature Threshold(low)", 1).isDisplayed());
			
			tenantdevicemanagerpageobjects.getinputfields("screenTimeout").sendKeys("5");
			
			List<WebElement> thermalfailure = tenantdevicemanagerpageobjects.getcomponents("Accept Thermal Failure Punches");
			
			util.click(thermalfailure.get(0));
			
			Thread.sleep(1000);

			List<WebElement> recordTemp = tenantdevicemanagerpageobjects.getcomponents("Record Temperature");
			
			util.click(recordTemp.get(0));
			
			tenantdevicemanagerpageobjects.getinputfields("eyeDetectionUpperLimit").sendKeys("85");
			
			tenantdevicemanagerpageobjects.getinputfields("eyeDetectionLowerLimit").sendKeys("425");
			
			tenantdevicemanagerpageobjects.getinputfields("eyeDetectionLeftLimit").sendKeys("82");
			
			tenantdevicemanagerpageobjects.getinputfields("eyeDetectionRightLimit").sendKeys("420");
			
			List<WebElement> MotionBasedThermalDetection = tenantdevicemanagerpageobjects.getcomponents("Motion Based Thermal Detection");
			
			util.click(MotionBasedThermalDetection.get(0));
			
			tenantdevicemanagerpageobjects.getinputfields("motionBasedThermalSamples").sendKeys("4");
			
			tenantdevicemanagerpageobjects.getdropdownfields("bodyTemperaturePunchAction_label");
			
			tenantdevicemanagerpageobjects.getdropdownfields("highBodyTemperatureFatPunchAction_label");
			
			tenantdevicemanagerpageobjects.getdropdownfields("lowBodyTemperaturePunchAction_label");
			
			tenantdevicemanagerpageobjects.getdropdownfields("lowBodyTemperatureFatPunchAction_label");
			
			util.click(tenantdevicemanagerpageobjects.getpopupbuttonnamewithlabel("Thermal Module Setup","Save",1));
			
			util.click(tenantdevicemanagerpageobjects.getpopupbuttonname("Confirmation","Yes"));
			
			List<WebElement> Fingerprintsetup = tenantdevicemanagerpageobjects.getcomponents("Enable Fingerprint Detection");
			
			util.click(Fingerprintsetup.get(0));

			List<WebElement> Fingerprintimagedisplay = tenantdevicemanagerpageobjects.getcomponents("Fingerprint Image Display Mode");
			
			util.click(Fingerprintimagedisplay.get(0));

			tenantdevicemanagerpageobjects.getinputfields("enrollmentThreshold").sendKeys("65");
			
			tenantdevicemanagerpageobjects.getinputfields("matchThreshold").sendKeys("58");

			tenantdevicemanagerpageobjects.getinputfields("trialTimesForMatching").sendKeys("1");
			
			util.click(tenantdevicemanagerpageobjects.getpopupbuttonnamewithlabel("Thermal Module Setup","Save",2));
			
			util.click(tenantdevicemanagerpageobjects.getpopupbuttonname("Confirmation","Yes"));			
			
			List<WebElement> EnableAccessControl = tenantdevicemanagerpageobjects.getcomponents("Enable Access Control");
			
			util.click(EnableAccessControl.get(0));
			
			List<WebElement> EnableRelay1 = tenantdevicemanagerpageobjects.getcomponents("Enable Relay1");
			
			List<WebElement> EnableRelay2 = tenantdevicemanagerpageobjects.getcomponents("Enable Relay2");
			
			wait.until(ExpectedConditions.visibilityOf(EnableRelay2.get(0)));
			
			util.click(EnableRelay2.get(0));
			
			tenantdevicemanagerpageobjects.getinputfields("relayTimeout").sendKeys("10");

			util.click(tenantdevicemanagerpageobjects.getpopupbuttonnamewithlabel("Thermal Module Setup","Save",3));
			
			
			util.click(tenantdevicemanagerpageobjects.getpopupbuttonname("Confirmation","Yes"));			
			
			List<WebElement> EnableFacialDetection = tenantdevicemanagerpageobjects.getcomponents("Enable Facial Detection");
			
			util.click(EnableFacialDetection.get(0));

			tenantdevicemanagerpageobjects.getSlidebars("Enrollment Threshold", 1);
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getSlidebars("Face Recognition Threshold", 1).isDisplayed());
			
			List<WebElement> AcceptMaskFailurePunches = tenantdevicemanagerpageobjects.getcomponents("Accept Mask Failure Punches");
			
			util.click(AcceptMaskFailurePunches.get(0));

			 List<WebElement> FaceRecognitionWithMask = tenantdevicemanagerpageobjects.getcomponents("Face Recognition With Mask");
           
			util.click(FaceRecognitionWithMask.get(0));

			tenantdevicemanagerpageobjects.getdropdownfields("punchActionWhenMaskAbsent_label");
			
			util.click(tenantdevicemanagerpageobjects.getpopupbuttonnamewithlabel("Thermal Module Setup","Save",1));
			
			util.click(tenantdevicemanagerpageobjects.getpopupbuttonname("Confirmation","Yes"));
			
			List<WebElement> RFIDReader = tenantdevicemanagerpageobjects.getcomponents("RFID Reader");
			 
			util.click(RFIDReader.get(0));

			List <WebElement> SmartCardReader = tenantdevicemanagerpageobjects.getcomponents("Smart Card Reader");
				 
			util.click(SmartCardReader.get(0));

					
			List<WebElement> MagneticReader = tenantdevicemanagerpageobjects.getcomponents("Magnetic Reader");
				
			util.click( MagneticReader.get(0));

			 List<WebElement> BarcodeReader = tenantdevicemanagerpageobjects.getcomponents("Barcode Reader");
				 
			util.click(BarcodeReader.get(0));

			util.click(tenantdevicemanagerpageobjects.getpopupbuttonnamewithlabel("Facial Detection Setup","Save",2));
			
			util.click(tenantdevicemanagerpageobjects.getpopupbuttonname("Confirmation","Yes"));
			
			
				
				//Wiegand Setup
				
				Assert.assertTrue(tenantdevicemanagerpageobjects.getdropdownfields("cardFormat_label").isDisplayed());
				
				Assert.assertTrue(tenantdevicemanagerpageobjects.getpopupbuttonnamewithlabel("Facial Detection Setup","Save",3).isDisplayed());
				
				//Smart Card Setup
				
				tenantdevicemanagerpageobjects.getinputfields("startBit1").sendKeys("5");
				
				tenantdevicemanagerpageobjects.getinputfields("endBit1").sendKeys("10");
				
				wait.until(ExpectedConditions.visibilityOf(tenantdevicemanagerpageobjects.getpopupbuttonnamewithlabel("Facial Detection Setup","Save",4)));
				
				Thread.sleep(1000);
				
				util.click(tenantdevicemanagerpageobjects.getpopupbuttonnamewithlabel("Facial Detection Setup","Save",4));
				
				util.click(tenantdevicemanagerpageobjects.getpopupbuttonname("Confirmation","Yes"));
				
				Thread.sleep(3000);
				
				//Magnetic Card Setup
				
				List<WebElement> TruncateCardNumber = tenantdevicemanagerpageobjects.getcomponents("Truncate Card Number");
				
				
				util.click(TruncateCardNumber.get(0));

				tenantdevicemanagerpageobjects.getinputfields("startPosition").sendKeys("5");
				
				tenantdevicemanagerpageobjects.getinputfields("cardSize").sendKeys("10");
				
				util.click(tenantdevicemanagerpageobjects.getpopupbuttonnamewithlabel("Facial Detection Setup","Save",5));
				
				util.click(tenantdevicemanagerpageobjects.getpopupbuttonname("Confirmation","Yes"));

				Thread.sleep(2000);

				
				//BarCode Setup
				
				List<WebElement> barcode = tenantdevicemanagerpageobjects.getrespectivesection("truncateCardNumber1");
				
				Thread.sleep(2000);
				
				util.click(barcode.get(0));
				
				
				tenantdevicemanagerpageobjects.getinputfields("startPosition1").sendKeys("10");
				
				tenantdevicemanagerpageobjects.getinputfields("cardSize1").sendKeys("10");
				
				util.click(tenantdevicemanagerpageobjects.getpopupbuttonnamewithlabel("Facial Detection Setup","Save",6));
				
				util.click(tenantdevicemanagerpageobjects.getpopupbuttonname("Confirmation","Yes"));

				
				
				//Enable Photo Capture
				
				List<WebElement> EnablePhotoCapture = tenantdevicemanagerpageobjects.getcomponents("Enable Photo Capture");
				
				util.click(EnablePhotoCapture.get(0));

				List<WebElement> DisplayPreview = tenantdevicemanagerpageobjects.getcomponents("Display Preview");
				
				util.click(DisplayPreview.get(0));

				tenantdevicemanagerpageobjects.getinputfields("previewTimeout").sendKeys("6");
				
				
				util.click(tenantdevicemanagerpageobjects.getpopupbuttonnamewithlabel("Facial Detection Setup","Save",7));
				
				util.click(tenantdevicemanagerpageobjects.getpopupbuttonname("Confirmation","Yes"));

				
				util.click(deviceoperationspageobjects.getButtons("Save All"));
				
				util.click(tenantdevicemanagerpageobjects.getpopupbuttonname("Confirmation","Yes"));
				
				Thread.sleep(2000);
			
		}
		
		@Then("^I verify all the components in clock attendance rule setup$")
		public void I_verify_all_the_components_in_ClockAttendanceRule_setup() throws InterruptedException
		{
			
			
			
			List<WebElement> EnableFastPunch = tenantdevicemanagerpageobjects.getcomponents("Enable Fast Punch");
			
			util.Scroll(EnableFastPunch.get(0));
			
			Thread.sleep(2000);
			
			util.click(EnableFastPunch.get(0));
			
			for(WebElement ele:EnableFastPunch)
			{
								
			Assert.assertTrue(ele.isDisplayed());
								
			
			}
			
			List<WebElement> EnableTimeandLaborTrackingCode = tenantdevicemanagerpageobjects.getcomponents("Enable Time and Labor Tracking Code");
			
			for(WebElement ele:EnableTimeandLaborTrackingCode)
			{
								
			Assert.assertTrue(ele.isDisplayed());
								
			
			}
			
		      List<WebElement> level=tenantdevicemanagerpageobjects.getselectlevelDropdown();
		      
		      for(WebElement ele:level)
				{
									
				Assert.assertTrue(ele.isDisplayed());
									
				
				}
		      
		      List<WebElement> canbeskipped=tenantdevicemanagerpageobjects.getcanbeskippedcheckbox();
		      
		      for(WebElement ele:canbeskipped)
				{
									
				Assert.assertTrue(ele.isDisplayed());
									
				
				}
		      
		      Assert.assertTrue(tenantdevicemanagerpageobjects.getinputfields("defaultPunch").isDisplayed());
		      
		      List<WebElement> AttendanceStateCalculator = tenantdevicemanagerpageobjects.getcomponents("Attendance State Calculator:");
				
				for(WebElement ele:AttendanceStateCalculator)
				{
									
				Assert.assertTrue(ele.isDisplayed());
									
				
				}
				
				Assert.assertTrue(tenantdevicemanagerpageobjects.getdropdownfields("fastPunchMode_label").isDisplayed());
				
				Assert.assertTrue(tenantdevicemanagerpageobjects.getdropdownfields("attStateRule_label").isDisplayed());
				
				Assert.assertTrue(tenantdevicemanagerpageobjects.getcheckbox("Display Personal Message:").isDisplayed());
				
				//meal Lockout
				
				List<WebElement> MealLockout = tenantdevicemanagerpageobjects.getcomponents("Meal Lockout:");
				
				util.click(MealLockout.get(0));
				
				
				for(WebElement ele:MealLockout)
				{
									
				Assert.assertTrue(ele.isDisplayed());
									
				
				}
				
				Thread.sleep(2000);
				
				Assert.assertTrue(tenantdevicemanagerpageobjects.getinputfields("mealLockOut").isDisplayed());
				 
				 List<WebElement> MealLockoutWithAttestation = tenantdevicemanagerpageobjects.getcomponents("Meal Lockout With Attestation:");
					
					for(WebElement ele:MealLockoutWithAttestation)
					{
										
					Assert.assertTrue(ele.isDisplayed());
										
					
					}
					
					Assert.assertTrue(tenantdevicemanagerpageobjects.getcheckbox("Log Meal/Break Lokckout Punch Data").isDisplayed());
					
					 List<WebElement> ShiftScheduleLockout = tenantdevicemanagerpageobjects.getcomponents("Shift Schedule Lockout:");
					 
					 util.click(ShiftScheduleLockout.get(0));
					 
					 Thread.sleep(2000);
						
						for(WebElement ele:ShiftScheduleLockout)
						{
											
						Assert.assertTrue(ele.isDisplayed());
											
						
						}
			
						 Assert.assertTrue(tenantdevicemanagerpageobjects.getinputfields("shiftStartPeriod").isDisplayed());
						 
						 Assert.assertTrue(tenantdevicemanagerpageobjects.getinputfields("shiftEndPeriod").isDisplayed());
						 
						 Assert.assertTrue(tenantdevicemanagerpageobjects.getcheckbox("Log Schedule Locked-Out Punch Data").isDisplayed());
						 
						 Assert.assertTrue(tenantdevicemanagerpageobjects.getdropdownfields("shiftDataUnavailablePunchAction1_label").isDisplayed());
						 
						 List<WebElement> EnableGlobalLockoutOverride = tenantdevicemanagerpageobjects.getcomponents("Enable Global Lockout Override");
						 
						 util.click(EnableGlobalLockoutOverride.get(0));
							
							for(WebElement ele:EnableGlobalLockoutOverride)
							{
												
							Assert.assertTrue(ele.isDisplayed());
												
							
							}
							
							 Assert.assertTrue(tenantdevicemanagerpageobjects.getinputfields("lockoutOverrideStartTime1_input").isDisplayed());
							 
							 Assert.assertTrue(tenantdevicemanagerpageobjects.getinputfields("lockoutOverrideEndTime1_input").isDisplayed());
							 
							 //Attestation
							 
							 Assert.assertTrue(tenantdevicemanagerpageobjects.getdropdownfields("fingerprintAttestation_label").isDisplayed());
							 
							 Assert.assertTrue(tenantdevicemanagerpageobjects.getdropdownfields("faceAttestation_label").isDisplayed());

							 List<WebElement> AcceptAttestationRejectedPunch = tenantdevicemanagerpageobjects.getcomponents("Accept Attestation Rejected Punch");
								
								
							 List<WebElement> ShowAttestationOnlyOncePerDay = tenantdevicemanagerpageobjects.getcomponents("Show Attestation Only Once Per Day");
									
									
							List<WebElement> EnableGeneralAttestation = tenantdevicemanagerpageobjects.getcomponents("Enable General Attestation");
									
									
									
									//Other Settings
									
									
						 Assert.assertTrue(tenantdevicemanagerpageobjects.getinputfields("consPunchLockOut").isDisplayed());
						 
						 Assert.assertTrue(tenantdevicemanagerpageobjects.getcheckbox("Log Duplicate Punch Lockout").isDisplayed());
						 
						 Assert.assertTrue(tenantdevicemanagerpageobjects.getinputfields("accessibleTimeOfPlanList").isDisplayed());
						 
						 List<WebElement> LogVerificationFailedPunchData = tenantdevicemanagerpageobjects.getcomponents("Log 1.1 Verification Failed Punch Data");
							
						 for(WebElement ele:LogVerificationFailedPunchData)
							{
												
							Assert.assertTrue(ele.isDisplayed());
												
							
							}
						 
						 List<WebElement> EnableFastPunchPhotoCapture = tenantdevicemanagerpageobjects.getcomponents("Enable Fast Punch Photo Capture");
							
						 for(WebElement ele:EnableFastPunchPhotoCapture)
							{
												
							Assert.assertTrue(ele.isDisplayed());
												
							
							}
						 
						 List<WebElement> DenyOfflineFastPunch = tenantdevicemanagerpageobjects.getcomponents("Deny Offline FastPunch");
							
						 for(WebElement ele:DenyOfflineFastPunch)
							{
												
							Assert.assertTrue(ele.isDisplayed());
												
							
							}
						 
						 List<WebElement> ShowPhotoPreviewOnPunchFeedback = tenantdevicemanagerpageobjects.getcomponents("Show Photo Preview OnPunch Feedback");
							
						 for(WebElement ele:ShowPhotoPreviewOnPunchFeedback )
							{
												
							Assert.assertTrue(ele.isDisplayed());
												
							
							}
						 
						 //Verification Rules
						 
						 List<WebElement> EnforceVerificationMode = tenantdevicemanagerpageobjects.getcomponents("Enforce 1:1 Verification Mode");
						 
						 for(WebElement ele:EnforceVerificationMode )
							{
												
							Assert.assertTrue(ele.isDisplayed());
												
							
							}
						 List<WebElement> EnableClockLevelVerification = tenantdevicemanagerpageobjects.getcomponents("Enable Clock Level Verification");
						 
						 for(WebElement ele:EnableClockLevelVerification)
							{
												
							Assert.assertTrue(ele.isDisplayed());
												
							
							}
						 
						 Assert.assertTrue(tenantdevicemanagerpageobjects.getdropdownfields("verifyMode_label").isDisplayed());
						 
						 Assert.assertTrue(deviceoperationspageobjects.getButtons("Save as Preset").isDisplayed());
						 
						 Assert.assertTrue(deviceoperationspageobjects.getButtons("Load from Preset").isDisplayed());
						 
						 Assert.assertTrue(tenantdevicemanagerpageobjects.getclocksetupsavebtn().isDisplayed());
						 
						 
						 
			}
		
		
		@Then("^I configure clock attendance rule setup and save$")
		public void I_configure_clock_attendance_rule_setup_and_save() throws InterruptedException
		{
			
			List<WebElement> EnableFastPunch = tenantdevicemanagerpageobjects.getcomponents("Enable Fast Punch");
			
			util.Scroll(EnableFastPunch.get(0));
			
			Thread.sleep(2000);
			
			util.click(EnableFastPunch.get(0));
			
			List<WebElement> EnableTimeandLaborTrackingCode = tenantdevicemanagerpageobjects.getcomponents("Enable Time and Labor Tracking Code");
			
			Thread.sleep(2000);
			
			util.click(EnableTimeandLaborTrackingCode.get(0));
			
			List<WebElement> level=tenantdevicemanagerpageobjects.getselectlevelDropdown();
		      
		    List<WebElement> canbeskipped=tenantdevicemanagerpageobjects.getcanbeskippedcheckbox();
		      
		    tenantdevicemanagerpageobjects.getinputfields("defaultPunch").sendKeys("120");
		      
		    List<WebElement> AttendanceStateCalculator = tenantdevicemanagerpageobjects.getcomponents("Attendance State Calculator:");
				
			Assert.assertTrue(tenantdevicemanagerpageobjects.getdropdownfields("fastPunchMode_label").isDisplayed());
				
			Assert.assertTrue(tenantdevicemanagerpageobjects.getdropdownfields("attStateRule_label").isDisplayed());
				
			Assert.assertTrue(tenantdevicemanagerpageobjects.getcheckbox("Display Personal Message:").isDisplayed());
				
				//meal Lockout
				
				List<WebElement> MealLockout = tenantdevicemanagerpageobjects.getcomponents("Meal Lockout:");
				
				util.click(MealLockout.get(0));
				
				Thread.sleep(2000);
				
				tenantdevicemanagerpageobjects.getinputfields("mealLockOut").sendKeys("");
				 
				List<WebElement> MealLockoutWithAttestation = tenantdevicemanagerpageobjects.getcomponents("Meal Lockout With Attestation:");
				
				util.click(MealLockoutWithAttestation.get(0));
					
				util.click(tenantdevicemanagerpageobjects.getcheckbox("Log Meal/Break Lokckout Punch Data"));				
					 
				List<WebElement> ShiftScheduleLockout = tenantdevicemanagerpageobjects.getcomponents("Shift Schedule Lockout:");
					 
				util.click(ShiftScheduleLockout.get(0));
					 
				Thread.sleep(2000);
						
				tenantdevicemanagerpageobjects.getinputfields("shiftStartPeriod").sendKeys("10");
						 
				tenantdevicemanagerpageobjects.getinputfields("shiftEndPeriod").sendKeys("10");
						 
				util.click(tenantdevicemanagerpageobjects.getcheckbox("Log Schedule Locked-Out Punch Data"));
						 
				tenantdevicemanagerpageobjects.getdropdownfields("shiftDataUnavailablePunchAction1_label");
						 
				List<WebElement> EnableGlobalLockoutOverride = tenantdevicemanagerpageobjects.getcomponents("Enable Global Lockout Override");
						 
				util.click(EnableGlobalLockoutOverride.get(0));
				
				Thread.sleep(2000);
				
				tenantdevicemanagerpageobjects.getinputfields("lockoutOverrideStartTime1_input").sendKeys(Keys.CONTROL+"A");
				
				tenantdevicemanagerpageobjects.getinputfields("lockoutOverrideStartTime1_input").sendKeys(Keys.DELETE);

				tenantdevicemanagerpageobjects.getinputfields("lockoutOverrideStartTime1_input").sendKeys("01:30");	
				
				tenantdevicemanagerpageobjects.getinputfields("lockoutOverrideEndTime1_input").sendKeys(Keys.CONTROL+"A");
				
				tenantdevicemanagerpageobjects.getinputfields("lockoutOverrideEndTime1_input").sendKeys(Keys.DELETE);

				tenantdevicemanagerpageobjects.getinputfields("lockoutOverrideEndTime1_input").sendKeys("02:30");
							 
				 //Attestation
							 
				tenantdevicemanagerpageobjects.getdropdownfields("fingerprintAttestation_label");
							 
				tenantdevicemanagerpageobjects.getdropdownfields("faceAttestation_label");

				List<WebElement> AcceptAttestationRejectedPunch = tenantdevicemanagerpageobjects.getcomponents("Accept Attestation Rejected Punch");
								
				List<WebElement> ShowAttestationOnlyOncePerDay = tenantdevicemanagerpageobjects.getcomponents("Show Attestation Only Once Per Day");
									
				List<WebElement> EnableGeneralAttestation = tenantdevicemanagerpageobjects.getcomponents("Enable General Attestation");
									
				//Other Settings
									
				tenantdevicemanagerpageobjects.getinputfields("consPunchLockOut").sendKeys("10");
						 
				util.click(tenantdevicemanagerpageobjects.getcheckbox("Log Duplicate Punch Lockout"));
						 
				tenantdevicemanagerpageobjects.getinputfields("accessibleTimeOfPlanList").sendKeys("10");
						 
				List<WebElement> LogVerificationFailedPunchData = tenantdevicemanagerpageobjects.getcomponents("Log 1.1 Verification Failed Punch Data");
				
				util.click(LogVerificationFailedPunchData.get(0));
							
				List<WebElement> EnableFastPunchPhotoCapture = tenantdevicemanagerpageobjects.getcomponents("Enable Fast Punch Photo Capture");
				
				util.click(EnableFastPunchPhotoCapture.get(0));
							
				List<WebElement> DenyOfflineFastPunch = tenantdevicemanagerpageobjects.getcomponents("Deny Offline FastPunch");
							
				List<WebElement> ShowPhotoPreviewOnPunchFeedback = tenantdevicemanagerpageobjects.getcomponents("Show Photo Preview OnPunch Feedback");
				
				util.click(ShowPhotoPreviewOnPunchFeedback.get(0));
							
				 //Verification Rules
						 
				List<WebElement> EnforceVerificationMode = tenantdevicemanagerpageobjects.getcomponents("Enforce 1:1 Verification Mode");
				
				util.click(EnforceVerificationMode.get(0));
						 
				List<WebElement> EnableClockLevelVerification = tenantdevicemanagerpageobjects.getcomponents("Enable Clock Level Verification");
				
				util.click(EnableClockLevelVerification.get(0));
						 
				util.click(tenantdevicemanagerpageobjects.getclocksetupsavebtn());
				
				util.click(tenantdevicemanagerpageobjects.getpopupbuttonname("Confirmation","Yes"));
				
				Thread.sleep(3000);

						 
		}
		
		@Then("I configure additional settings and save")
		public void I_configure_additional_settings_and_save() throws InterruptedException
		{
			
			util.Scroll( tenantdevicemanagerpageobjects.getinputfields("dlatitude"));
			
			Thread.sleep(2000);
			
			tenantdevicemanagerpageobjects.getinputfields("dlatitude").sendKeys("1.0002");
			 
			tenantdevicemanagerpageobjects.getinputfields("dlongitude").sendKeys("1.0003");
			
			util.click(tenantdevicemanagerpageobjects.getadditionalsetupsavebtn());			 
			
			util.click(tenantdevicemanagerpageobjects.getpopupbuttonname("Confirmation","Yes"));

			 
		}
		
		@Then("I configure device basic configuration and save")
		public void I_configure_device_basic_configuration_and_save() throws InterruptedException
		{
			util.Scroll(tenantdevicemanagerpageobjects.getdropdownfields("deviceTemplate_label"));
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getdropdownfields("deviceTemplate_label").isDisplayed());
			
			util.Scroll(tenantdevicemanagerpageobjects.getdropdownfields("devTimeZone_label"));
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getdropdownfields("devTimeZone_label").isDisplayed());
			
			Assert.assertTrue(tenantdevicemanagerpageobjects.getdropdownfields("deviceLanguage_label").isDisplayed());
			
			util.sendtext(tenantdevicemanagerpageobjects.getinputfields("pushDelay"),"5");
			
			util.sendtext(tenantdevicemanagerpageobjects.getinputfields("pushTimeout"),"5");
			
			util.sendtext(tenantdevicemanagerpageobjects.getinputfields("pushSyncTime"),"5");
			
			util.sendtext(tenantdevicemanagerpageobjects.getinputfields("pushErrorDelay"),"5");
			
			util.click(tenantdevicemanagerpageobjects.getSaveandCancelbtn(2, "Save"));

			util.click(tenantdevicemanagerpageobjects.getpopupbuttonname("Confirmation","Yes"));

			
			
		}
		
		@Then("I configure message settings tab in device setup and save")
		public void I_configure_message_settings_tab_in_device_setup_and_save() throws InterruptedException
		{
			wait.until(ExpectedConditions.visibilityOf(tenantdevicemanagerpageobjects.getdropdownfields("messagePrivilege_label")));
			 
			util.Scroll(tenantdevicemanagerpageobjects.getdropdownfields("messagePrivilege_label"));
			
			 util.click(tenantdevicemanagerpageobjects.getdropdownfields("messagePrivilege_label"));
			 
			 Thread.sleep(2000);
			 
			 util.click(tenantdevicemanagerpageobjects.clickondropdownOption("Employee Can only Read & Reply. Create message not allowed"));
			 
			 util.Scroll(tenantdevicemanagerpageobjects.getinputfields("messageLockoutStartTime_input"));
			 
			 tenantdevicemanagerpageobjects.getinputfields("messageLockoutStartTime_input").sendKeys("01:00");
			 
			 tenantdevicemanagerpageobjects.getinputfields("messageLockoutEndTime_input").sendKeys("02:00");
			 
			 tenantdevicemanagerpageobjects.getinputfields("messageLockoutStartTime2_input").sendKeys("03:00");
			 
			 tenantdevicemanagerpageobjects.getinputfields("messageLockoutEndTime2_input").sendKeys("04:00");
			 
			 tenantdevicemanagerpageobjects.getinputfields("messageLockoutStartTime3_input").sendKeys("05:00");
			 
			 tenantdevicemanagerpageobjects.getinputfields("messageLockoutEndTime3_input").sendKeys("06:00");
			 
			 tenantdevicemanagerpageobjects.getinputfields("messageLockoutStartTime4_input").sendKeys("07:00");
			 
			 tenantdevicemanagerpageobjects.getinputfields("messageLockoutEndTime4_input").sendKeys("08:00");
			 
			 util.click(tenantdevicemanagerpageobjects.getmessagesavebtn());
			 
			util.click(tenantdevicemanagerpageobjects.getpopupbuttonname("Confirmation","Yes"));

			 
				}
		
		
		@Then("I add device subscription and save in device setup")
		public void I_add_device_subscription_and_save_in_device_setup() throws InterruptedException
		{
					I_click_on_add_subscription_button();
					
					Thread.sleep(2000);
			
					util.click(driver.findElement(tenantdevicemanagerpageobjects.getDevicesetupeventdropdown()));
					
					util.click(tenantdevicemanagerpageobjects.clickondropdownOption("LowTemperatureEvent"));
					
					tenantdevicemanagerpageobjects.gettextareafields(5).sendKeys("akshay@zkteco.in");
					
					util.click(tenantdevicemanagerpageobjects.getpopupbuttonname("Add/Edit Device Subscription","Save"));
					
					util.click(tenantdevicemanagerpageobjects.getpopupbuttonname("Confirmation","Yes"));
					
					Thread.sleep(2000);
					
					
					I_click_on_add_subscription_button();
					
					Thread.sleep(1000);

					util.click(driver.findElement(tenantdevicemanagerpageobjects.getDevicesetupeventdropdown()));
					
					util.click(tenantdevicemanagerpageobjects.clickondropdownOption("HighTemperatureEvent"));
					
					tenantdevicemanagerpageobjects.gettextareafields(5).sendKeys("akshay@zkteco.in");
					
					util.click(tenantdevicemanagerpageobjects.getpopupbuttonname("Add/Edit Device Subscription","Save"));


					util.click(tenantdevicemanagerpageobjects.getpopupbuttonname("Confirmation","Yes"));

			}

		
		
		@Then("I configure visitor module settings and save")
		public void I_configure_visitor_module_settings_and_save() throws InterruptedException
		{

			List<WebElement> EnableVisitorAttestationModule = tenantdevicemanagerpageobjects.getcomponents("Enable Visitor Attestation Module");
			 
			util.click(EnableVisitorAttestationModule.get(0));
			 
			Thread.sleep(2000);
			 
			List<WebElement> EnableVisitorPhotoCapture = tenantdevicemanagerpageobjects.getcomponents("Enable Visitor Photo Capture");
			
			util.click(EnableVisitorPhotoCapture.get(0));
			 
			List<WebElement> EnableEmployeeVisitorLog = tenantdevicemanagerpageobjects.getcomponents("Enable Employee Visitor Log");
			
			util.click(EnableEmployeeVisitorLog.get(0));
			
			util.click(tenantdevicemanagerpageobjects.getvisitormodulesavebtn());
			 
			util.click(tenantdevicemanagerpageobjects.getpopupbuttonname("Confirmation","Yes"));	
			

			
		}
		

		@Then("I click on save as preset button")
		public void I_click_on_save_as_preset_button() throws InterruptedException
		{
			util.click(deviceoperationspageobjects.getButtons("Save as Preset"));
			
			
		}
		
		@Then("I enter all the details for saving the preset")
		public void I_enter_all_the_details_for_saving_the_preset() throws InterruptedException
		{
			util.click(deviceoperationspageobjects.getButtons("Save as Preset"));
			
			Thread.sleep(2000);
			
			tenantdevicemanagerpageobjects.getinputfields("presetName").sendKeys(TemplateName);
			
			tenantdevicemanagerpageobjects.gettextareafields(2).sendKeys("test");
			
			util.click(tenantdevicemanagerpageobjects.getpopupbuttonname("Clock Attendance Rule - Save Preset","Save"));	
			
			Thread.sleep(2000);

			
			util.click(tenantdevicemanagerpageobjects.getpopupbuttonname("Confirmation","Yes"));	
			
			
		}
		
		@Then("I validate created template is displayed in Load from preset window")
		public void I_validate_created_template_is_displayed_in_Load_from_preset_window() throws InterruptedException
		{
			util.click(deviceoperationspageobjects.getButtons("Load from Preset"));
			
			Thread.sleep(1000);

			
			List<WebElement> table = driver.findElements(tenantdevicemanagerpageobjects.getLoadfrompresettable());
			
			for(WebElement ele:table)
			{
				System.out.println(ele.getText());
				if(ele.getText().equals(TemplateName))
				{
				Assert.assertEquals(ele.getText(), TemplateName);
				
				System.out.println("template present");
				break;
				}
			}
			
		}
		
		
		@Then("I configure clock function provision and save")
		public void I_configure_clock_function_provision_and_save() throws InterruptedException
		{
			
			
			util.Scroll(driver.findElement(tenantdevicemanagerpageobjects.getAddnewicon()));
			
			util.click(driver.findElement(tenantdevicemanagerpageobjects.getAddnewicon()));
			
			
			util.click(tenantdevicemanagerpageobjects.getclockfunctionfields("Punch Function Type:"));
			
			util.click(tenantdevicemanagerpageobjects.clickondropdownOption("Attendance Status"));
			
			util.sendtext(tenantdevicemanagerpageobjects.getclockfunctioninputfields("Punch Event Code:"),"0");
			
			tenantdevicemanagerpageobjects.getclockfunctioninputfields("Punch Event Label:").sendKeys("Check In");
			
			String text = tenantdevicemanagerpageobjects.getclockfunctioninputfields("Punch Event Label:").getAttribute("value");
			
			util.click(tenantdevicemanagerpageobjects.getclockfunctionfields("Menu Icon:"));
			
			util.click(tenantdevicemanagerpageobjects.clickondropdownOption("clock_in"));
			
			List<WebElement> AddClosePunch = tenantdevicemanagerpageobjects.getcomponents("Add Close Punch:");
			
			util.click(AddClosePunch.get(0));
			
			tenantdevicemanagerpageobjects.getclockfunctioninputfields("Close Punch Event Code:").sendKeys("1");
			
			List<WebElement> DisplayPersonnelMessage = tenantdevicemanagerpageobjects.getcomponents("Display Personnel Message:");
			
			util.click(DisplayPersonnelMessage.get(0));
			
			util.click(tenantdevicemanagerpageobjects.getplusicon("Time and Labor Tracking Code Setup"));
			
			util.Scroll(tenantdevicemanagerpageobjects.getclockfunctionfields("Level 1:"));
			
			tenantdevicemanagerpageobjects.getclockfunctionfields("Level 1:").click();
			
			Thread.sleep(1000);
			
			List<WebElement> options = tenantdevicemanagerpageobjects.getclockfunctionleveldropdownfieldsoption("Level 1:");
			
			for(WebElement ele:options)
			{
				
				if(ele.getText().equals("DEPARTMENT"))
				{
					
					ele.click();
				}
			}
			
			util.click(tenantdevicemanagerpageobjects.getplusicon("Punch Rule Setup"));
			
			util.click(tenantdevicemanagerpageobjects.getclockfunctionfields("Rule 1:"));
			
			util.click(tenantdevicemanagerpageobjects.clickondropdownOption("Duplicate Punch"));
			
			util.Scroll(tenantdevicemanagerpageobjects.getclockfunctionfields("Attestation Profile"));
			
			tenantdevicemanagerpageobjects.getclockfunctionfields("Attestation Profile").click();
			
			Thread.sleep(1000);
			
			List<WebElement> options1 = tenantdevicemanagerpageobjects.getclockfunctionleveldropdownfieldsoption("Attestation Profile");
			
			for(WebElement ele:options1)
			{
				
				if(ele.getText().equals("Health Profile"))
				{
					
					ele.click();
				}
			}
			
			
			util.click(tenantdevicemanagerpageobjects.getpopupbuttonnamewithcontains("Clock Punch Menu Setup","Save"));
			
			util.click(tenantdevicemanagerpageobjects.getpopupbuttonname("Confirmation","Yes"));	
			
			String functionkeytext = tenantdevicemanagerpageobjects.getfunctionkeys("Check In").getText();
			
			Assert.assertEquals(text,functionkeytext);
			
				
		}
		
		@Then("^I click on Sync to device button$")
		public void I_click_on_Sync_to_device_button() throws InterruptedException
		{
			util.Scroll(deviceoperationspageobjects.getButtonswithindex("Sync To Device", 2));
			
			util.click(deviceoperationspageobjects.getButtonswithindex("Sync To Device", 2));
			
			util.click(tenantdevicemanagerpageobjects.getpopupbuttonname("Confirmation","Yes"));
			
			Thread.sleep(2000);

			
		}
		@Then("^I enter devicesn into search field for verifying command trigger in device monitor$")
		public void I_enter_devicesn_into_search_field_for_verifying_command_trigger_in_device_monitor() throws InterruptedException
		{
			util.sendtext(driver.findElement(deviceoperationspageobjects.getSearchtextfield()), devicesn);
			//driver.findElement(deviceoperationspageobjects.getSearchtextfield()).sendKeys("CGP5201160105");
		}
		
		@Then("I click on message queue tab")
		public void I_click_on_message_queue_tab() throws InterruptedException
		{
			Thread.sleep(1000);
			util.click(hostHusersPageObjects.getTabs("Message Queue"));
			
			
		}
		
		@Then("^I verify the sent command from device operation is displayed in device monitor message queue$")
		public void I_verify_the_sent_command_from_device_operation_is_displayed_in_device_monitor_message_queue() throws InterruptedException
		{
			
			I_click_on_message_queue_tab();
			
			Thread.sleep(3000);
	
			
			util.click(deviceoperationspageobjects.getButtonswithindex("Refresh", 2));
			
			
			Thread.sleep(3000);
			
			List<WebElement> value = driver.findElements(deviceoperationspageobjects.getMessagequeuetable());
			
			for(WebElement ele:value)
			{
				
			if(ele.getText().contains("DATA UPDATE EMPLOYEE"))
						{
							System.out.println("sent command is displayed in device monitor");
						}
			else if(ele.getText().contains("21520"))
			{
				System.out.println("sent command is displayed in device monitor");
				
			}
			
			else if(ele.getText().contains("DATA UPDATE ORG CODES"))
			{
				System.out.println("Sent Labor code is in message queue");
				
			}
			else if(ele.getText().contains("fp_save_confirmation_message"))
			{
				System.out.println("Sent fp attestation is in message queue");
			}
			
			else if(ele.getText().contains("face_save_confirmation_message"))
			{
				System.out.println("Sent face attestation is in message queue");
			}
			
			else if(ele.getText().contains("Health Profile"))
			{
				System.out.println("Sent General attestation is in message queue");
			}
			
			else if(ele.getText().contains("DATA UPDATE BELL SCHEDULE"))
			{
				System.out.println("Sent Bell schedule is in message queue");
			}
			
			else if(ele.getText().contains("DATA DELETE BELL SCHEDULE"))
			{
				System.out.println("Delete bell schedule command is sent to clock successfully");
			}
			
			else if(ele.getText().contains("BROADCAST PUBLIC MESSAGE"))
			{
				System.out.println("broadcast public message command is sent to clock successfully");
			}
			
			else if(ele.getText().contains("INFO"))
			{
				System.out.println("Configuration Loaded successfully from device");
			}
			
			else if(ele.getText().contains("LOAD ATT BY DATE"))
			{
				System.out.println("attendance data loaded by date successfully");
			}
			else if(ele.getText().contains("RESUBMIT OFFLINE ATT LOG"))
			{
				System.out.println("offline attendance data successfully resubmitted from clock");
			}
			else if(ele.getText().contains("LOAD ENROLLED EMPLOYEE"))
			{
				System.out.println("Enrolled employee list loaded successfully");
			}
			else if(ele.getText().contains("EMPLOYEE_NUMBER\":\"21540\""))
			{
				System.out.println("Able to view the employee data by employee no");
			}
			else if(ele.getText().contains("VIEW LABOR CODE"))
			{
				System.out.println("Command has been sent successfully to clock to view labor code");
			}
			else if(ele.getText().contains("SHEDULE LOCKOUT"))
			{
				
				
				logger.info("Overide Schedule lockout Command has been sent successfully to clock");
				
				
			}
			else if(ele.getText().contains("config set support_email akshay@zkteco.in"))
			{
				
				
				logger.info("Command sent successfully to clock through command line window");
				
				
			}
			
			
			
			
			}
			
			
			
			
		}
		
		@And("^I click on Device datasync sub module$")
		public void I_click_on_Device_datasync_sub_module()
		{
	 		util.clickonsubmodules("Device Data Sync");
			
			wait.until(ExpectedConditions.titleIs("Device Data Sync | ZK Data Collection services"));
			
		}
		
		@Then("^I validate user navigation to device data sync page$")
		public void I_validate_user_navigation_to_device_data_sync_page()
		{
			System.out.println(driver.getTitle());
			
			String Actual = driver.getTitle();
			
			Assert.assertEquals(Actual,property.getProperty("devicedatasync"));
		}
		
		 @Then("^I validate the sections present in the device data sync page$")
			public void I_validate_the_sections_present_in_the_device_data_sync_page()
			{
				
				Assert.assertTrue(deviceoperationspageobjects.getSections("Select Devices").isDisplayed());
				
				Assert.assertTrue(deviceoperationspageobjects.getSections("Sync Data").isDisplayed());
				
				Assert.assertTrue(driver.findElement(deviceoperationspageobjects.getDeviceListSection()).isDisplayed());
				
				Assert.assertTrue(driver.findElement(deviceoperationspageobjects.getDeviceRemoteOperationAdvancedsection()).isDisplayed());
				
				
			}
		 
		 @Then("I verify the components present in the select device section in device data sync page")
		 public void I_verify_the_components_present_in_the_select_device_section()
		 {
			 
			 Assert.assertTrue(driver.findElement(devicedataSyncPageObjects.getDeviceGroupDropdown()).isDisplayed());
			 
			 Assert.assertTrue(driver.findElement(devicedataSyncPageObjects.getDevicesnsearchtextfield()).isDisplayed());
			 
			 Assert.assertTrue(deviceoperationspageobjects.getButtons("Search").isDisplayed());

			 Assert.assertTrue(deviceoperationspageobjects.getButtons("Select Devices").isDisplayed());
			 
			 List<WebElement> columns = driver.findElements(devicedataSyncPageObjects.getDevicedatasynctablecolumns());
			 
			 for(WebElement ele:columns)
			 {
				 if(ele.getText().isEmpty())
				 {
					
				
				 }
				 
				 else {
					 
					 Assert.assertTrue(ele.isDisplayed());
					 
					 System.out.println(ele.getText());
				 }
				 
			 }
			 
			 Assert.assertTrue(driver.findElement(devicedataSyncPageObjects.getTotaldeviceselectedCount()).isDisplayed());
			 
			 }


	@Then("I filter the devices by device group and vaildate")
	public void I_filter_the_devices_by_device_group() throws InterruptedException
	{
		
		 driver.findElement(devicedataSyncPageObjects.getDeviceGroupDropdown()).click();
		 
		util.click(tenantdevicemanagerpageobjects.clickondropdownOption(groupname));
		
		util.click(deviceoperationspageobjects.getButtons("Search"));
		
		Thread.sleep(1000);
		
		List<WebElement> data = driver.findElements(devicedataSyncPageObjects.getDevicedatasynctableData());
		
		for(int i=0;i<data.size();i++)
		{
			Assert.assertEquals(data.get(i).getText(),devicegroupsn);
			
		}
		
		//Assert.assertTrue(driver.findElement(devicedataSyncPageObjects.getDevicesnsearchtextfield()).isDisplayed());
		
	}
	
	@Then("I enter the details with group and add the device")
	public void I_enter_the_details_with_group_and_add_the_device() throws InterruptedException
	{
		
		util.click(tenantdevicemanagerpageobjects.getdropdownfieldswithtext("Select a device group"));
		
		util.click(tenantdevicemanagerpageobjects.clickondropdownOption(groupname));
		
		Thread.sleep(2000);
		
		tenantdevicemanagerpageobjects.getdevicename(1).sendKeys(util.randomAlphabetic());
		
		devicegroupname=tenantdevicemanagerpageobjects.getdevicename(1).getAttribute("value");

		
		tenantdevicemanagerpageobjects.getdevicesn(1).sendKeys(util.randomAlphanumeric());
		
		devicegroupsn=tenantdevicemanagerpageobjects.getdevicesn(1).getAttribute("value");

		
		util.click(tenantdevicemanagerpageobjects.getSaveandCancelbtn(1, "Save"));
		
		
		
	}
	
	@Then("I filter the devices by device sn and vaildate in device data sync page")
	public void I_filter_the_devices_by_device_sn_and_vaildate_in_device_data_sync_page() throws InterruptedException
	{
		
		 driver.findElement(devicedataSyncPageObjects.getDeviceGroupDropdown()).click();
		 
	//	util.click(tenantdevicemanagerpageobjects.clickondropdownOption(GroupName));
		
		driver.findElement(devicedataSyncPageObjects.getDevicesnsearchtextfield()).sendKeys(devicesn);
		
		util.click(deviceoperationspageobjects.getButtons("Search"));
		
		Thread.sleep(1000);
		
		List<WebElement> data = driver.findElements(devicedataSyncPageObjects.getDevicedatasynctableData());
		
		for(int i=0;i<data.size();i++)
		{
			Assert.assertEquals(data.get(i).getText(),devicesn);
			
		}
			
		
	}
	
	@Then("I verify the selected device count is displayed properly in device data sync page")
	public void I_verify_the_selected_device_count_is_displayed_properly_in_device_data_sync_page() throws InterruptedException
	{
		
		driver.findElement(devicedataSyncPageObjects.getDevicedatasynctableallcheckbox()).click();
		
		util.click(deviceoperationspageobjects.getButtonswithindex("Select Devices",2));
		
		Thread.sleep(2000);
		
		String ele = driver.findElement(devicedataSyncPageObjects.getTotaldeviceselectedCount()).getText();
		
		StringBuilder myNumbers = new StringBuilder();
	    
		for (int i1 = 0; i1 < ele.length(); i1++)
	    {
	        if (Character.isDigit(ele.charAt(i1))) {
	            myNumbers.append(ele.charAt(i1));
	          
	        } 
	    }
	  
		String val = myNumbers.toString();
		
		int count = Integer.parseInt(val);
		
		List<WebElement> checkbox = driver.findElements(devicedataSyncPageObjects.getDevicedatasynctablecheckbox());
		
		int check = checkbox.size();
		
		Assert.assertEquals(count, check);
		
		
			
		
	}
	
	@Then("^I verfiy all the tabs in sync data section$")
	public void I_verfiy_all_the_tabs_in_sync_data_section()
	{
		
		Assert.assertTrue(hostHusersPageObjects.getTabs("Sync Employee").isDisplayed());
		
		Assert.assertTrue(hostHusersPageObjects.getTabs("Sync Time and Labor Data").isDisplayed());

		Assert.assertTrue(hostHusersPageObjects.getTabs("Sync Attestation").isDisplayed());

		Assert.assertTrue(hostHusersPageObjects.getTabs("Sync Shift Calendar").isDisplayed());
		
		Assert.assertTrue(hostHusersPageObjects.getTabs("Sync Bell Schedule").isDisplayed());


		
	}
	
	@Then("^I sync the Employee by selection in data sync page$")
	public void I_sync_the_Employee_by_selection_in_data_sync_page() throws InterruptedException
	{
		util.click(tenantdevicemanagerpageobjects.getdropdownfieldswithtext("Sync Employee by Selection"));
		
		util.sendtext(driver.findElement(devicedataSyncPageObjects.getQuicksearchtextfield()), "21520");
		
		driver.findElement(devicedataSyncPageObjects.getQuicksearchtextfield()).sendKeys(Keys.ENTER);
		
		Thread.sleep(2000);
		
		
		driver.findElement(devicedataSyncPageObjects.getEmployeeselectallcheckbox()).click();
		
		util.click(deviceoperationspageobjects.getButtons("Next"));
		
		util.click(deviceoperationspageobjects.getButtons("Sync Selected Employee"));
		
		Thread.sleep(2000);
		
		I_click_on_Yes_button() ;
		
		

		
	}
	
	@Then("^I enter random devicesn into search field$")
	public void I_enter_random_devicesn_name_into_search_field() throws InterruptedException
	{
		util.sendtext(driver.findElement(deviceoperationspageobjects.getSearchtextfield()), devicesn);
	}
	
	@Then("^I navigate to device monitor and validate the employee sync$")
	public void I_navigate_to_device_monitor_and_validate_the_employee_sync() throws InterruptedException
	{
		I_click_on_Device_Monitor_sub_module();
		
		I_enter_random_devicesn_name_into_search_field();	
		
		I_click_on_search_icon();
		
		I_select_the_searched_devices();
		
		
		I_verify_the_sent_command_from_device_operation_is_displayed_in_device_monitor_message_queue();
	}
	
	@Then("^I sync all the Employee by selection in data sync page$")
	public void I_sync_all_the_Employee_by_selection_in_data_sync_page() throws InterruptedException
	{
		
		util.click(deviceoperationspageobjects.getButtons("Direct Sync to Device"));
		
		I_click_on_Yes_button() ;
		
	}
	
	@Then("^I sync time and labor code to clock in data sync page$")
	public void I_sync_time_and_labor_code_to_clock_in_data_sync_page() throws InterruptedException
	{
		
		util.click(hostHusersPageObjects.getTabs("Sync Time and Labor Data"));
		
		util.click(driver.findElement(devicedataSyncPageObjects.getLabourCodedropdown()));
		
		util.click(tenantdevicemanagerpageobjects.clickondropdownOption("Department"));
		
		Thread.sleep(2000);
		
		util.click(driver.findElement(devicedataSyncPageObjects.getLaborCodeselectallcheckbox()));
		
		util.click(deviceoperationspageobjects.getButtons("Sync Time and Labor Data"));

		I_click_on_Yes_button() ;
		
	}
	
	@Then("^I sync finger bioattestation to clock in data sync page$")
	public void I_sync_finger_bioattestation_to_clock_in_data_sync_page() throws InterruptedException
	{
		
		util.click(hostHusersPageObjects.getTabs("Sync Attestation"));
		
		List<WebElement> type = driver.findElements(devicedataSyncPageObjects.getBioAttestationType());
		
		List<WebElement> btn = driver.findElements(devicedataSyncPageObjects.getSyncbtn());
		
		for(int i=0;i<type.size();i++)
		{
			if(type.get(i).getText().equals("Fingerprint"))
			{
				util.click(btn.get(i));
			}
		}
		
		I_click_on_Yes_button() ;
		
	}
	
	@Then("^I sync face bioattestation to clock in data sync page$")
	public void I_sync_face_bioattestation_to_clock_in_data_sync_page() throws InterruptedException
	{
		
		util.click(hostHusersPageObjects.getTabs("Sync Attestation"));
		
		List<WebElement> type = driver.findElements(devicedataSyncPageObjects.getBioAttestationType());
		
		List<WebElement> btn = driver.findElements(devicedataSyncPageObjects.getSyncbtn());
		
		for(int i=0;i<type.size();i++)
		{
			if(type.get(i).getText().equals("Face"))
			{
				util.click(btn.get(i));
			}
		}
		
		I_click_on_Yes_button() ;
		
	}
	
	@Then("^I sync general bioattestation to clock in data sync page$")
	public void I_sync_general_attestation_to_clock_in_data_sync_page() throws InterruptedException
	{
		util.click(hostHusersPageObjects.getTabs("Sync Attestation"));

		util.click(tenantdevicemanagerpageobjects.getdropdownfieldswithtext("Sync General Attestation"));
		
		List<WebElement> type = driver.findElements(devicedataSyncPageObjects.getGeneralAttestationProfile());
		
		List<WebElement> btn = driver.findElements(devicedataSyncPageObjects.getGeneralattsyncbtn());
		
		for(int i=0;i<type.size();i++)
		{
			if(type.get(i).getText().equals("Health Profile"))
			{
				util.click(btn.get(i));
			}
		}
		
		I_click_on_Yes_button() ;
		
	}
	
	@Then("^I sync bell schedule to clock in data sync page$")
	public void I_sync_bell_schedule_to_clock_in_data_sync_page() throws InterruptedException
	{
		util.click(hostHusersPageObjects.getTabs("Sync Bell Schedule"));

		
		List<WebElement> type = driver.findElements(devicedataSyncPageObjects.getBellSchedulename());
		
		List<WebElement> btn = driver.findElements(devicedataSyncPageObjects.getBellScheduleCheckbox());
		
		for(int i=0;i<type.size();i++)
		{
			if(type.get(i).getText().equals("Test 1"))
			{
				util.click(btn.get(i));
			}
		}
		
		util.click(deviceoperationspageobjects.getButtons("Sync to Selected Devices"));

		
		
		I_click_on_Yes_button() ;
		
	}
	
	@Then("^I delete individual bell schedule in clock in data sync page$")
	public void I_delete_individual_bell_schedule_in_clock_in_data_sync_page() throws InterruptedException
	{
		util.click(hostHusersPageObjects.getTabs("Sync Bell Schedule"));

		
		List<WebElement> type = driver.findElements(devicedataSyncPageObjects.getBellSchedulename());
		
		List<WebElement> btn = driver.findElements(devicedataSyncPageObjects.getBellScheduleCheckbox());
		
		for(int i=0;i<type.size();i++)
		{
			if(type.get(i).getText().equals("Test 1"))
			{
				util.click(btn.get(i));
			}
		}
		
		util.click(deviceoperationspageobjects.getButtons("Delete Selected Scheduled"));

		
		
		I_click_on_Yes_button() ;
		
	}
	
	@Then("^I delete all bell schedule in clock in data sync page$")
	public void I_delete_all_bell_schedule_in_clock_in_data_sync_page() throws InterruptedException
	{
		util.click(hostHusersPageObjects.getTabs("Sync Bell Schedule"));

		util.click(driver.findElement(devicedataSyncPageObjects.getSelectAllBellScheduleCheckbox()));
		
		util.click(deviceoperationspageobjects.getButtons("Delete All Scheduled"));

		I_click_on_Yes_button() ;
		
	}
	
	@Then("^I validate the sections present in the device operations tenant page$")
	public void I_validate_the_sections_present_in_the_device_operations_tenant_page()
	{
		
		Assert.assertTrue(deviceoperationspageobjects.getSections("Select Devices").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getSections("Device Remote Operation").isDisplayed());
		
		Assert.assertTrue(driver.findElement(deviceoperationspageobjects.getDeviceListSection()).isDisplayed());
		
		Assert.assertTrue(driver.findElement(deviceoperationspageobjects.getDeviceRemoteOperationAdvancedsection()).isDisplayed());
		
	}
	
	@Then("I verify the components present in the select device section in device operations page")
	 public void I_verify_the_components_present_in_the_select_device_section_in_device_operations_page()
	 {
		 
		 Assert.assertTrue(driver.findElement(devicedataSyncPageObjects.getDeviceGroupDropdown()).isDisplayed());
		 
		 Assert.assertTrue(driver.findElement(devicedataSyncPageObjects.getDevicesnsearchtextfield()).isDisplayed());
		 
		 Assert.assertTrue(deviceoperationspageobjects.getButtons("Search").isDisplayed());

		 Assert.assertTrue(deviceoperationspageobjects.getButtons("Select Devices").isDisplayed());
		 
		 List<WebElement> columns = driver.findElements(devicedataSyncPageObjects.getDevicedatasynctablecolumns());
		 
		 for(WebElement ele:columns)
		 {
			 if(ele.getText().isEmpty())
			 {
				
			
			 }
			 
			 else {
				 
				 Assert.assertTrue(ele.isDisplayed());
				 
				 System.out.println(ele.getText());
			 }
			 
		 }
		 
		 Assert.assertTrue(driver.findElement(devicedataSyncPageObjects.getTotaldeviceselectedCount()).isDisplayed());
		 
		 }


	@Then("^I verify all the device operations are present for Android device$")
	public void I_verify_all_the_device_operations_are_present_for_Android()
	{
		
		Assert.assertTrue(deviceoperationspageobjects.getButtons("Broadcast Public Message to Clock").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getButtons("Load Device Configuration").isDisplayed());

		Assert.assertTrue(deviceoperationspageobjects.getButtons("Load Attendance Data by Date").isDisplayed());

		Assert.assertTrue(deviceoperationspageobjects.getButtons("Resubmit Offline Attendance Data").isDisplayed());

		Assert.assertTrue(deviceoperationspageobjects.getButtons("Load Enrolled Employee list").isDisplayed());

		Assert.assertTrue(deviceoperationspageobjects.getButtons("View Employee Data By Employee No.").isDisplayed());

		Assert.assertTrue(deviceoperationspageobjects.getButtons("Upgrade Timepad App").isDisplayed());

		Assert.assertTrue(deviceoperationspageobjects.getButtons("Clean Device Storage").isDisplayed());

		Assert.assertTrue(deviceoperationspageobjects.getButtons("View Clock Time & Labor Code").isDisplayed());

		Assert.assertTrue(deviceoperationspageobjects.getButtons("Override Clock Schedule Lockout").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getButtons("Command Line Window").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getButtons("DCS Command Clean Up").isDisplayed());



	}
	
	@Then("I enter the details and add the linux device")
	public void I_enter_the_details_and_add_the_linux_device() throws InterruptedException
	{
		
		
		util.click(tenantdevicemanagerpageobjects.getdropdownfields("devicePlatformDropDown_label"));
		
		util.click(tenantdevicemanagerpageobjects.clickondropdownOption("LINUX"));
		
		Thread.sleep(1000);
		
		tenantdevicemanagerpageobjects.getdevicename(1).sendKeys(util.randomAlphabetic());
		
		devicename=tenantdevicemanagerpageobjects.getdevicename(1).getAttribute("value");

		
		tenantdevicemanagerpageobjects.getdevicesn(1).sendKeys(util.randomAlphanumeric());
		
		 devicesn = tenantdevicemanagerpageobjects.getdevicesn(1).getAttribute("value");
		
		util.click(tenantdevicemanagerpageobjects.getSaveandCancelbtn(1, "Save"));
		
		
		
	}
	
	@Then("^I verify all the device operations are present for Linux device$")
	public void I_verify_all_the_device_operations_are_present_for_Linux()
	{
		
		Assert.assertTrue(deviceoperationspageobjects.getButtons("BACKUP DEVICE CONFIGURE").isDisplayed());
		
		Assert.assertTrue(deviceoperationspageobjects.getButtons("BACKUP ATTENDANCE LOG").isDisplayed());

		Assert.assertTrue(deviceoperationspageobjects.getButtons("BACKUP EMPLOYEE INFO").isDisplayed());

		Assert.assertTrue(deviceoperationspageobjects.getButtons("UPGRADE FIRMWARE").isDisplayed());

		Assert.assertTrue(deviceoperationspageobjects.getButtons("CLEAN DEVICE ATTENDANCE LOG").isDisplayed());

		Assert.assertTrue(deviceoperationspageobjects.getButtons("CLEAN DEVICE DATA").isDisplayed());

		Assert.assertTrue(deviceoperationspageobjects.getButtons("REBOOT DEVICE").isDisplayed());

		Assert.assertTrue(deviceoperationspageobjects.getButtons("SUBMIT DEVICE COMMAND").isDisplayed());

	}
	
	@Then("^I broadcast public message to clock$")
	public void I_broadcast_public_message_to_clock()
	{
		util.click(deviceoperationspageobjects.getButtons("Broadcast Public Message to Clock"));
		
		util.click(devicedataSyncPageObjects.getBroadcastpublicmessageinputfields(1));
		
		util.click(driver.findElement(devicedataSyncPageObjects.getHighlightedDate()));
		
		util.sendtext(devicedataSyncPageObjects.getBroadcastpublicmessageinputfields(2), "10");
		
		util.sendtext(tenantdevicemanagerpageobjects.gettextareafields(1), "Hi Everyone");
		
		util.click(deviceoperationspageobjects.getButtons("Send"));
		
	}
	
	@Then("^I Load configuration from device$")
	public void I_Load_configuration_from_device() throws InterruptedException
	{
		util.click(deviceoperationspageobjects.getButtons("Load Device Configuration"));
		
		I_click_on_Yes_button() ;

		
	}
	
	@Then("^I Load Attendance Data by Date and validate$")
	public void I_Load_Attendance_Data_by_Date() throws InterruptedException
	{
		util.click(deviceoperationspageobjects.getButtons("Load Attendance Data by Date"));
		
		devicedataSyncPageObjects.getdateinputfields("From Date: ").sendKeys(property.getProperty("Fromdate"));
		
		devicedataSyncPageObjects.getdateinputfields("To Date: ").sendKeys(property.getProperty("Todate"));
		
		devicedataSyncPageObjects.gettimeinputfields("Time : ",1).sendKeys(property.getProperty("FromTime"));

		devicedataSyncPageObjects.gettimeinputfields("Time : ",2).sendKeys(property.getProperty("ToTime"));

		util.click(deviceoperationspageobjects.getButtons("Send"));

		
	}
	
	@Then("^I Resubmit offline attendance data from clock$")
	public void I_Resubmit_offline_attendance_data_from_clock() throws InterruptedException
	{
		util.click(deviceoperationspageobjects.getButtons("Resubmit Offline Attendance Data"));
		
		I_click_on_Yes_button() ;

	}
	
	@Then("^I load enrolled employee list from clock$")
	public void I_load_enrolled_employee_list_from_clock() throws InterruptedException
	{
		util.click(deviceoperationspageobjects.getButtons("Load Enrolled Employee list"));
		
		I_click_on_Yes_button() ;

	}
	
	@Then("^I view the employee data by employee no from clock$")
	public void I_view_the_employee_data_by_employee_no_from_clock() throws InterruptedException
	{
		util.click(deviceoperationspageobjects.getButtons("View Employee Data By Employee No."));
		
		driver.findElement(devicedataSyncPageObjects.getEmployeetextfield()).sendKeys(property.getProperty("Empno"));

		util.click(deviceoperationspageobjects.getButtons("Send"));

	}
	
	@Then("^I View Clock Time & Labor Code from clock$")
	public void I_View_Clock_Time_and_Labor_Code() throws InterruptedException
	{
		util.click(deviceoperationspageobjects.getButtons("View Clock Time & Labor Code"));
		
		I_click_on_Yes_button() ;


	}
	
	@Then("^I perform override clock schedule lockout device operation$")
	public void I_perform_override_clock_schedule_lockout_device_operation() throws InterruptedException
	{
		util.click(deviceoperationspageobjects.getButtons("Override Clock Schedule Lockout"));
		
		devicedataSyncPageObjects.getdateinputfields("Unlock Strat Date: ").sendKeys(property.getProperty("Fromdate"));
		
		devicedataSyncPageObjects.getdateinputfields("Time : ").sendKeys(property.getProperty("ToTime"));
		
		util.click(deviceoperationspageobjects.getButtons("Send"));


	}
	
	@Then("^I send command through command line window in tenant$")
	public void I_send_command_through_command_line_in_tenant()
	{
		
		util.click(deviceoperationspageobjects.getButtons("Command Line Window"));

		
		tenantdevicemanagerpageobjects.gettextareafields(1).sendKeys(property.getProperty("supportemail"));
		
		util.click(deviceoperationspageobjects.getButtons("Send"));

		
	}
	
	@Then("^I clean all pending commands present in message queue and validate$")
	public void I_clean_all_pending_commands_present_in_message_queue() throws InterruptedException
	{
		util.click(deviceoperationspageobjects.getButtons("DCS Command Clean Up"));
		
		I_click_on_Yes_button() ;
		
		I_click_on_Device_Monitor_sub_module();
		
		I_enter_random_devicesn_name_into_search_field();	
		
		I_click_on_search_icon();
		
		I_select_the_searched_devices();
		
		
		I_click_on_message_queue_tab();
		
		Thread.sleep(3000);

		
		util.click(deviceoperationspageobjects.getButtonswithindex("Refresh", 3));
		
		if(deviceoperationspageobjects.getNorecordsfound(2).isDisplayed())
		{
			
			logger.info("All commands cleaned successfully from message queue");
		}

		
	}
	
	@Then("^I clean all the device storage$")
	public void I_clean_all_the_device_storage() throws InterruptedException
	{
		util.Scroll(deviceoperationspageobjects.getButtons("Clean Device Storage"));
		
		util.click(deviceoperationspageobjects.getButtons("Clean Device Storage"));
		
		List<WebElement> ele = devicedataSyncPageObjects.getoptions();
	
		//List<WebElement> options = driver.findElements(devicedataSyncPageObjects.getCleanstorageDropdownoptions());
		
		
		
		for(int i=0;i<ele.size();i++)
		{
			
		

			util.click(driver.findElement(devicedataSyncPageObjects.getCleanstoragedropdown()));
			
			Thread.sleep(300);
			
			util.click(ele.get(i));
			
			util.click(deviceoperationspageobjects.getButtons("Send"));
			
		//	Thread.sleep(1000);
			
			util.click(deviceoperationspageobjects.getButtons("Clean Device Storage"));


		}
	}
	
	
	@Then("^I navigate to device monitor and validate the message queue count$")
	public void I_navigate_to_device_monitor_and_validate_the_message_queue_count() throws InterruptedException
	{
		I_click_on_Device_Monitor_sub_module();
		
		I_enter_random_devicesn_name_into_search_field();	
		
		I_click_on_search_icon();
		
		I_select_the_searched_devices();
		
		I_click_on_message_queue_tab();
		
		Thread.sleep(2000);
		
		//System.out.println(driver.findElement(devicedataSyncPageObjects.getMessageQueueCount()).getText());
		
		if(driver.findElement(devicedataSyncPageObjects.getMessageQueueCount()).getText().equals("33"))
		{
	
			logger.info("All Device clean storage commands sent to clock successfully");
		}
		
	}
	
	@Then("^I verify user navigation to tenant Login page$")
	public void I_verify_user_navigation_to_tenant_Login_page()
	{
		//wait.until(ExpectedConditions.urlContains(property.getProperty("DCSHostURL")));
		if(driver.getCurrentUrl().equals(property.getProperty("DCSTenantURL"))){
			
			logger.info("User navigated to tenant login successfully");
		}
		
	}
	
	@Then("^I validate the elements present in the Forgot User Id tab in tenant login$")
	public void I_validate_the_elements_present_in_the_Forgot_User_Id_tab_tenant_login()
	{
		
		driver.findElement(cirrusDCSPageObjects.getForgotUserIdtab()).click();
		
		Assert.assertTrue(driver.findElement(cirrusDCSPageObjects.getForgotuseridEmail()).isDisplayed());
		Assert.assertTrue(cirrusDCSPageObjects.getCompanyCode(1).isDisplayed());
		Assert.assertTrue(driver.findElement(cirrusDCSPageObjects.getForgotuseridRecoverpasswordbtn()).isDisplayed());
	}
	
	@Then("^I validate the elements present in the Forgotpassword tab in tenant login$")
	public void I_validate_the_elements_present_in_the_Forgotpassword_tab_tenant_login()
	{
		driver.findElement(cirrusDCSPageObjects.getForgotpasswordtab()).click();
		Assert.assertTrue(driver.findElement(cirrusDCSPageObjects.getForgotpasswordusername()).isDisplayed());
		Assert.assertTrue(driver.findElement(cirrusDCSPageObjects.getForgotpasswordemail()).isDisplayed());
		Assert.assertTrue(cirrusDCSPageObjects.getCompanyCode(2).isDisplayed());
		Assert.assertTrue(driver.findElement(cirrusDCSPageObjects.getforgotpwdRecoverpasswordbtn()).isDisplayed());
	}
	

	@Then("^I enter all valid details in required fields in tenant login$")
	public void I_enter_all_valid_details_in_required_fields_tenant_login() throws InterruptedException
	{
		Thread.sleep(1000);
		cirrusDCSPageObjects.getCompanyCode(1).sendKeys(property.getProperty("CompanyCode"));
		driver.findElement(cirrusDCSPageObjects.getForgotuseridEmail()).sendKeys(property.getProperty("ForgotUseridEmail"));
		driver.findElement(cirrusDCSPageObjects.getForgotuseridRecoverpasswordbtn()).click();
	}
	
	@Then("^I enter invalid details in forgot user id tab in tenant login$")
	public void I_enter_invalid_details_in_forgot_user_id_tab_tenant_login() throws InterruptedException
	{
		Thread.sleep(1000);
		cirrusDCSPageObjects.getCompanyCode(1).sendKeys(property.getProperty("InvalidForgotUseridEmail"));
		driver.findElement(cirrusDCSPageObjects.getForgotuseridEmail()).sendKeys(property.getProperty("InvalidForgotUseridEmail"));
		driver.findElement(cirrusDCSPageObjects.getForgotuseridRecoverpasswordbtn()).click();
	}
	
	@Then("^I enter all valid details in forgot password required fields in tenannt login$")
	public void I_enter_all_valid_details_in_forgot_password_required_fields_in_tenant_login() throws InterruptedException
	{
		driver.findElement(cirrusDCSPageObjects.getForgotpasswordtab()).click();
		
		
		cirrusDCSPageObjects.getCompanyCode(2).sendKeys(property.getProperty("CompanyCode"));

		driver.findElement(cirrusDCSPageObjects.getForgotpasswordusername()).sendKeys(property.getProperty("ForgotpasswordUsernametenant"));
		driver.findElement(cirrusDCSPageObjects.getForgotpasswordemail()).sendKeys(property.getProperty("ForgotUseridEmail"));
		
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(cirrusDCSPageObjects.getforgotpwdRecoverpasswordbtn())));
		driver.findElement(cirrusDCSPageObjects.getforgotpwdRecoverpasswordbtn()).click();
	}
	
	@Then("^I enter invalid details in forgot password tab in tenant$")
	public void I_enter_invalid_details_in_forgot_password_tab_in_tenant()
	{
		driver.findElement(cirrusDCSPageObjects.getForgotpasswordtab()).click();
		driver.findElement(cirrusDCSPageObjects.getForgotpasswordusername()).sendKeys(property.getProperty("ForgotpasswordUsername"));
		driver.findElement(cirrusDCSPageObjects.getForgotpasswordemail()).sendKeys(property.getProperty("ForgotUseridEmail"));
		cirrusDCSPageObjects.getCompanyCode(2).sendKeys(property.getProperty("InvalidForgotUseridphone"));
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(cirrusDCSPageObjects.getforgotpwdRecoverpasswordbtn())));
		driver.findElement(cirrusDCSPageObjects.getforgotpwdRecoverpasswordbtn()).click();
	}
	
	// New Code
	
	@Then("^I visit CirrusDCS HostLogin with valid credentials$")
	public void I_visit_CirrusDCS_HostLogin_with_valid_credentials() {
		driver.findElement(CirrusDCSPageObjects.getusername()).sendKeys(property.getProperty("Username"));
		driver.findElement(CirrusDCSPageObjects.getPassword()).sendKeys(property.getProperty("Password"));
		driver.findElement(CirrusDCSPageObjects.getSignin()).click();
	}

	@Then("^I visit CirrusDCS HostLogin and verify Tenants menu$")
	public void I_visit_CirrusDCS_HostLogin_and_verify_Tenants_menu() throws InterruptedException {
		driver.findElement(CirrusDCSPageObjects.getTenantbtn()).click();
		String url = property.getProperty("HostTenantmoduleLink");
		Assert.assertEquals(driver.getCurrentUrl(), url);
	}

	@Then("^I verify it is displaying the tenants according to the input given in search field$")
	public void I_verify_it_is_displaying_the_tenants_according_to_the_input_given_in_search_field()
			throws InterruptedException {

		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,-700)");
		Thread.sleep(2000);
		driver.findElement(CirrusDCSPageObjects.getTenant_List_SearchBar()).clear();
		driver.findElement(CirrusDCSPageObjects.getTenant_List_SearchBar())
				.sendKeys(property.getProperty("Tenant_Code"));
		driver.findElement(CirrusDCSPageObjects.getTenant_List_SearchBarsymbol()).click();

		Thread.sleep(2000);
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getTenant_List_Bar_ListofTenant_Name()).isDisplayed());
		driver.findElement(CirrusDCSPageObjects.getTenant_List_Bar_ListofTenant_Name()).click();
		Thread.sleep(2000);
		String Name = driver.findElement(CirrusDCSPageObjects.getRespected_tenant_code()).getText();
		System.out.println(Name);

	}

	@Then("^I verify that All the field is displayed in the Tenant Module$")
	public void I_verify_that_All_the_field_is_displayedin_the_Tenant_Module() throws InterruptedException {
		wait.until(ExpectedConditions
				.visibilityOfAllElements(driver.findElements(CirrusDCSPageObjects.getTenant_Information_submodule())));
		List<WebElement> s = driver.findElements(CirrusDCSPageObjects.getTenant_Information_submodule());
		for (WebElement menu : s) {
			String menus = menu.getText();
			System.out.println(menus);
		}
		Assert.assertEquals(driver.findElement(CirrusDCSPageObjects.getTenant_Information_Basic_Info()).getText(),
				"Basic Info");
		Assert.assertEquals(driver.findElement(CirrusDCSPageObjects.getTenant_Information_Security()).getText(),
				"Security");
		Assert.assertEquals(driver.findElement(CirrusDCSPageObjects.getTenant_Information_Primary_Contacts()).getText(),
				"Primary Contacts");
		Assert.assertEquals(driver.findElement(CirrusDCSPageObjects.getTenant_Information_Configurations()).getText(),
				"Configurations");
		Assert.assertEquals(driver.findElement(CirrusDCSPageObjects.getTenant_Information_Jobs()).getText(), "Jobs");
		Assert.assertEquals(driver.findElement(CirrusDCSPageObjects.getTenant_Information_Module()).getText(),
				"Module");
		Assert.assertEquals(driver.findElement(CirrusDCSPageObjects.getTenant_Information_Export()).getText(),
				"Export");

		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getTenant_List_Bar()).isDisplayed());
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getTenant_Information_Bar()).isDisplayed());
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getTenant_List_SearchBar()).isDisplayed());

		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getTenant_List_New_Import_Btn()).isDisplayed());
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getTenant_List_NewButton_Btn()).isDisplayed());
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getTenant_List_fastbackwardbtn()).isDisplayed());
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getTenant_List_normalbackwardbtn()).isDisplayed());
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getTenant_List_AllPaginationbtn()).isDisplayed());
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getTenant_List_fastforwardbtn()).isDisplayed());
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getTenant_List_normalforwardbtn()).isDisplayed());
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getTenant_List_Pagecountdropdownbtn()).isDisplayed());

		List<WebElement> s1 = driver.findElements(CirrusDCSPageObjects.getTenant_List_Bar_ColumnsName());
		int b1 = s1.size();
		for (WebElement columnsName : s1) {
			String columnsName1 = columnsName.getText();

			switch (columnsName1) {

			case "Code":
				Assert.assertEquals(columnsName1, "Code");
				break;
			case "Name":
				Assert.assertEquals(columnsName1, "Name");
				break;
			case "Status":
				Assert.assertEquals(columnsName1, "Status");
				break;
			}
		}
	}

	@Then("^I Click on the Last Forward Btn and Last Page is displayed$")
	public void I_Click_on_the_Last_Forward_Btn_andLast_Page_is_displayedd() throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,600)");
		wait.until(ExpectedConditions
				.visibilityOf(driver.findElement(CirrusDCSPageObjects.getTenant_List_fastforwardbtn())));
		driver.findElement(CirrusDCSPageObjects.getTenant_List_fastforwardbtn()).click();
		Thread.sleep(2000);
		List<WebElement> Pagebtn = driver
				.findElements(CirrusDCSPageObjects.getTenant_List_AllPaginationbtnone_By_One());
		for (int i = 0; i < Pagebtn.size(); i++) {
			WebElement Pagebtn1 = Pagebtn.get(i);
			String Name2 = Pagebtn1.getText();
			String Name = Pagebtn1.getAttribute("class");
			if (Name.equals("ui-paginator-page ui-state-default ui-corner-all ui-state-active")) {

				Assert.assertEquals(Name2, property.getProperty("LastPageNO"));
			}
		}
	}

//	@Then("^I Click on the forward btn and pages displaying accordingly$")
//	public void I_Click_on_the_forward_btn_and_pages_displaying_accordinglyy() throws InterruptedException {
//
//		JavascriptExecutor js = (JavascriptExecutor) driver;
//		js.executeScript("window.scrollBy(0,1000)");
//
//		List<WebElement> pagesbtn = driver.findElements(CirrusDCSPageObjects.getTenant_pages_btn());
//		for (int j = 0; j < pagesbtn.size(); j++) {
//			driver.findElement(CirrusDCSPageObjects.getTenant_List_normalforwardbtn()).click();
//			Thread.sleep(2000);
//			List<WebElement> s1ssd = driver
//					.findElements(CirrusDCSPageObjects.getTenant_List_AllPaginationbtnone_By_One());
//			for (int i = 0; i < s1ssd.size(); i++) {
//				WebElement ds = s1ssd.get(i);
//				String Name = ds.getAttribute("class");
//				if (Name.equals("ui-paginator-page ui-state-default ui-corner-all ui-state-active")) {
//					Assert.assertEquals(Name, property.getProperty("ClassAttribute"));
//
//				}
//			}
//		}
//
//	}

//	@Then("^I Click on the firstPage backward Btn and first Page is displayed$")
//	public void I_Click_on_the_firstPage_backward_Btn_and_first_Page_is_displayed_in_tenant() throws InterruptedException {
//		JavascriptExecutor js = (JavascriptExecutor) driver;
//		js.executeScript("window.scrollBy(0,600)");
//		driver.findElement(CirrusDCSPageObjects.getTenant_List_fastbackwardbtn()).click();
//		Thread.sleep(2000);
//		List<WebElement> s1ssd = driver.findElements(CirrusDCSPageObjects.getTenant_List_AllPaginationbtnone_By_One());
//
//		for (int i = 0; i < s1ssd.size(); i++) {
//			WebElement ds = s1ssd.get(i);
//			String Name2 = ds.getText();
//			String Name = ds.getAttribute("class");
//			if (Name.equals("ui-paginator-page ui-state-default ui-corner-all ui-state-active")) {
//
//				Assert.assertEquals(Name2, property.getProperty("firstPageNO"));
//			}
//		}
//	}

//	@Then("^I Click on the backword btn and pages displaying accordingly$")
//	public void I_Click_on_the_backword_btn_and_pages_displaying_accordinglyy() throws InterruptedException {
//		JavascriptExecutor js = (JavascriptExecutor) driver;
//		js.executeScript("window.scrollBy(0,400)");
//		driver.findElement(CirrusDCSPageObjects.getTenant_List_fastforwardbtn()).click();
//		Thread.sleep(2000);
//		List<WebElement> pagesbtn = driver.findElements(CirrusDCSPageObjects.getTenant_pages_btn());
//		for (int j = 0; j < pagesbtn.size(); j++) {
//			driver.findElement(CirrusDCSPageObjects.getTenant_List_normalbackwardbtn()).click();
//			Thread.sleep(2000);
//			List<WebElement> s1ssd = driver.findElements(CirrusDCSPageObjects.getTenant_List_AllPaginationbtnone_By_One());
//			for (int i = s1ssd.size() - 1; i >= 0; i--) {
//				WebElement ds = s1ssd.get(i);
//				String Name = ds.getAttribute("class");
//				if (Name.equals("ui-paginator-page ui-state-default ui-corner-all ui-state-active")) {
//					Assert.assertEquals(Name, property.getProperty("ClassAttribute"));
//				}
//			}
//		}
//	}

//	@Then("^I select the pages from pagedropdown and list of tenant display accordingly$")
//	public void I_select_the_pages_from_pagedropdown_and_list_of_tenant_display_accordinglyy()
//			throws InterruptedException {
//
//		Select objselect = new Select(driver.findElement(CirrusDCSPageObjects.getTenant_List_Pagecountdropdownbtn()));
//		List<WebElement> options = objselect.getOptions();
//		for (int i = 0; i < options.size(); i++) {
//
//			WebElement optionsval = options.get(i);
//			String ss = optionsval.getText();
//			objselect.selectByIndex(i);
//
//			Thread.sleep(2000);
//			List<WebElement> listTenant = driver
//					.findElements(CirrusDCSPageObjects.getTenant_List_Bar_ListofTenant_Name());
//			Thread.sleep(2000);
//			int no = listTenant.size();
//			String b = String.valueOf(no);
//			Assert.assertEquals(ss, b);
//			System.out.println(no);
//		}
//
//	}

	@Then("^I Click on the Import New Tenant button$")
	public void I_Click_on_the_Import_New_Tenant_button() throws InterruptedException, AWTException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("scroll(0,1000)");
		driver.findElement(CirrusDCSPageObjects.getTenant_List_New_Import_Btn()).click();
	}

	@Then("^I click on the choose button$")
	public void I_click_on_the_choose_button() throws InterruptedException, AWTException {

		driver.findElement(CirrusDCSPageObjects.getImport_New_Tenant_choose_button()).click();
		System.out.println("I clicked on choose button");

		// control + c (copy)

		StringSelection sel = new StringSelection(
				"D:\\1\\Official Automation Work\\Cirrus_DCS\\CirrusDCS\\src\\test\\resources\\client_ACAQA.json");

		Toolkit.getDefaultToolkit().getSystemClipboard().setContents(sel, null);
		Thread.sleep(2000);

		// control + v and enter (paste)
		Robot rob = new Robot();
		rob.keyPress(KeyEvent.VK_CONTROL);
		rob.keyPress(KeyEvent.VK_V);
		rob.keyRelease(KeyEvent.VK_CONTROL);
		rob.keyRelease(KeyEvent.VK_V);
		Thread.sleep(2000);
		rob.keyPress(KeyEvent.VK_ENTER);
		rob.keyRelease(KeyEvent.VK_ENTER);

	}

	@Given("^I visit CirrusDCS Tenantlogin and verify Attendance module is displayed with its submenu$")
	public void I_visit_CirrusDCS_Tenantlogin_and_verify_Attendance_module_is_displayed_with_its_submenu() {
		List<WebElement> menulist = driver
				.findElements(CirrusDCSPageObjects5.getTenantPage_Attendance_module_submenu_list());
		for (WebElement Menu : menulist) {
			String MenuName = Menu.getText();
			switch (MenuName) {

			case "Time Data":
				Assert.assertEquals(MenuName, property.getProperty("Attendancemodule1"));
				break;
			case "Visitor Log":
				Assert.assertEquals(MenuName, property.getProperty("Attendancemodule2"));
				break;
			}
		}

	}

	@Given("^I click on the Attendance module page$")
	public void I_click_on_the_Attendance_module_page() {

		driver.findElement(CirrusDCSPageObjects5.getTenantPage_Attendance_module()).click();
	}

	@Given("^I verify that time data report is displaying on the time data page$")
	public void I_verify_that_time_data_report_is_displaying_on_the_time_data_page() {
		wait.until(ExpectedConditions.invisibilityOf(driver.findElement(CirrusDCSPageObjects5.getGlobalLoadingImg())));
		List<WebElement> emplList = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_Report_table_EmployeeNo_list());
		for (int i = 0; i < emplList.size(); i++) {
			Assert.assertTrue(emplList.get(i).isDisplayed());

		}
		System.out.println("time data report is displaying as per the input on the screen");

	}

	@Given("^I verify that user is able to enter the date in the from and to fields in the time data page$")
	public void I_verify_that_user_is_able_to_enter_the_date_in_the_from_and_to_fields_in_the_time_data_page()
			throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		List<WebElement> timeinputvalue = driver.findElements(CirrusDCSPageObjects5
				.getAttendance_module_Time_data_Time_data_criteria_block_fields_time_input_field());
		timeinputvalue.get(0).clear();
		timeinputvalue.get(0).sendKeys(property.getProperty("TimeDatamoduleFromTime"));
		Thread.sleep(1000);
		timeinputvalue.get(1).clear();
		timeinputvalue.get(1).sendKeys(property.getProperty("TimeDatamoduleToTime"));
		List<WebElement> buttons = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_criteria_block_fields_buttons_list());
		js.executeScript("arguments[0].click();", buttons.get(0));

	}

	@Given("^I logout the tenant application$")
	public void I_logout_the_application() throws InterruptedException {
		driver.navigate().refresh();
		Thread.sleep(2000);
		driver.findElement(By.id("drop1")).click();
		Thread.sleep(2000);
		driver.findElement(By.xpath("(//ul[@class='dropdown-menu'])[1]/li[2]")).click();
		Thread.sleep(2000);
	}

	@Given("^I verify that user is able to access the Save Preference button and selected cloumns only displaying even after the logging out and then logging in to the account$")
	public void I_verify_that_user_is_able_to_access_the_Save_Preference_button_and_selected_cloumns_only_displaying_even_after_the_logging_out_and_then_logging_in_to_the_account()
			throws InterruptedException {
		I_visit_CirrusDCS_Tenantlogin_page();
		I_visit_CirrusDCS_Tenantlogin_with_valid_credentials();
		I_click_on_the_Attendance_module_page();
		List<WebElement> menulist = driver
				.findElements(CirrusDCSPageObjects5.getTenantPage_Attendance_module_submenu_list());
		menulist.get(0).click();
		Thread.sleep(1000);
//	            for(int i=0;i<list2.size();i++){
//	    	    System.out.println("before the logout the tenant account "+list2.get(i));
//	    	} 
		System.out.println();
		List<WebElement> columnName = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_Report_table_columnsName_list());
		for (int i = 0; i < columnName.size(); i++) {
			String bb = columnName.get(i).getAttribute("class");
			if (!bb.contains("hidden")) {
				String name2 = columnName.get(i).getText();
				Thread.sleep(1000);

				if (list2.contains(name2)) {
					System.out.println("after the logout save preference btn is working fine ");
				} else {
					System.out.println("after the logout save preference btn is not working fine ");
				}
			}
		}
	}

	@Given("^I verify that user is able to export the file in the csv form in the time data page$")
	public void I_verify_that_user_is_able_to_export_the_file_in_the_csv_form_in_the_time_data_page()
			throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		List<WebElement> timelink = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_criteria_block_fields_time_list());
		timelink.get(3).click();
		wait.until(ExpectedConditions.invisibilityOf(driver.findElement(CirrusDCSPageObjects5.getGlobalLoadingImg())));
		List<WebElement> buttons = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_criteria_block_fields_buttons_list());
		js.executeScript("arguments[0].click();", buttons.get(0));

		wait.until(ExpectedConditions.invisibilityOf(driver.findElement(CirrusDCSPageObjects5.getGlobalLoadingImg())));
		WebElement viewgeneratedReportbtn = driver.findElement(
				CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_ReportView_generated_report_btn());
		js.executeScript("arguments[0].click();", viewgeneratedReportbtn);
		wait.until(ExpectedConditions.invisibilityOf(driver.findElement(CirrusDCSPageObjects5.getGlobalLoadingImg())));

		driver.findElement(CirrusDCSPageObjects5
				.getAttendance_module_Time_data_Time_data_ReportView_generated_report_btn_timedatareportfilelink())
				.click();

		String filename = "timedatareports.csv";
		String downloadPath = "C:\\Users\\rishikeshbm\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;
		for (int i = 0; i < len; i++) {
			if (dirContents[i].getName().contains(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}

	}

	@Given("^I Fill all the fields and click on the reset btn all the fields getting clear$")
	public void I_Fill_all_the_fields_and_click_on_the_reset_btn_all_the_fields_getting_clear()
			throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		driver.findElement(
				CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_criteria_block_fields_employee_input())
				.sendKeys(property.getProperty("TimeDatamoduleEmployeeInputfield"));
		driver.findElement(
				CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_criteria_block_fields_Device_input())
				.sendKeys(property.getProperty("TimeDatamoduleDeviceInputfield"));
		driver.findElement(CirrusDCSPageObjects5
				.getAttendance_module_Time_data_Time_data_criteria_block_fields_Location_dropdown()).click();
		List<WebElement> location = driver.findElements(CirrusDCSPageObjects5
				.getAttendance_module_Time_data_Time_data_criteria_block_fields_Location_dropdownvalue());
		location.get(2).click();
		wait.until(ExpectedConditions.invisibilityOf(driver.findElement(CirrusDCSPageObjects5.getGlobalLoadingImg())));
		driver.findElement(CirrusDCSPageObjects5
				.getAttendance_module_Time_data_Time_data_criteria_block_fields_Oraganization_dropdown()).click();
		List<WebElement> orgnizations = driver.findElements(CirrusDCSPageObjects5
				.getAttendance_module_Time_data_Time_data_criteria_block_fields_Oraganization_dropdownvalue());
		orgnizations.get(2).click();
		driver.findElement(
				CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_criteria_block_fields_Agency_dropdown())
				.click();
		List<WebElement> Agencies = driver.findElements(CirrusDCSPageObjects5
				.getAttendance_module_Time_data_Time_data_criteria_block_fields_Agency_dropdownvalue());
		Agencies.get(1).click();
		driver.findElement(
				CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_criteria_block_fields_time_list())
				.click();

		driver.findElement(CirrusDCSPageObjects5
				.getAttendance_module_Time_data_Time_data_criteria_block_fields_Att_state_dropdown()).click();
		List<WebElement> Att_stateLists = driver.findElements(CirrusDCSPageObjects5
				.getAttendance_module_Time_data_Time_data_criteria_block_fields_Att_state_dropdownvalue());
		Att_stateLists.get(1).click();
		List<WebElement> checkboxes = driver.findElements(CirrusDCSPageObjects5
				.getAttendance_module_Time_data_Time_data_criteria_block_fields_All_punches_checkbox());
		checkboxes.get(0).click();
		js.executeScript("arguments[0].click();", checkboxes.get(1));
		js.executeScript("window.scrollBy(0,1000)");
		driver.findElement(CirrusDCSPageObjects5
				.getAttendance_module_Time_data_Time_data_criteria_block_fields_Punch_exception_dropdown()).click();
		List<WebElement> punch_ExceptionsLists = driver.findElements(CirrusDCSPageObjects5
				.getAttendance_module_Time_data_Time_data_criteria_block_fields_Punch_exception_dropdown_value());
		punch_ExceptionsLists.get(1).click();
		List<WebElement> buttons = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_criteria_block_fields_buttons_list());
		buttons.get(1).click();
		wait.until(ExpectedConditions.invisibilityOf(driver.findElement(CirrusDCSPageObjects5.getGlobalLoadingImg())));

		System.out.println("User is able to reset the all the fields");

	}

	@Given("^I click on the punch exception dropdown and based on that time data is displaying$")
	public void I_click_on_the_punch_exception_dropdown_and_based_on_that_time_data_is_displaying()
			throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		List<WebElement> fields = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_criteria_block_fields_list());
		List<WebElement> buttons = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_criteria_block_fields_buttons_list());
		WebElement ele = driver.findElement(CirrusDCSPageObjects5
				.getAttendance_module_Time_data_Time_data_criteria_block_fields_Punch_exception_dropdown());
		js.executeScript("arguments[0].click();", ele);
		List<WebElement> values = driver.findElements(CirrusDCSPageObjects5
				.getAttendance_module_Time_data_Time_data_criteria_block_fields_Punch_exception_dropdown_value());
		for (int i = 1; i < values.size() - 1; i++) {
			js.executeScript("arguments[0].click();", values.get(i));
			wait.until(
					ExpectedConditions.invisibilityOf(driver.findElement(CirrusDCSPageObjects5.getGlobalLoadingImg())));
			Thread.sleep(1000);
			List<WebElement> timeinputvalue = driver.findElements(CirrusDCSPageObjects5
					.getAttendance_module_Time_data_Time_data_criteria_block_fields_time_input_field());
			timeinputvalue.get(0).clear();
			Thread.sleep(1000);
			timeinputvalue.get(0).sendKeys(property.getProperty("TimeDatamoduleFromTime"));

			Thread.sleep(1000);
			timeinputvalue.get(1).clear();
			timeinputvalue.get(1).sendKeys(property.getProperty("TimeDatamoduleToTime"));

			js.executeScript("arguments[0].click();", buttons.get(0));

			wait.until(
					ExpectedConditions.invisibilityOf(driver.findElement(CirrusDCSPageObjects5.getGlobalLoadingImg())));
			List<WebElement> emplList = driver.findElements(
					CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_Report_table_EmployeeNo_list());
			for (int m = 0; m < emplList.size(); m++) {
				if (emplList.size() > 1) {
					Assert.assertTrue(emplList.get(m).isDisplayed());
				}
			}
			System.out.println("time data report is displaying as per the input on the screen");
			js.executeScript("arguments[0].click();", ele);

		}

		Thread.sleep(1000);
		WebElement ele12 = driver.findElement(CirrusDCSPageObjects5
				.getAttendance_module_Time_data_Time_data_criteria_block_fields_Punch_exception_dropdown());
		js.executeScript("arguments[0].click();", ele12);

		js.executeScript("arguments[0].click();", values.get(5));
		wait.until(ExpectedConditions.invisibilityOf(driver.findElement(CirrusDCSPageObjects5.getGlobalLoadingImg())));
		Thread.sleep(1000);
		js.executeScript("arguments[0].click();", buttons.get(0));
		wait.until(ExpectedConditions.invisibilityOf(driver.findElement(CirrusDCSPageObjects5.getGlobalLoadingImg())));
		List<WebElement> emplList = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_Report_table_EmployeeNo_list());
		for (int m = 0; m < emplList.size(); m++) {
			if (emplList.size() > 1) {
				Assert.assertTrue(emplList.get(m).isDisplayed());
			}
		}
		System.out.println("time data report is displaying as per the input on the screen");

	}

	@Given("^I click on the punch exception dropdown and all the available options are displaying$")
	public void I_click_on_the_punch_exception_dropdown_and_all_the_available_options_are_displaying()
			throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		WebElement ele = driver.findElement(CirrusDCSPageObjects5
				.getAttendance_module_Time_data_Time_data_criteria_block_fields_Punch_exception_dropdown());
		js.executeScript("arguments[0].click();", ele);
		List<WebElement> values = driver.findElements(CirrusDCSPageObjects5
				.getAttendance_module_Time_data_Time_data_criteria_block_fields_Punch_exception_dropdown_value());
		for (int i = 1; i < values.size(); i++) {
			String valueName = values.get(i).getText();
			Assert.assertEquals(valueName, property.getProperty("TimeDatamodulePunchExceptionoption" + i));
		}

	}

	@Given("^I click on the Att State and based on that All the options are display$")
	public void I_click_on_the_Att_State_and_based_on_that_All_the_options_are_display() throws InterruptedException {
		driver.findElement(CirrusDCSPageObjects5
				.getAttendance_module_Time_data_Time_data_criteria_block_fields_Att_state_dropdown()).click();
		List<WebElement> values = driver.findElements(CirrusDCSPageObjects5
				.getAttendance_module_Time_data_Time_data_criteria_block_fields_Att_state_dropdown_values());
		for (int i = 1; i < values.size(); i++) {
			Assert.assertTrue(values.get(i).isDisplayed());
		}
	}

	@Given("^I click on the time hyper link and based on that to and From fields are autofill$")
	public void I_click_on_the_time_hyper_link_and_based_on_that_to_and_From_fields_are_autofill()
			throws InterruptedException {
		List<WebElement> Timelink = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_criteria_block_fields_time_list());

		for (int i = 0; i < Timelink.size(); i++) {
			Timelink.get(i).click();

			wait.until(
					ExpectedConditions.invisibilityOf(driver.findElement(CirrusDCSPageObjects5.getGlobalLoadingImg())));
			Thread.sleep(1000);
			List<WebElement> timeinputvalue = driver.findElements(
					CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_criteria_block_fields_time_fields());
			Thread.sleep(1000);
			Assert.assertTrue(timeinputvalue.get(0).isDisplayed());
			Assert.assertTrue(timeinputvalue.get(1).isDisplayed());
		}
	}

	@Given("^I select the Agency from the Agency fields in the time data page$")
	public void I_select_the_Agency_from_the_Agency_fields_in_the_time_data_page() throws InterruptedException {
		driver.findElement(
				CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_criteria_block_fields_Agency_dropdown())
				.click();
		driver.findElement(
				CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_criteria_block_fields_Agency_select())
				.click();
		JavascriptExecutor js = (JavascriptExecutor) driver;
		List<WebElement> timeinputvalue = driver.findElements(CirrusDCSPageObjects5
				.getAttendance_module_Time_data_Time_data_criteria_block_fields_time_input_field());
		timeinputvalue.get(0).clear();
		timeinputvalue.get(0).sendKeys(property.getProperty("TimeDatamoduleFromTime"));
		Thread.sleep(1000);
		timeinputvalue.get(1).clear();
		timeinputvalue.get(1).sendKeys(property.getProperty("TimeDatamoduleToTime"));
		System.out.println("User is able to enter the date in the 'From' and 'To'fields");
		List<WebElement> buttons = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_criteria_block_fields_buttons_list());
		js.executeScript("arguments[0].click();", buttons.get(0));

	}

	@Given("^I select the Organization from the Organization fields in the time data page$")
	public void I_select_the_Organization_from_the_Organization_fields_in_the_time_data_page()
			throws InterruptedException {
		driver.findElement(CirrusDCSPageObjects5
				.getAttendance_module_Time_data_Time_data_criteria_block_fields_Oraganization_dropdown()).click();
		driver.findElement(CirrusDCSPageObjects5
				.getAttendance_module_Time_data_Time_data_criteria_block_fields_Oraganization_input())
				.sendKeys("Accounts Payable");
		JavascriptExecutor js = (JavascriptExecutor) driver;
		List<WebElement> timeinputvalue = driver.findElements(CirrusDCSPageObjects5
				.getAttendance_module_Time_data_Time_data_criteria_block_fields_time_input_field());
		timeinputvalue.get(0).clear();
		timeinputvalue.get(0).sendKeys(property.getProperty("TimeDatamoduleFromTime"));
		Thread.sleep(1000);
		timeinputvalue.get(1).clear();
		timeinputvalue.get(1).sendKeys(property.getProperty("TimeDatamoduleToTime"));
		List<WebElement> buttons = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_criteria_block_fields_buttons_list());
		js.executeScript("arguments[0].click();", buttons.get(0));

	}

	@Given("^I select the location from the location fields in the time data page$")
	public void I_select_the_location_from_the_location_fields_in_the_time_data_page() throws InterruptedException {
		driver.findElement(CirrusDCSPageObjects5
				.getAttendance_module_Time_data_Time_data_criteria_block_fields_Location_dropdown()).click();
		driver.findElement(
				CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_criteria_block_fields_Locarion_input())
				.sendKeys("Amsterdam");
		JavascriptExecutor js = (JavascriptExecutor) driver;
		List<WebElement> timeinputvalue = driver.findElements(CirrusDCSPageObjects5
				.getAttendance_module_Time_data_Time_data_criteria_block_fields_time_input_field());
		timeinputvalue.get(0).clear();
		timeinputvalue.get(0).sendKeys(property.getProperty("TimeDatamoduleFromTime"));
		Thread.sleep(1000);
		timeinputvalue.get(1).clear();
		timeinputvalue.get(1).sendKeys(property.getProperty("TimeDatamoduleToTime"));
		List<WebElement> buttons = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_criteria_block_fields_buttons_list());
		js.executeScript("arguments[0].click();", buttons.get(0));

	}

	@Given("^I Enter the data in the data in the device fields in the time data page$")
	public void I_Enter_the_data_in_the_data_in_the_device_fields_in_the_time_data_page() throws InterruptedException {
		driver.findElement(
				CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_criteria_block_fields_Device_input())
				.sendKeys("CGP5201160105");
		JavascriptExecutor js = (JavascriptExecutor) driver;
		List<WebElement> timeinputvalue = driver.findElements(CirrusDCSPageObjects5
				.getAttendance_module_Time_data_Time_data_criteria_block_fields_time_input_field());
		timeinputvalue.get(0).clear();
		timeinputvalue.get(0).sendKeys(property.getProperty("TimeDatamoduleFromTime"));
		Thread.sleep(1000);
		timeinputvalue.get(1).clear();
		timeinputvalue.get(1).sendKeys(property.getProperty("TimeDatamoduleToTime"));
		System.out.println("User is able to enter the date in the 'From' and 'To'fields");
		List<WebElement> buttons = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_criteria_block_fields_buttons_list());
		js.executeScript("arguments[0].click();", buttons.get(0));
	}

	@Given("^I Enter the data in the data in the employee fields in the time data page$")
	public void I_Enter_the_data_in_the_data_in_the_employee_fields_in_the_time_data_page()
			throws InterruptedException {

		driver.findElement(
				CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_criteria_block_fields_employee_input())
				.sendKeys("21004");
		JavascriptExecutor js = (JavascriptExecutor) driver;
		List<WebElement> timeinputvalue = driver.findElements(CirrusDCSPageObjects5
				.getAttendance_module_Time_data_Time_data_criteria_block_fields_time_input_field());
		timeinputvalue.get(0).clear();
		timeinputvalue.get(0).sendKeys(property.getProperty("TimeDatamoduleFromTime"));
		Thread.sleep(1000);
		timeinputvalue.get(1).clear();
		timeinputvalue.get(1).sendKeys(property.getProperty("TimeDatamoduleToTime"));
		List<WebElement> buttons = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_criteria_block_fields_buttons_list());
		js.executeScript("arguments[0].click();", buttons.get(0));

	}

	@Given("^I click on the check box of the Unprocessed  punched and based on that data is displaying$")
	public void I_click_on_the_check_box_of_the_Unprocessed_punched_and_based_on_that_data_is_displaying()
			throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		WebElement checkbox = driver.findElement(CirrusDCSPageObjects5
				.getAttendance_module_Time_data_Time_data_criteria_block_fields_Unprocessed_punches_checkbox());
		js.executeScript("arguments[0].click();", checkbox);
		List<WebElement> timeinputvalue = driver.findElements(CirrusDCSPageObjects5
				.getAttendance_module_Time_data_Time_data_criteria_block_fields_time_input_field());
		timeinputvalue.get(0).clear();
		timeinputvalue.get(0).sendKeys(property.getProperty("TimeDatamoduleFromTime"));
		Thread.sleep(1000);
		timeinputvalue.get(1).clear();
		timeinputvalue.get(1).sendKeys(property.getProperty("TimeDatamoduleToTime"));
		List<WebElement> buttons = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_criteria_block_fields_buttons_list());
		js.executeScript("arguments[0].click();", buttons.get(0));

		wait.until(ExpectedConditions.invisibilityOf(driver.findElement(CirrusDCSPageObjects5.getGlobalLoadingImg())));
		List<WebElement> emplList = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_Report_table_EmployeeNo_list());
		for (int m = 0; m < emplList.size(); m++) {
			if (emplList.size() > 1) {
				Assert.assertTrue(emplList.get(m).isDisplayed());
			}
		}
		System.out.println("time data report is displaying as per the input on the screen");

	}

	@Given("^I click on the check box of the Invalid punched and based on that data is displaying$")
	public void I_click_on_the_check_box_of_the_Invalid_punched_and_based_on_that_data_is_displaying()
			throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		driver.findElement(CirrusDCSPageObjects5
				.getAttendance_module_Time_data_Time_data_criteria_block_fields_Invalid_punches_checkbox()).click();
		List<WebElement> timeinputvalue = driver.findElements(CirrusDCSPageObjects5
				.getAttendance_module_Time_data_Time_data_criteria_block_fields_time_input_field());
		timeinputvalue.get(0).clear();
		timeinputvalue.get(0).sendKeys(property.getProperty("TimeDatamoduleFromTime"));
		Thread.sleep(1000);
		timeinputvalue.get(1).clear();
		timeinputvalue.get(1).sendKeys(property.getProperty("TimeDatamoduleToTime"));
		List<WebElement> buttons = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_criteria_block_fields_buttons_list());
		js.executeScript("arguments[0].click();", buttons.get(0));
		wait.until(ExpectedConditions.invisibilityOf(driver.findElement(CirrusDCSPageObjects5.getGlobalLoadingImg())));
		List<WebElement> emplList = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_Report_table_EmployeeNo_list());
		for (int m = 0; m < emplList.size(); m++) {
			if (emplList.size() > 1) {
				Assert.assertTrue(emplList.get(m).isDisplayed());
			}
		}
		System.out.println("time data report is displaying as per the input on the screen");

	}

	@Given("^I Verify that user is able to get the time data report based on the Att state$")
	public void I_Verify_that_user_is_able_to_get_the_time_data_report_based_on_the_Att_state()
			throws InterruptedException {
		driver.findElement(CirrusDCSPageObjects5
				.getAttendance_module_Time_data_Time_data_criteria_block_fields_Att_state_dropdown()).click();
		List<WebElement> values = driver.findElements(CirrusDCSPageObjects5
				.getAttendance_module_Time_data_Time_data_criteria_block_fields_Att_state_dropdown_values());
		for (int i = 1; i < values.size(); i++) {
			values.get(i).click();
			JavascriptExecutor js = (JavascriptExecutor) driver;
			List<WebElement> timeinputvalue = driver.findElements(CirrusDCSPageObjects5
					.getAttendance_module_Time_data_Time_data_criteria_block_fields_time_input_field());
			timeinputvalue.get(0).clear();
			timeinputvalue.get(0).sendKeys(property.getProperty("TimeDatamoduleFromTime"));
			Thread.sleep(1000);
			timeinputvalue.get(1).clear();
			timeinputvalue.get(1).sendKeys(property.getProperty("TimeDatamoduleToTime"));
			List<WebElement> buttons = driver.findElements(CirrusDCSPageObjects5
					.getAttendance_module_Time_data_Time_data_criteria_block_fields_buttons_list());
			js.executeScript("arguments[0].click();", buttons.get(0));

			wait.until(
					ExpectedConditions.invisibilityOf(driver.findElement(CirrusDCSPageObjects5.getGlobalLoadingImg())));
			List<WebElement> emplList = driver.findElements(
					CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_Report_table_EmployeeNo_list());
			for (int m = 0; m < emplList.size(); m++) {
				if (emplList.size() > 1) {
					Assert.assertTrue(emplList.get(m).isDisplayed());
				}
			}
			System.out.println("time data report is displaying as per the input on the screen");
			driver.findElement(CirrusDCSPageObjects5
					.getAttendance_module_Time_data_Time_data_criteria_block_fields_Att_state_dropdown()).click();

		}
	}

	@Given("^I click on the visitor log submenu$")
	public void I_click_on_the_visitor_log_submenu() {
		List<WebElement> menulist = driver
				.findElements(CirrusDCSPageObjects5.getTenantPage_Attendance_module_submenu_list());
		menulist.get(1).click();
	}

	@Given("^I verify that user is able to view the all the fields under the visitor log submenu is displayed$")
	public void I_verify_that_user_is_able_to_view_the_all_the_fields_under_the_visitor_log_submenu_is_displayed() {
		String txt1 = driver.findElement(CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Text()).getText();
		Assert.assertEquals(txt1, property.getProperty("VisitorModuletxt"));

		String txt2 = driver
				.findElement(CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_criteria_txt())
				.getText();
		Assert.assertEquals(txt2, property.getProperty("VisitorModuleblock1txt"));

		List<WebElement> fields = driver
				.findElements(CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_criteria_all_fields());
		for (WebElement Menu : fields) {
			String fieldsName = Menu.getText();
			switch (fieldsName) {

			case "Device:":
				Assert.assertEquals(fieldsName, "Device:");
				break;
			case "Visitor ID:":
				Assert.assertEquals(fieldsName, "Visitor ID:");
				break;
			case "Employee No:":
				Assert.assertEquals(fieldsName, "Employee No:");
				break;
			case "First Name:":
				Assert.assertEquals(fieldsName, "First Name:");
				break;
			case "Last Name:":
				Assert.assertEquals(fieldsName, "Last Name:");
				break;
			case "From: *":
				Assert.assertEquals(fieldsName, "From: *");
				break;
			case "To: *":
				Assert.assertEquals(fieldsName, "To: *");
				break;
			case "Show Exception Punches:":
				Assert.assertEquals(fieldsName, "Show Exception Punches:");
				break;

			}
		}
		List<WebElement> btns = driver
				.findElements(CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_criteria_all_buttons());
		Assert.assertTrue(btns.get(0).isDisplayed());
		Assert.assertTrue(btns.get(1).isDisplayed());

		String txt3 = driver.findElement(CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_Report_txt())
				.getText();
		Assert.assertEquals(txt3, property.getProperty("VisitorModuleblock2txt"));
		Assert.assertTrue(driver
				.findElement(CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_Report_columns_btn())
				.isDisplayed());
		List<WebElement> name2 = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_Report_Export_As_btns());
		for (WebElement element : name2) {
			String ele = element.getAttribute("value");
			switch (ele) {
			case "Export As CSV":
				Assert.assertEquals(ele, property.getProperty("ExportAsbtn1"));
				break;
			case "Export As PDF":
				Assert.assertEquals(ele, property.getProperty("ExportAsbtn2"));
				break;
			case "Export As Excel":
				Assert.assertEquals(ele, property.getProperty("ExportAsbtn3"));
				break;
			}
		}
		List<WebElement> columnName = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_Report_table_columnsList());
		for (int i = 0; i < columnName.size(); i++) {

			String bb = columnName.get(i).getAttribute("class");

			if (!bb.contains("hidden")) {

				Assert.assertTrue("column name is display", columnName.get(i).isDisplayed());
			}

		}

		List<WebElement> btnsList = driver.findElements(CirrusDCSPageObjects5
				.getAttendance_module_Visitor_log_Visitorlog_Report_table_forword_backword_btns_list());
		for (int i = 0; i < btnsList.size(); i++) {
			Assert.assertTrue("btn is display", btnsList.get(i).isDisplayed());
		}

		List<WebElement> selectpagebtn = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_Report_table_selectPage_btns_list());
		for (int i = 0; i < selectpagebtn.size(); i++) {
			Assert.assertTrue("column name is display", btnsList.get(i).isDisplayed());
		}

	}

	@Given("^I click on the Time data submenu and all the fields under the Time data submenu is displayed$")
	public void I_click_on_the_Time_data_submenu_and_all_the_fields_under_the_Time_data_submenu_is_displayed() {
		List<WebElement> menulist = driver
				.findElements(CirrusDCSPageObjects5.getTenantPage_Attendance_module_submenu_list());
		menulist.get(0).click();
		String txt1 = driver.findElement(CirrusDCSPageObjects5.getAttendance_module_Time_data_Text()).getText();
		Assert.assertEquals(txt1, property.getProperty("TimeDatamoduletxt1"));

		String txt2 = driver.findElement(CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_criteria_Text())
				.getText();
		Assert.assertEquals(txt2, property.getProperty("TimeDatamoduletxt2"));

		String txt3 = driver.findElement(CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_Report_Text())
				.getText();
		Assert.assertEquals(txt3, property.getProperty("TimeDatamoduletxt3"));

		List<WebElement> fields = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_criteria_block_fields_list());
		for (WebElement Menu : fields) {
			String fieldsName = Menu.getText();
			switch (fieldsName) {

			case "Employee:":
				Assert.assertEquals(fieldsName, "Employee:");
				break;
			case "Device:":
				Assert.assertEquals(fieldsName, "Device:");
				break;
			case "Location:":
				Assert.assertEquals(fieldsName, "Location:");
				break;
			case "Organization:":
				Assert.assertEquals(fieldsName, "Organization:");
				break;
			case "Agency:":
				Assert.assertEquals(fieldsName, "Agency:");
				break;
			case "From: *":
				Assert.assertEquals(fieldsName, "From: *");
				break;
			case "To: *":
				Assert.assertEquals(fieldsName, "To: *");
				break;
			case "Att State:":
				Assert.assertEquals(fieldsName, "Att State:");
				break;
			case "Punch Exception:":
				Assert.assertEquals(fieldsName, "Punch Exception:");
				break;

			}
		}
		List<WebElement> Timefields = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_criteria_block_fields_time_list());
		for (int i = 0; i < Timefields.size(); i++) {
			String TimefieldsName = Timefields.get(i).getText();
			switch (TimefieldsName) {
			case "Last 24 hours:":
				Assert.assertEquals(TimefieldsName, property.getProperty("TimeDatamoduletimelink1"));
				break;
			case "Last 72 hours":
				Assert.assertEquals(TimefieldsName, property.getProperty("TimeDatamoduletimelink2"));
				break;
			case "Last 7 days":
				Assert.assertEquals(TimefieldsName, property.getProperty("TimeDatamoduletimelink3"));
				break;
			case "Last 30 days":
				Assert.assertEquals(TimefieldsName, property.getProperty("TimeDatamoduletimelink4"));
				break;

			}
		}
		List<WebElement> punchesfields = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_criteria_block_fields_punches_list());
		Assert.assertEquals(punchesfields.get(0).getText(), property.getProperty("TimeDatamodulefield1"));
		Assert.assertEquals(punchesfields.get(1).getText(), property.getProperty("TimeDatamodulefield2"));

		List<WebElement> buttons = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_criteria_block_fields_buttons_list());
		Assert.assertTrue("Submit btn is display", buttons.get(0).isDisplayed());
		Assert.assertTrue("Reset btn is display", buttons.get(1).isDisplayed());

		Assert.assertTrue(driver.findElement(
				CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_ReportView_generated_report_btn())
				.isDisplayed());
		Assert.assertTrue(driver
				.findElement(CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_Report_Export_as_csv_btn())
				.isDisplayed());
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_Report_column_btn())
						.isDisplayed());
		Assert.assertTrue(driver
				.findElement(
						CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_Report_Save_preference_btn())
				.isDisplayed());

		List<WebElement> columnName = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_Report_table_columnsName_list());
		for (int i = 0; i < columnName.size(); i++) {
			String bb = columnName.get(i).getAttribute("class");
			if (!bb.contains("hidden")) {
				Assert.assertTrue("column name is display", columnName.get(i).isDisplayed());
			}

		}

		List<WebElement> btnsList = driver.findElements(CirrusDCSPageObjects5
				.getAttendance_module_Time_data_Time_data_Report_table_forword_backword_btns_list());
		for (int i = 0; i < btnsList.size(); i++) {
			Assert.assertTrue("btn is display", btnsList.get(i).isDisplayed());
		}

		List<WebElement> selectpagebtn = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_Report_table_selectPage_btns_list());
		for (int i = 0; i < selectpagebtn.size(); i++) {
			Assert.assertTrue("column name is display", btnsList.get(i).isDisplayed());
		}

	}

	@Given("^I click on the column btn and all the fields under the column btn is displayed in the visitor log page$")
	public void I_click_on_the_column_btn_and_all_the_fields_under_the_column_btn_is_displayed_in_the_visitor_log_page()
			throws InterruptedException {
		driver.findElement(CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_Report_columns_btn())
				.click();
		Thread.sleep(1000);
		List<WebElement> eleoption = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_Report_columns_btn_all_options());
		for (int i = 0; i < eleoption.size(); i++) {
			String name = eleoption.get(i).getText();
			Assert.assertEquals(name, property.getProperty("VisitorModuleColumnbtnOption" + i));
		}
	}

	@Given("^I click on the column btn and all the fields under the column btn is displayed$")
	public void I_click_on_the_column_btn_and_all_the_fields_under_the_column_btn_is_displayed()
			throws InterruptedException {
		driver.findElement(CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_Report_column_btn()).click();
		Thread.sleep(1000);
		List<WebElement> eleoption = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_Report_column_all_options());
		for (int i = 0; i < eleoption.size(); i++) {
			Assert.assertTrue(eleoption.get(i).isDisplayed());
		}
	}

	@Given("^I verify that user is able to access the Reset button and verify that the fields under Visitor Log Criteria are cleared$")
	public void I_verify_that_user_is_able_to_access_the_Reset_button_and_verify_that_the_fields_under_Visitor_Log_Criteria_are_cleared()
			throws InterruptedException {
		List<WebElement> Times = driver
				.findElements(CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_criteria_Dates());
		List<WebElement> showExceptionpunchesdropdown = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_criteria_all_Input_fields());
		List<WebElement> btns = driver
				.findElements(CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_criteria_all_buttons());

		showExceptionpunchesdropdown.get(0).sendKeys(property.getProperty("VisitorModuleDeviceField"));

		showExceptionpunchesdropdown.get(1).sendKeys(property.getProperty("VisitorModuleVisitorIdField"));
		showExceptionpunchesdropdown.get(2).sendKeys(property.getProperty("VisitorModuleEmployeeNoField"));
		showExceptionpunchesdropdown.get(3).sendKeys(property.getProperty("VisitorModuleFirstNameField"));
		showExceptionpunchesdropdown.get(4).sendKeys(property.getProperty("VisitorModuleLastNameField"));
		Times.get(0).sendKeys(property.getProperty("VisitorModuleFromTime"));
		Times.get(1).sendKeys(property.getProperty("VisitorModuleToTime"));

		btns.get(1).click();
		System.out.println("User is able to reset the the fields by clicking on the reset button");

	}

	@Given("^I verify that user is able to view the records list in the Visitor Log Report according to the selecting from the show Exception punches$")
	public void I_verify_that_user_is_able_to_view_the_records_list_in_the_Visitor_Log_Report_according_to_the_selecting_from_the_show_Exception_punches()
			throws InterruptedException {
		List<String> list = new ArrayList<>();
		List<WebElement> showExceptionpunchesdropdown = driver
				.findElements(CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_criteria_all_fields());
		List<WebElement> showExceptionpunchesdropdownvalue = driver.findElements(CirrusDCSPageObjects5
				.getAttendance_module_Visitor_log_Visitorlog_criteria_show_exeception_punches_field_options());
		List<WebElement> Times = driver
				.findElements(CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_criteria_Dates());
		Times.get(0).sendKeys(property.getProperty("VisitorModuleFromTime"));
		Times.get(1).sendKeys(property.getProperty("VisitorModuleToTime"));
		List<WebElement> btns = driver
				.findElements(CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_criteria_all_buttons());
		btns.get(0).click();
		wait.until(ExpectedConditions.invisibilityOf(driver.findElement(CirrusDCSPageObjects5.getGlobalLoadingImg())));

		List<WebElement> Visitoremp_Att_stateList = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_Report_table_column_Att_state_list());
		for (int i = 0; i < Visitoremp_Att_stateList.size(); i++) {
			String Att_state = Visitoremp_Att_stateList.get(i).getText();
			list.add(Att_state);
		}
		if (list.contains(property.getProperty("VisitorModuleVisitorLogReportAtt_state"))) {
			System.out.println("filter is working based on the input");
		} else {
			System.out.println("filter is not working based on the input");
		}

		Thread.sleep(1000);
		showExceptionpunchesdropdown.get(13).click();
		Thread.sleep(1000);
		showExceptionpunchesdropdownvalue.get(1).click();
		btns.get(0).click();
		wait.until(ExpectedConditions.invisibilityOf(driver.findElement(CirrusDCSPageObjects5.getGlobalLoadingImg())));

		Thread.sleep(1000);
		List<WebElement> visitorIdList = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_Report_table_column_VisitorId_list());
		int numb = visitorIdList.size();
		if (numb > 1) {
			System.out.println("user is able to fetch the data based on the date");
		} else {
			String msg = driver.findElement(
					CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_Report_table_No_records_found())
					.getText();
			Assert.assertEquals(msg, "No records found.");
		}
	}

	@Given("^I verify that user is able access the Show Exception Punches drop down and verify the all the options$")
	public void I_verify_that_user_is_able_access_the_Show_Exception_Punches_drop_down_and_verify_the_all_the_options()
			throws InterruptedException {
		List<WebElement> showExceptionpunchesdropdown = driver
				.findElements(CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_criteria_all_fields());
		showExceptionpunchesdropdown.get(13).click();
		Thread.sleep(1000);
		List<WebElement> showExceptionpunchesdropdownvalue = driver.findElements(CirrusDCSPageObjects5
				.getAttendance_module_Visitor_log_Visitorlog_criteria_show_exeception_punches_field_options());
		String value1 = showExceptionpunchesdropdownvalue.get(0).getText();
		String value2 = showExceptionpunchesdropdownvalue.get(1).getText();
		Assert.assertEquals(value1, property.getProperty("VisitorModuleShowExceptionPunchesvalue1"));
		Assert.assertEquals(value2, property.getProperty("VisitorModuleShowExceptionPunchesvalue2"));
	}

	@Given("^I verify that user is able to view the records list in the Visitor Log Report according to the data entered in the Visitor Id field$")
	public void I_verify_that_user_is_able_to_view_the_records_list_in_the_Visitor_Log_Report_according_to_the_data_entered_in_the_VisitorId_field()
			throws InterruptedException {
		List<String> list = new ArrayList<>();
		List<WebElement> showExceptionpunchesdropdown = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_criteria_all_Input_fields());
		showExceptionpunchesdropdown.get(1).sendKeys(property.getProperty("VisitorModuleVisitorIdField"));
		Thread.sleep(1000);
		List<WebElement> Times = driver
				.findElements(CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_criteria_Dates());
		Times.get(0).sendKeys(property.getProperty("VisitorModuleFromTime"));
		Times.get(1).sendKeys(property.getProperty("VisitorModuleToTime"));
		List<WebElement> btns = driver
				.findElements(CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_criteria_all_buttons());
		btns.get(0).click();
		wait.until(ExpectedConditions.invisibilityOf(driver.findElement(CirrusDCSPageObjects5.getGlobalLoadingImg())));

		List<WebElement> VisitorempIdList = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_Report_table_column_VisitorId_list());
		for (int i = 0; i < VisitorempIdList.size(); i++) {
			String empNo = VisitorempIdList.get(i).getText();
			list.add(empNo);
		}
		if (list.contains(property.getProperty("VisitorModuleVisitorIdField"))) {
			System.out.println("filter is working based on the input");
		} else {
			System.out.println("filter is not working based on the input");
		}
	}

	@Given("^I verify that user is able to view the records list in the Visitor Log Report according to the data entered in the Device field$")
	public void I_verify_that_user_is_able_to_view_the_records_list_in_the_Visitor_Log_Report_according_to_the_data_entered_in_the_Device_field()
			throws InterruptedException {
		List<String> list = new ArrayList<>();
		List<WebElement> showExceptionpunchesdropdown = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_criteria_all_Input_fields());
		showExceptionpunchesdropdown.get(0).sendKeys(property.getProperty("VisitorModuleDeviceField"));
		Thread.sleep(1000);
		List<WebElement> Times = driver
				.findElements(CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_criteria_Dates());
		Times.get(0).sendKeys(property.getProperty("VisitorModuleFromTime"));
		Times.get(1).sendKeys(property.getProperty("VisitorModuleToTime"));
		List<WebElement> btns = driver
				.findElements(CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_criteria_all_buttons());
		btns.get(0).click();
		wait.until(ExpectedConditions.invisibilityOf(driver.findElement(CirrusDCSPageObjects5.getGlobalLoadingImg())));

		List<WebElement> VisitordeviceList = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_Report_table_column_DeviceSn_list());
		for (int i = 0; i < VisitordeviceList.size(); i++) {
			String empNo = VisitordeviceList.get(i).getText();
			list.add(empNo);
		}
		if (list.contains(property.getProperty("VisitorModuleDeviceField"))) {
			System.out.println("filter is working based on the input");
		} else {
			System.out.println("filter is not working based on the input");
		}
	}

	@Given("^I verify that user is able to view the records list in the Visitor Log Report according to the data entered in the employee no$")
	public void I_verify_that_user_is_able_to_view_the_records_list_in_the_Visitor_Log_Report_according_to_the_data_entered_in_the_employee_no()
			throws InterruptedException {
		List<String> list = new ArrayList<>();
		List<WebElement> showExceptionpunchesdropdown = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_criteria_all_Input_fields());
		showExceptionpunchesdropdown.get(2).sendKeys(property.getProperty("VisitorModuleEmployeeNoField"));
		Thread.sleep(1000);
		List<WebElement> Times = driver
				.findElements(CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_criteria_Dates());
		Times.get(0).sendKeys(property.getProperty("VisitorModuleFromTime"));
		Times.get(1).sendKeys(property.getProperty("VisitorModuleToTime"));
		List<WebElement> btns = driver
				.findElements(CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_criteria_all_buttons());
		btns.get(0).click();
		wait.until(ExpectedConditions.invisibilityOf(driver.findElement(CirrusDCSPageObjects5.getGlobalLoadingImg())));

		List<WebElement> VisitorempNoList = driver.findElements(CirrusDCSPageObjects5
				.getAttendance_module_Visitor_log_Visitorlog_Report_table_column_EmployeeNo_list());
		for (int i = 0; i < VisitorempNoList.size(); i++) {
			String empNo = VisitorempNoList.get(i).getText();
			list.add(empNo);
		}
		if (list.contains(property.getProperty("VisitorModuleEmployeeNoField"))) {
			System.out.println("filter is working based on the input");
		} else {
			System.out.println("filter is not working based on the input");
		}
	}

	@Given("^I verify that user is able to view the records list in the Visitor Log Report according to the data entered in the First name$")
	public void I_verify_that_user_is_able_to_view_the_records_list_in_the_Visitor_Log_Report_according_to_the_data_entered_in_the_First_name()
			throws InterruptedException {
		List<String> list = new ArrayList<>();
		List<WebElement> showExceptionpunchesdropdown = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_criteria_all_Input_fields());
		showExceptionpunchesdropdown.get(3).sendKeys(property.getProperty("VisitorModuleFirstNameField"));
		Thread.sleep(1000);
		List<WebElement> Times = driver
				.findElements(CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_criteria_Dates());
		Times.get(0).sendKeys(property.getProperty("VisitorModuleFromTime"));
		Times.get(1).sendKeys(property.getProperty("VisitorModuleToTime"));
		List<WebElement> btns = driver
				.findElements(CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_criteria_all_buttons());
		btns.get(0).click();
		wait.until(ExpectedConditions.invisibilityOf(driver.findElement(CirrusDCSPageObjects5.getGlobalLoadingImg())));

		List<WebElement> VisitorNameList = driver.findElements(CirrusDCSPageObjects5
				.getAttendance_module_Visitor_log_Visitorlog_Report_table_column_visitorName_list());
		for (int i = 0; i < VisitorNameList.size(); i++) {
			String Name = VisitorNameList.get(i).getText();
			String ma[] = Name.split(" ");
			list.add(ma[0]);
		}
		if (list.contains(property.getProperty("VisitorModuleFirstNameField"))) {
			System.out.println("filter is working based on the input");
		} else {
			System.out.println("filter is not working based on the input");
		}
	}

	@Given("^I verify that user is able to view the records list in the Visitor Log Report according to the data entered in the last name$")
	public void I_verify_that_user_is_able_to_view_the_records_list_in_the_Visitor_Log_Report_according_to_the_data_entered_in_the_last_name()
			throws InterruptedException {
		List<String> list = new ArrayList<>();
		List<WebElement> showExceptionpunchesdropdown = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_criteria_all_Input_fields());
		showExceptionpunchesdropdown.get(4).sendKeys(property.getProperty("VisitorModuleLastNameField"));
		Thread.sleep(1000);
		List<WebElement> Times = driver
				.findElements(CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_criteria_Dates());
		Times.get(0).sendKeys(property.getProperty("VisitorModuleFromTime"));
		Times.get(1).sendKeys(property.getProperty("VisitorModuleToTime"));
		List<WebElement> btns = driver
				.findElements(CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_criteria_all_buttons());
		btns.get(0).click();
		wait.until(ExpectedConditions.invisibilityOf(driver.findElement(CirrusDCSPageObjects5.getGlobalLoadingImg())));

		List<WebElement> VisitorNameList = driver.findElements(CirrusDCSPageObjects5
				.getAttendance_module_Visitor_log_Visitorlog_Report_table_column_visitorName_list());
		for (int i = 0; i < VisitorNameList.size(); i++) {
			String Name = VisitorNameList.get(i).getText();
			String ma[] = Name.split(" ");
			list.add(ma[1]);
		}
		if (list.contains(property.getProperty("VisitorModuleLastNameField"))) {
			System.out.println("filter is working based on the input");
		} else {
			System.out.println("filter is not working based on the input");
		}
	}

	@Given("^I verify that user is able to fetch the records without entering any data in the fields except From and To fields$")
	public void I_verify_that_user_is_able_to_fetch_the_records_without_entering_any_data_in_the_fields_except_From_and_To_fields()
			throws InterruptedException {
		List<WebElement> Times = driver
				.findElements(CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_criteria_Dates());
		Times.get(0).sendKeys(property.getProperty("VisitorModuleFromTime"));
		Times.get(1).sendKeys(property.getProperty("VisitorModuleToTime"));
		List<WebElement> btns = driver
				.findElements(CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_criteria_all_buttons());
		btns.get(0).click();
		wait.until(ExpectedConditions.invisibilityOf(driver.findElement(CirrusDCSPageObjects5.getGlobalLoadingImg())));

		List<WebElement> emplList = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_Report_table_column_VisitorId_list());
		int numb = emplList.size();
		if (numb > 1) {
			System.out.println("user is able to fetch the data based on the date");
		} else {
			String msg = driver.findElement(
					CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_Report_table_No_records_found())
					.getText();
			System.out.println(msg);
		}

	}

	@Given("^I verify that user is able to enter the data in the From and To fields which are the mandatory fields in the visitor log page$")
	public void I_verify_that_user_is_able_to_enter_the_data_in_the_From_and_To_fields_which_are_the_mandatory_fields_in_the_visitor_log_page()
			throws InterruptedException {
		List<WebElement> Times = driver
				.findElements(CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_criteria_Dates());
		Times.get(0).sendKeys(property.getProperty("VisitorModuleFromTime"));
		Times.get(1).sendKeys(property.getProperty("VisitorModuleToTime"));
		driver.findElement(CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_criteria_txt()).click();
		System.out.println("user is able to enter the date in the fields");
	}

	@Given("^I verify that user is able to view the records in the table as per the option selected in the visitor log page$")
	public void I_verify_that_user_is_able_to_view_the_records_in_the_table_as_per_the_option_selected_in_the_visitor_log_page()
			throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		List<WebElement> Times = driver
				.findElements(CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_criteria_Dates());
		Times.get(0).sendKeys(property.getProperty("VisitorModuleFromTime"));
		Times.get(1).sendKeys(property.getProperty("VisitorModuleToTime"));
		List<WebElement> btns = driver
				.findElements(CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_criteria_all_buttons());
		btns.get(0).click();
		wait.until(ExpectedConditions.invisibilityOf(driver.findElement(CirrusDCSPageObjects5.getGlobalLoadingImg())));

		for (int i = 0; i < 4; i++) {
			WebElement selectbtn = driver
					.findElement(CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_Report_pagebtn());
			js.executeScript("arguments[0].click();", selectbtn);
			List<WebElement> selectpagebtn = driver.findElements(CirrusDCSPageObjects5
					.getAttendance_module_Visitor_log_Visitorlog_Report_table_selectPage_btns_list());
			String no = selectpagebtn.get(i).getText();
			int NUM = Integer.parseInt(no);
			selectpagebtn.get(i).click();
			Thread.sleep(2000);
			wait.until(
					ExpectedConditions.invisibilityOf(driver.findElement(CirrusDCSPageObjects5.getGlobalLoadingImg())));

			js.executeScript("window.scrollBy(0,-1000)");
			Thread.sleep(2000);
			List<WebElement> emplList = driver.findElements(CirrusDCSPageObjects5
					.getAttendance_module_Visitor_log_Visitorlog_Report_table_column_VisitorId_list());
			int numb = emplList.size();

			if (numb <= NUM) {
				System.out.println("records are displaying based on the selected btn");
			} else {
				System.out.println("records are not displaying based on the selected btn");
			}

			emplList.clear();
		}

	}

	@Given("^I verify that user is able to view the records in the table as per the option selected in the time data page$")
	public void I_verify_that_user_is_able_to_view_the_records_in_the_table_as_per_the_option_selected_in_the_time_data_page()
			throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		List<WebElement> TimeLink = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_criteria_block_fields_time_list());
		TimeLink.get(3).click();
		Thread.sleep(500);
		js.executeScript("window.scrollBy(0,1000)");
		List<WebElement> SubmitBtn = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_criteria_block_fields_buttons_list());
		SubmitBtn.get(0).click();
		wait.until(ExpectedConditions.invisibilityOf(driver.findElement(CirrusDCSPageObjects5.getGlobalLoadingImg())));
		Thread.sleep(500);

		for (int i = 0; i < 4; i++) {
			WebElement selectbtn = driver.findElement(
					CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_Report_table_selectPage_btn());
			js.executeScript("arguments[0].click();", selectbtn);
			List<WebElement> selectpagebtn = driver.findElements(
					CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_Report_table_selectPage_btns_list());

			String no = selectpagebtn.get(i).getText();
			selectpagebtn.get(i).click();
			Thread.sleep(2000);
			wait.until(
					ExpectedConditions.invisibilityOf(driver.findElement(CirrusDCSPageObjects5.getGlobalLoadingImg())));

			js.executeScript("window.scrollBy(0,-1000)");
			Thread.sleep(2000);
			List<WebElement> emplList = driver.findElements(
					CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_Report_table_EmployeeNo_list());
			int numb = emplList.size();
			String s = String.valueOf(numb);
			if (s.contains(no)) {
				System.out.println("records are display based on the selected btn");
			} else {
				System.out.println("records are not display based on the selected btn");
			}

			emplList.clear();
		}

	}

	@Given("^I click on the records per page drop down and all the options are displayed in the visirtor log page$")
	public void I_click_on_the_records_per_page_drop_down_and_all_the_options_are_displayed_in_the_visirtor_log_page()
			throws InterruptedException {
		driver.findElement(
				CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_Report_table_selectPage_btns_list())
				.click();
		List<WebElement> selectpagebtn = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_Report_table_selectPage_btns_list());
		for (int i = 0; i < selectpagebtn.size(); i++) {
			String no = selectpagebtn.get(i).getText();
			Assert.assertEquals(no, property.getProperty("VisitorModuleSelectPagebtn" + i));

		}
	}

	@Given("^I click on the records per page drop down and all the options are displayed$")
	public void I_click_on_the_records_per_page_drop_down_and_all_the_options_are_displayed()
			throws InterruptedException {
		driver.findElement(CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_Report_table_selectPage_btn())
				.click();
		List<WebElement> selectpagebtn = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_Report_table_selectPage_btns_list());
		for (int i = 0; i < selectpagebtn.size(); i++) {
			String no = selectpagebtn.get(i).getText();
			System.out.println(no);
		}
	}

	@Given("^I select the option from the column btn and that is only display in the visitor log page$")
	public void I_select_the_option_from_the_column_btn_and_that_is_only_display_in_the_visitor_log_page()
			throws InterruptedException {
		List<String> list1 = new ArrayList<>();
		List<String> list2 = new ArrayList<>();
		List<WebElement> eleoptioncheckbox = driver.findElements(CirrusDCSPageObjects5
				.getAttendance_module_Visitor_log_Visitorlog_Report_columns_btn_all_options_checkbox());
		List<WebElement> eleoption = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_Report_columns_btn_all_options());
		for (int i = 0; i < eleoptioncheckbox.size(); i++) {
			String value = eleoptioncheckbox.get(i).getAttribute("class");
			if (value.contains("active")) {
				eleoptioncheckbox.get(i).click();
				Thread.sleep(300);
			}
		}
		for (int j = 0; j < eleoptioncheckbox.size(); j++) {
			j = 2 + j;
			eleoptioncheckbox.get(j).click();
			Thread.sleep(300);
			String name1 = eleoption.get(j).getText();
			list1.add(name1);
			Thread.sleep(300);

		}
		List<WebElement> columnName = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_Report_table_columnsList());
		for (int i = 0; i < columnName.size(); i++) {

			String bb = columnName.get(i).getAttribute("class");
			String name = columnName.get(i).getText().trim();

			if (!bb.contains("hidden")) {
				list2.add(name);

			}

		}
		Thread.sleep(1000);
		if (list1.equals(list2) == true) {
			System.out.println(
					"based on the option from the column btn and that columns are only displaying in the visitor log page");
		} else

		{
			System.out.println(
					"based on the option from the column btn and that columns are not displaying in the visitor log page");
		}

	}

	@Given("^I select the option from the column btn and that is only display in the time data Report block$")
	public void I_select_the_option_from_the_column_btn_and_that_is_only_display_in_the_time_data_Report_block()
			throws InterruptedException {

		List<String> list1 = new ArrayList<>();
		list2 = new ArrayList<>();
		List<WebElement> eleoptioncheckbox = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_Report_column_all_options_checkbox());
		List<WebElement> eleoption = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_Report_column_all_options());
		for (int i = 0; i < eleoptioncheckbox.size(); i++) {
			String value = eleoptioncheckbox.get(i).getAttribute("class");
			if (value.contains("active")) {
				eleoptioncheckbox.get(i).click();
				Thread.sleep(300);
			}
		}
		for (int j = 0; j < eleoptioncheckbox.size(); j++) {
			j = 2 * j;
			eleoptioncheckbox.get(j).click();
			Thread.sleep(300);
			String name1 = eleoption.get(j).getText();
			list1.add(name1);
			Thread.sleep(300);

		}
		Thread.sleep(1000);
		driver.findElement(CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_Report_Save_preference_btn())
				.click();
		Thread.sleep(1000);
		List<WebElement> columnName = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Time_data_Time_data_Report_table_columnsName_list());
		for (int i = 0; i < columnName.size(); i++) {
			String bb = columnName.get(i).getAttribute("class");
			if (!bb.contains("hidden")) {
				String name2 = columnName.get(i).getText();
				Thread.sleep(300);
				list2.add(name2);

			}
		}
		int k = list1.size();
		System.out.println(k);
		int kt = list2.size();
		System.out.println(kt);

		if (k == kt) {
			System.out.println("As per the preference columns are displaying");
		} else {
			System.out.println("As per the preference columns are not displaying");
		}

	}

	@Given("^I View the code, Type and status of the tenant and open the new window$")
	public void I_View_the_code_Type_and_status_of_the_tenant_and_I_open_the_new_window() throws AWTException {
		Tenantcode = driver.findElement(CirrusDCSPageObjects.getBasic_Information_Client_code()).getText();
		TenantType = driver.findElement(CirrusDCSPageObjects.getBasic_Information_Client_Type()).getText();
		TenantStatus = driver.findElement(CirrusDCSPageObjects.Basic_Information_Client_status()).getText();

		Robot robot = new Robot();
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_T);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		robot.keyRelease(KeyEvent.VK_T);
		ArrayList<String> tabs = new ArrayList<String>(driver.getWindowHandles());
		driver.switchTo().window(tabs.get(0));
	}

	@Given("^I visit CirrusDCS Tenantlogin page$")
	public void I_visit_CirrusDCS_Tenantlogin_page() {
		driver.get(property.getProperty("TenantLoginUrl"));
	}

	@Then("^I visit CirrusDCS Tenantlogin with valid credentials$")
	public void I_visit_CirrusDCS_Tenantlogin_with_valid_credentials() {
		driver.findElement(CirrusDCSPageObjects.getusername()).sendKeys(property.getProperty("TenatUserName"));
		driver.findElement(CirrusDCSPageObjects.getPassword()).sendKeys(property.getProperty("TenantPassword"));
		driver.findElement(CirrusDCSPageObjects.getSignin()).click();
	}

	@Then("^I click on the Device manager module page$")
	public void I_click_on_the_Device_manager_module_page() {
		driver.findElement(CirrusDCSPageObjects7.getTenantPage_DeviceMannager_module()).click();
	}

	@Then("^I click on the Account module page$")
	public void I_click_on_the_Account_module_page() {
		driver.findElement(CirrusDCSPageObjects6.getTenantPage_Account_module()).click();
	}

	@Then("^I click on the subscription tab and user is able to update the subscriptions$")
	public void I_click_on_the_subscription_tab_and_user_is_able_to_update_the_subscriptions()
			throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		WebElement btn = driver.findElement(
				CirrusDCSPageObjects6.getTenantPage_Account_AccountUser__user_Lists_colomn_record_per_Page_btn());
		btn.click();
		List<WebElement> recordperpages = driver.findElements(CirrusDCSPageObjects6
				.getTenantPage_Account_AccountUser__user_Lists_colomn_record_per_Page_btn_option());
		recordperpages.get(2).click();
		Thread.sleep(2000);
		List<WebElement> userName = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_AccountUser__user_Lists_user_name_lits());

		for (int i = 0; i < userName.size(); i++) {
			js.executeScript("arguments[0].scrollIntoView();", userName.get(i));
			String name = userName.get(i).getText();

			if (name.equalsIgnoreCase("Rishikesh Mishra")) {
				userName.get(i).click();
			}
		}
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("scroll(0,-800)");
		Thread.sleep(1000);
		List<WebElement> menu = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_AccountUser__user_details_all_menu());
		Thread.sleep(1000);
		menu.get(2).click();
		List<WebElement> events_subscription_checklist = driver.findElements(
				CirrusDCSPageObjects6.getTenantPage_Account_AccountUser_UserDetails_Subscriptions_check_List());
		events_subscription_checklist.get(0).click();
		events_subscription_checklist.get(0).click();

		WebElement button = driver.findElement(
				CirrusDCSPageObjects6.getTenantPage_Account_AccountUser_UserDetails_Update_Subscription_btn());
		js.executeScript("arguments[0].scrollIntoView();", button);
		button.click();
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getTenant_Module_Save_confirmation()).isDisplayed());
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Save_confirmation_Yes()).click();
		String msg = driver.findElement(By.xpath("//div[@class='ui-growl-message']")).getText();
		System.out.println(msg);
	}

	@Then("^I click on the subscription tab and all the event are displayed$")
	public void I_click_on_the_subscription_tab_and_all_the_event_are_displayed() throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		WebElement btn = driver.findElement(
				CirrusDCSPageObjects6.getTenantPage_Account_AccountUser__user_Lists_colomn_record_per_Page_btn());
		btn.click();
		List<WebElement> recordperpages = driver.findElements(CirrusDCSPageObjects6
				.getTenantPage_Account_AccountUser__user_Lists_colomn_record_per_Page_btn_option());
		recordperpages.get(2).click();
		Thread.sleep(2000);
		List<WebElement> userName = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_AccountUser__user_Lists_user_name_lits());

		for (int i = 0; i < userName.size(); i++) {
			js.executeScript("arguments[0].scrollIntoView();", userName.get(i));
			String name = userName.get(i).getText();

			if (name.equalsIgnoreCase("Rishikesh Mishra")) {
				userName.get(i).click();
			}
		}
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("scroll(0,-800)");
		Thread.sleep(1000);
		List<WebElement> menu = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_AccountUser__user_details_all_menu());
		Thread.sleep(1000);
		menu.get(2).click();
		Thread.sleep(1000);
		WebElement subscription_txt = driver
				.findElement(CirrusDCSPageObjects6.getTenantPage_Account_AccountUser_UserDetails_Subscription_txt());
		Assert.assertEquals(subscription_txt.getText(), "Events Subscription");

		List<WebElement> events_subscription_list = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_AccountUser_UserDetails_Subscriptions_List());

		for (int i = 0; i < events_subscription_list.size(); i++) {
			String value = events_subscription_list.get(i).getText();
			// System.out.println(value);
		}

		System.out.println("All the events subscription list are displaying");
		WebElement button = driver.findElement(
				CirrusDCSPageObjects6.getTenantPage_Account_AccountUser_UserDetails_Update_Subscription_btn());
		Assert.assertTrue(button.isDisplayed());
	}

	@Then("^I verify that user is able to update the particular roles$")
	public void I_verify_that_user_is_able_to_update_the_particular_roles() throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		WebElement btn = driver.findElement(
				CirrusDCSPageObjects6.getTenantPage_Account_AccountUser__user_Lists_colomn_record_per_Page_btn());
		btn.click();
		List<WebElement> recordperpages = driver.findElements(CirrusDCSPageObjects6
				.getTenantPage_Account_AccountUser__user_Lists_colomn_record_per_Page_btn_option());
		recordperpages.get(2).click();
		Thread.sleep(2000);
		List<WebElement> userName = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_AccountUser__user_Lists_user_name_lits());

		for (int i = 0; i < userName.size(); i++) {
			js.executeScript("arguments[0].scrollIntoView();", userName.get(i));
			String name = userName.get(i).getText();

			if (name.equalsIgnoreCase("Rishikesh Mishra")) {
				userName.get(i).click();
			}
		}
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("scroll(0,-800)");
		Thread.sleep(1000);
		List<WebElement> menu = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_AccountUser__user_details_all_menu());
		Thread.sleep(1000);
		menu.get(1).click();
		Thread.sleep(1000);
		List<WebElement> checkboxList = driver.findElements(
				CirrusDCSPageObjects6.getTenantPage_Account_AccountUser_UserDetails_ROles_check_box_List());
		checkboxList.get(0).click();
		Thread.sleep(1000);
		checkboxList.get(1).click();

		WebElement updateRolebtn = driver.findElement(
				CirrusDCSPageObjects6.getTenantPage_Account_AccountUser_UserDetails_ROles_Update_role_btn());
		j.executeScript("arguments[0].click();", updateRolebtn);
		;
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Save_confirmation_Yes()).click();
		String msg = driver.findElement(By.xpath("//div[@class='ui-growl-message']")).getText();
		System.out.println(msg);
	}

	@Then("^I verify that user is able to edit the user info and save it in the userinfo page$")
	public void I_verify_that_user_is_able_to_edit_the_user_info_and_save_it_in_the_userinfo_page()
			throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		WebElement btn = driver.findElement(
				CirrusDCSPageObjects6.getTenantPage_Account_AccountUser__user_Lists_colomn_record_per_Page_btn());
		btn.click();
		List<WebElement> recordperpages = driver.findElements(CirrusDCSPageObjects6
				.getTenantPage_Account_AccountUser__user_Lists_colomn_record_per_Page_btn_option());
		recordperpages.get(2).click();
		Thread.sleep(2000);
		List<WebElement> userName = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_AccountUser__user_Lists_user_name_lits());

		for (int i = 0; i < userName.size(); i++) {
			js.executeScript("arguments[0].scrollIntoView();", userName.get(i));
			String name = userName.get(i).getText();

			if (name.equalsIgnoreCase("Rishikesh Mishra")) {
				userName.get(i).click();
			}
		}
		Thread.sleep(2000);
		WebElement email = driver
				.findElement(By.xpath("(//div[@id='tenantinfo']/div/div/form[3]/div/div/div[2])[7]/input"));
		email.clear();
		email.sendKeys(SignUpEmail);
		List<WebElement> Save_cancel_btns = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_AccountUser_user_Details_table_All_buttons());
		Save_cancel_btns.get(0).click();
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Save_confirmation_Yes()).click();
		WebElement msg = driver
				.findElement(CirrusDCSPageObjects6.getTenantPage_Account_AccountUser_user_Details_successfully_msg());
		String msgg = msg.getText();
		// Assert.assertTrue(msgg.contains("successfully"));
		System.out.println(msgg);
	}

	@Then("^I verify that user is able to view that based on the btns data is displaying$")
	public void I_verify_that_user_is_able_to_view_that_based_on_the_btns_data_is_displaying()
			throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,1000)");

		List<WebElement> pagesbtn = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_AccountUser_user_Lists_pagination_btns());
		WebElement button = driver.findElement(
				CirrusDCSPageObjects6.getTenantPage_Account_AccountUser_user_Lists_pagination_forward_btn());
		for (int j = 0; j < pagesbtn.size(); j++) {

			js.executeScript("arguments[0].click();", button);
			Thread.sleep(2000);
			List<WebElement> s1ssd = driver
					.findElements(CirrusDCSPageObjects6.getTenantPage_Account_AccountUser_user_Lists_pagination_btns());
			for (int i = 0; i < s1ssd.size(); i++) {
				WebElement ds = s1ssd.get(i);
				String Name = ds.getAttribute("class");
				if (Name.equals("ui-paginator-page ui-state-default ui-corner-all ui-state-active")) {
					Assert.assertEquals(Name, property.getProperty("ClassAttribute"));

				}
			}
		}

		js.executeScript("window.scrollBy(0,-400)");
		driver.findElement(
				CirrusDCSPageObjects6.getTenantPage_Account_AccountUser_user_Lists_pagination_fast_forward_btn())
				.click();
		Thread.sleep(2000);

		for (int j = 0; j < pagesbtn.size(); j++) {
			driver.findElement(
					CirrusDCSPageObjects6.getTenantPage_Account_AccountUser_user_Lists_pagination_backward_btn())
					.click();
			Thread.sleep(2000);
			List<WebElement> s1ssd = driver
					.findElements(CirrusDCSPageObjects6.getTenantPage_Account_AccountUser_user_Lists_pagination_btns());
			for (int i = s1ssd.size() - 1; i >= 0; i--) {
				WebElement ds = s1ssd.get(i);
				String Name = ds.getAttribute("class");
				if (Name.equals("ui-paginator-page ui-state-default ui-corner-all ui-state-active")) {
					Assert.assertEquals(Name, property.getProperty("ClassAttribute"));
				}
			}
		}
	}

	@Then("^I click on the userinfo tab in the account users page$")
	public void I_click_on_the_userinfo_tab_in_the_account_users_page() {
		List<WebElement> tabslist = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_AccountUser__user_details_all_menu());
		tabslist.get(0).click();
	}

	@Then("^I verify that user is able to view all the tabs under the userinfo tabs in the account users page$")
	public void I_verify_that_user_is_able_to_view_all_the_tabs_under_the_userinfo_tabs_in_the_account_users_page()
			throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;

		WebElement name = driver.findElement(CirrusDCSPageObjects6.getTenantPage_Account_AccountUser__user_Lists_txt());
		Assert.assertEquals(name.getText(), "User Lists");
		List<WebElement> colmlist = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_AccountUser__user_Lists_colomnList_name());
		for (WebElement name1 : colmlist) {
			String Name = name1.getText();
			switch (Name) {
			case "User Name":
				Assert.assertEquals(Name, "User Name");
				break;
			case "Email Verification":
				Assert.assertEquals(Name, "Email Verification");
				break;
			}
		}
		Thread.sleep(1000);
		js.executeScript("window.scrollBy(0,1000)");
		WebElement btnslist = driver.findElement(
				CirrusDCSPageObjects6.getTenantPage_Account_AccountUser__user_Lists_colomn_pagination_btns());
		Assert.assertTrue(btnslist.isDisplayed());

		List<WebElement> recordperpages = driver.findElements(CirrusDCSPageObjects6
				.getTenantPage_Account_AccountUser__user_Lists_colomn_record_per_Page_btn_option());
		recordperpages.get(0).click();
		for (WebElement recordperpage : recordperpages) {
			String Recordperpage = recordperpage.getText();
			switch (Recordperpage) {
			case "10":
				Assert.assertEquals(Recordperpage, "10");
				break;
			case "20":
				Assert.assertEquals(Recordperpage, "20");
				break;
			case "50":
				Assert.assertEquals(Recordperpage, "50");
				break;
			}
		}
		WebElement NewUser_btn = driver
				.findElement(CirrusDCSPageObjects6.getTenantPage_Account_AccountUser__user_Lists_colomn_Newuser_btn());
		Assert.assertTrue(NewUser_btn.isDisplayed());
		WebElement UserDetails = driver
				.findElement(CirrusDCSPageObjects6.getTenantPage_Account_AccountUser__user_Details_Txt());
		Assert.assertEquals(UserDetails.getText(), "User Details");
		WebElement LinkUserFromEmployeeListbtn = driver
				.findElement(CirrusDCSPageObjects6.getTenantPage_Account_AccountUser_LinkUserFromEmployeeList_btn());
		Assert.assertTrue(LinkUserFromEmployeeListbtn.isDisplayed());

		List<WebElement> ElementsList = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_AccountUser_user_Details_table_elements());

		for (WebElement elementsList : ElementsList) {
			String Elements = elementsList.getText();

			switch (Elements) {
			case "User Id:*":
				Assert.assertEquals(Elements, "User Id:*");
				break;
			case "Client:":
				Assert.assertEquals(Elements, "Client:");
				break;
			case "Login Id":
				Assert.assertEquals(Elements, "Login Id");
				break;
			case "First Name*":
				Assert.assertEquals(Elements, "First Name*");
				break;
			case "Last Name":
				Assert.assertEquals(Elements, "Last Name");
				break;
			case "Email:*":
				Assert.assertEquals(Elements, "Email:*");
				break;
			case "Phone Number":
				Assert.assertEquals(Elements, "Phone Number");
				break;
			case "Password:":
				Assert.assertEquals(Elements, "Password:");
				break;
			case "Confirm Password:":
				Assert.assertEquals(Elements, "Confirm Password:");
				break;
			}
		}
		List<WebElement> checkboxes = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_AccountUser_user_Details_table_check_box());

		Assert.assertTrue(checkboxes.get(0).isDisplayed());
		Assert.assertTrue(checkboxes.get(1).isDisplayed());
		List<WebElement> radiobtns = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_AccountUser_user_Details_table_radio_btns());

		Assert.assertTrue(radiobtns.get(0).isDisplayed());
		Assert.assertTrue(radiobtns.get(1).isDisplayed());

		WebElement deleteLink = driver
				.findElement(CirrusDCSPageObjects6.getTenantPage_Account_AccountUser_user_Details_table_delete_link());
		Assert.assertTrue(deleteLink.isDisplayed());

		List<WebElement> Save_cancel_btns = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_AccountUser_user_Details_table_All_buttons());
		Assert.assertTrue(Save_cancel_btns.get(0).isDisplayed());
		Assert.assertTrue(Save_cancel_btns.get(1).isDisplayed());
	}

	@Then("^I verify that user is able to view all the tabs under the account users page$")
	public void I_verify_that_user_is_able_to_view_all_the_tabs_under_the_account_users_page() {

		List<WebElement> tabslist = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_AccountUser__user_details_all_menu());
		for (WebElement tabs : tabslist) {
			String tab = tabs.getText();
			System.out.println(tab);
			switch (tab) {
			case "Normal":
				Assert.assertEquals(tab, "User Info");
				break;
			case "Medium":
				Assert.assertEquals(tab, "Roles");
				break;
			case "Strong":
				Assert.assertEquals(tab, "Subscription");
				break;
			}
		}

	}

	@Then("^I click on the Roles icon and user is able to click on the check box which is present on the screen$")
	public void I_click_on_the_Roles_icon_and_user_is_able_to_click_on_the_check_box_which_is_present_on_the_screen()
			throws InterruptedException {

		JavascriptExecutor executor = (JavascriptExecutor) driver;

		List<WebElement> menu = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_AccountUser__user_details_all_menu());
		menu.get(1).click();
		List<WebElement> checkboxList = driver.findElements(
				CirrusDCSPageObjects6.getTenantPage_Account_AccountUser_UserDetails_ROles_check_box_List());

		for (int i = 0; i < checkboxList.size(); i++) {
			Thread.sleep(1000);
			executor.executeScript("arguments[0].click();", checkboxList.get(i));
			;
		}
		System.out.println("User is able to click on the check box");
	}

	@Then("^I click on the Roles icon which is located on the Account User page and view all the fields$")
	public void I_click_on_the_Roles_icon_which_is_located_on_the_Account_User_page_and_view_all_the_fields()
			throws InterruptedException {
		List<WebElement> menu = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_AccountUser__user_details_all_menu());
		menu.get(1).click();

		List<WebElement> ElementsList = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_AccountUser_UserDetails_ROles_column_list());

		for (WebElement elementsList : ElementsList) {
			String Elements = elementsList.getText();

			switch (Elements) {
			case "Role":
				Assert.assertEquals(Elements, "Role");
				break;
			case "Authorities":
				Assert.assertEquals(Elements, "Authorities");
				break;
			}
		}
		List<WebElement> usersList = driver.findElements(
				CirrusDCSPageObjects6.getTenantPage_Account_AccountUser_UserDetails_ROles_role_name_list());
		List<WebElement> AuthoritiesList = driver.findElements(
				CirrusDCSPageObjects6.getTenantPage_Account_AccountUser_UserDetails_ROles_role_name_list());

		for (int i = 0; i < usersList.size(); i++) {
			String username = usersList.get(i).getText();
			String Authoritiesname = AuthoritiesList.get(i).getText();
			System.out.println(
					"List of the username '" + username + "' and its authorities is '" + Authoritiesname + "'");
		}
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("scroll(0,1000)");
		WebElement updateRolebtn = driver.findElement(
				CirrusDCSPageObjects6.getTenantPage_Account_AccountUser_UserDetails_ROles_Update_role_btn());
		Assert.assertTrue(updateRolebtn.isDisplayed());

	}

	@Then("^I click on the New user button which is located on the Account User page$")
	public void I_click_on_the_New_user_button_which_is_located_on_the_Account_User_page() throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("scroll(0,800)");
		driver.findElement(CirrusDCSPageObjects6.getTenantPage_Account_AccountUser__user_Lists_colomn_Newuser_btn())
				.click();
		Thread.sleep(1000);
		List<WebElement> ElementsList = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_AccountUser_user_Details_table_elements());

		for (WebElement elementsList : ElementsList) {
			String Elements = elementsList.getText();

			switch (Elements) {
			case "User Id:*":
				Assert.assertEquals(Elements, "User Id:*");
				break;
			case "Client:":
				Assert.assertEquals(Elements, "Client:");
				break;
			case "Login Id":
				Assert.assertEquals(Elements, "Login Id");
				break;
			case "First Name*":
				Assert.assertEquals(Elements, "First Name*");
				break;
			case "Last Name":
				Assert.assertEquals(Elements, "Last Name");
				break;
			case "Email:*":
				Assert.assertEquals(Elements, "Email:*");
				break;
			case "Phone Number":
				Assert.assertEquals(Elements, "Phone Number");
				break;
			case "Password:":
				Assert.assertEquals(Elements, "Password:");
				break;
			case "Confirm Password:":
				Assert.assertEquals(Elements, "Confirm Password:");
				break;
			}
		}
		Thread.sleep(1000);
		List<WebElement> checkboxes = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_AccountUser_user_Details_table_check_box());

		Assert.assertTrue(checkboxes.get(0).isDisplayed());
		Assert.assertTrue(checkboxes.get(1).isDisplayed());
		List<WebElement> radiobtns = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_AccountUser_user_Details_table_radio_btns());

		Assert.assertTrue(radiobtns.get(0).isDisplayed());
		Assert.assertTrue(radiobtns.get(1).isDisplayed());

		Thread.sleep(1000);
		List<WebElement> Save_cancel_btns = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_AccountUser_user_Details_table_All_buttons());
		Assert.assertTrue(Save_cancel_btns.get(0).isDisplayed());
		Assert.assertTrue(Save_cancel_btns.get(1).isDisplayed());
	}

	@Then("^I verify that user is able to view the all the fields under the subscription screen$")
	public void I_verify_that_user_is_able_to_view_the_all_the_fields_under_the_subscription_screen()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		WebElement subcription_txt = driver.findElement(CirrusDCSPageObjects6.getTenantPage_Account_subcriptions_txt());
		Assert.assertEquals(subcription_txt.getText(), "Account >> Subscriptions");
		List<WebElement> columnNameList = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_subcriptions_table_column_list());

		for (WebElement columnName : columnNameList) {
			String column = columnName.getText();

			switch (column) {
			case "Events":
				Assert.assertEquals(column, "Events");
				break;
			case "Description":
				Assert.assertEquals(column, "Description");
				break;
			}
		}
		List<WebElement> events_subscription_list = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_subcriptions_table_event_list());
		List<WebElement> events_Description_list = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_subcriptions_table_DISCRIPTIONS_list());

		for (int i = 0; i < events_subscription_list.size(); i++) {
			String events_subscription = events_subscription_list.get(i).getText();
			String events_Description = events_Description_list.get(i).getText();
			// System.out.println("Event name is '"+events_subscription+"' and its
			// Descriptions is'"+events_Description+"'");
		}
		System.out.println("User is able to view the events and its descriptions");
		j.executeScript("scroll(0,1000)");
		List<WebElement> btns = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_subcriptions_all_buttons());
		for (int i = 0; i < btns.size(); i++) {
			Assert.assertTrue(btns.get(i).isDisplayed());
		}
	}

	@Then("^I verify that user is able to view that events are getting updated$")
	public void I_verify_that_user_is_able_to_view_that_events_are_updated() throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		List<WebElement> checklist = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_subcriptions_table_column_list());
		checklist.get(2).click();

		j.executeScript("scroll(0,1000)");
		List<WebElement> btns = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_subcriptions_all_buttons());
		if (btns.size() == 2) {
			btns.get(1).click();
		} else if (btns.size() == 1) {
			btns.get(0).click();
		}

		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Save_confirmation_Yes()).click();

		String msg = driver.findElement(By.xpath("//div[@class='ui-growl-message']/span")).getText();
		Assert.assertEquals(msg, "Subscription updated");
	}

	@Then("^I view that user is able to access the refresh button and messages are getting refresh$")
	public void I_view_that_user_is_able_to_access_the_refresh_button_and_messages_are_getting_refresh()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		List<WebElement> buttons = driver.findElements(
				CirrusDCSPageObjects6.getTenantPage_Account_Events_table_Refresh_delete_selected_Messages_buttons());
		j.executeScript("arguments[0].scrollIntoView();", buttons);
		buttons.get(0).click();

	}

	@Then("^I view that user is able to view all the fields under the events page$")
	public void I_view_that_user_is_able_to_view_all_the_fields_under_the_events_page() throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		WebElement txt = driver.findElement(CirrusDCSPageObjects6.getTenantPage_Account_Events_Txt());
		Assert.assertEquals(txt.getText(), "Account >> Events");
		List<WebElement> columns = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_Events_table_column_list());
		for (int i = 1; i < columns.size(); i++) {
			String columnName = columns.get(i).getText();
			System.out.println(columnName);
			switch (columnName) {
			case "Event Type":
				Assert.assertEquals(columnName, "Event Type");
				break;
			case "Date":
				Assert.assertEquals(columnName, "Date");
				break;
			case "Message":
				Assert.assertEquals(columnName, "Message");
				break;
			case "Action":
				Assert.assertEquals(columnName, "Action");
				break;

			}

		}

		List<WebElement> buttons = driver.findElements(
				CirrusDCSPageObjects6.getTenantPage_Account_Events_table_Refresh_delete_selected_Messages_buttons());
		j.executeScript("arguments[0].scrollIntoView();", buttons);
		Assert.assertTrue(buttons.get(0).isDisplayed());
		Assert.assertTrue(buttons.get(1).isDisplayed());

	}

	@Then("^I verify that user is able to view and access the Configure WSUnsubmitDataEvent button and different organization codes displaying in the drop down$")
	public void I_verify_that_user_is_able_to_view_and_access_the_Configure_WSUnsubmitDataEvent_button_and_different_organization_codes_displaying_in_the_drop_down()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		List<WebElement> checklist = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_subcriptions_table_column_list());

		j.executeScript("scroll(0,1000)");
		List<WebElement> btns = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_subcriptions_all_buttons());
		System.out.println(btns.size());
		if (btns.size() == 2) {
			btns.get(0).click();
			Thread.sleep(1000);

		} else if (btns.size() == 1) {
			j.executeScript("scroll(0,-1000)");
			checklist.get(2).click();
			j.executeScript("scroll(0,1000)");
			btns.get(0).click();
			Thread.sleep(1000);
		}

		WebElement WSUnsubmitData_Event_txt = driver
				.findElement(CirrusDCSPageObjects6.getTenantPage_Account_subcriptions_Configure_WSUnsubmitData_Event());
		System.out.println(WSUnsubmitData_Event_txt.getText());

		driver.findElement(
				CirrusDCSPageObjects6.getTenantPage_Account_subcriptions_Configure_WSUnsubmitData_Event_org_code())
				.click();

		List<WebElement> orgcodeList = driver.findElements(CirrusDCSPageObjects6
				.getTenantPage_Account_subcriptions_Configure_WSUnsubmitData_Event_org_code_list());
		System.out.println(orgcodeList.size());
		for (int i = 0; i < orgcodeList.size(); i++) {
			Assert.assertTrue(orgcodeList.get(i).isDisplayed());
		}
	}

	@Then("^I verify that user is able to view all fields are displaying in the  Add New Role pop up screen$")
	public void I_verify_that_user_is_able_to_view_all_fields_are_displaying_in_the_Add_New_Role_pop_up_screen()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		WebElement AddNewBtn = driver
				.findElement(CirrusDCSPageObjects6.getTenantPage_Account_Roles_RolesList_table_AddNewButton());

		AddNewBtn.click();
		Thread.sleep(1000);
		List<WebElement> fields = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_Roles_AddNewRoleBtn_window_fields());

		for (int i = 0; i < fields.size() - 1; i++) {
			String values = fields.get(i).getText();
			switch (values) {
			case "Role Name*":
				Assert.assertEquals(values, "Role Name*");
				break;
			case "Description*":
				Assert.assertEquals(values, "Description*");
				break;
			case "Access Scope*":
				Assert.assertEquals(values, "Access Scope*");
				break;

			}
		}
		List<WebElement> btns = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_Roles_AddNewRoleBtn_window_fields_btns());
		for (int i = 0; i < btns.size(); i++) {
			String btn = btns.get(i).getText();
			switch (btn) {
			case "Save":
				Assert.assertEquals(btn, "Save");
				break;
			case "Cancel":
				Assert.assertEquals(btn, "Cancel");
				break;
			}
		}
	}

	@Then("^I verify that user is able to view all the fields which are available on the Roles page$")
	public void I_verify_that_user_is_able_to_view_all_the_fields_which_are_available_on_the_Roles_page()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;

		WebElement txt = driver.findElement(CirrusDCSPageObjects6.getTenantPage_Account_Roles_Txt());
		Assert.assertEquals(txt.getText(), "Account >> Tenant Level Roles and Permissions");
		List<WebElement> columns_name = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_Roles_RolesList_tablecolumn_list());
		Assert.assertTrue(columns_name.get(0).isDisplayed());
		Assert.assertTrue(columns_name.get(1).isDisplayed());

		List<WebElement> Actioncolumns = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_Roles_RolesList_table_actioncolumns_list());
		Assert.assertTrue(Actioncolumns.get(0).isDisplayed());
		Assert.assertTrue(Actioncolumns.get(1).isDisplayed());

		Actioncolumns.get(0).click();
		WebElement AddNewBtn = driver
				.findElement(CirrusDCSPageObjects6.getTenantPage_Account_Roles_RolesList_table_AddNewButton());
		j.executeScript("arguments[0].scrollIntoView();", AddNewBtn);
		Assert.assertTrue(AddNewBtn.isDisplayed());

		WebElement Name = driver.findElement(CirrusDCSPageObjects6.getTenantPage_Account_Roles_UserRoleSetting_txt());
		String[] value = Name.getText().split("-");
		String name = value[0].trim();
		System.out.println(name);
		Thread.sleep(100);
		Assert.assertEquals(name, "User Role Settings");

		List<WebElement> fields = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_Roles_UserRoleSetting_fields_list());
		for (int i = 0; i < fields.size(); i++) {
			String values = fields.get(i).getText();
			switch (values) {
			case "Role Name:":
				Assert.assertEquals(values, "Role Name:");
				break;
			case "Role Description:":
				Assert.assertEquals(values, "Role Description:");
				break;
			case "Access Scope:":
				Assert.assertEquals(values, "Access Scope:");
				break;

			}
		}

		Thread.sleep(1000);
		j.executeScript("scroll(0,-1000)");
		WebElement Arrow = driver
				.findElement(CirrusDCSPageObjects6.getTenantPage_Account_Roles_UserRoleSetting_Arrow());
		j.executeScript("arguments[0].click();", Arrow);
		List<WebElement> AccessScopeList = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_Roles_AccessScope_list());
		for (int i = 0; i < AccessScopeList.size(); i++) {
			String values = AccessScopeList.get(i).getText();

			switch (values) {
			case "SUPERVISOR":
				Assert.assertEquals(values, "SUPERVISOR");
				break;
			case "ADMIN":
				Assert.assertEquals(values, "ADMIN");
				break;
			case "USER":
				Assert.assertEquals(values, "USER");
				break;

			}
		}
		List<WebElement> btns = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_Roles_UserRoleSetting_fields_buttons());
		Assert.assertTrue(btns.get(0).isDisplayed());
		Assert.assertTrue(btns.get(1).isDisplayed());

		WebElement txtt = driver.findElement(CirrusDCSPageObjects6.getTenantPage_Account_Roles_AccessiblePages_txt());
		Assert.assertEquals(txtt.getText(), "Accessible Pages");
		WebElement AddNewAvailablePage = driver
				.findElement(CirrusDCSPageObjects6.getTenantPage_Account_Roles_AddNewAvailablePage_btn());
		Assert.assertTrue(AddNewAvailablePage.isDisplayed());

		List<WebElement> AccessiblePages_columns = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_Roles_AccessiblePages_table_columns());
		for (int i = 0; i < AccessiblePages_columns.size(); i++) {
			String values = AccessiblePages_columns.get(i).getText();
			switch (values) {
			case "Pages":
				Assert.assertEquals(values, "Pages");
				break;
			case "URL":
				Assert.assertEquals(values, "URL");
				break;
			case "Permission Level":
				Assert.assertEquals(values, "Permission Level");
				break;
			case "Action":
				Assert.assertEquals(values, "Action");
				break;

			}
		}
	}

	@Then("^I click on the any one role and its user role settings and Accessible pages are displaying$")
	public void I_click_on_the_any_one_role_and_its_user_role_settings_and_Accessible_pages_are_displaying()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		driver.findElement(By.xpath("//div[@id='roleListForm:roleListTable']/div[2]/table/tbody/tr[3]/td[1]")).click();
		List<WebElement> fields = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_Roles_UserRoleSetting_fields_list());
		for (int i = 0; i < fields.size(); i++) {
			Assert.assertTrue(fields.get(i).isDisplayed());
		}

		List<WebElement> value = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_Roles_AccessiblePages_table_values());
		System.out.println(value.size());
		for (int k = 0; k < value.size(); k++) {
			for (int i = k; i < k; i++) {
				j.executeScript("scroll(0,100)");
			}

			for (int jj = k; jj < k; jj++) {
				Assert.assertTrue(value.get(jj).isDisplayed());
			}
		}
	}

	@Then("^I verify that user is able to create new role in the Roles module$")
	public void I_verify_that_user_is_able_to_create_new_role_in_the_Roles_module() throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		WebElement AddNewBtn = driver
				.findElement(CirrusDCSPageObjects6.getTenantPage_Account_Roles_RolesList_table_AddNewButton());
		j.executeScript("arguments[0].click();", AddNewBtn);
		Thread.sleep(1000);
		List<WebElement> fields = driver.findElements(
				CirrusDCSPageObjects6.getTenantPage_Account_Roles_AddNewRoleBtn_window_Role_Description_fields());
		String value1 = UserID;
		String value2 = SignUpFirstName;
		fields.get(0).sendKeys(value1);
		fields.get(1).sendKeys(value2);
		System.out.println(value1);
		System.out.println(value2);
		WebElement Arrow = driver.findElement(CirrusDCSPageObjects6.getTenantPage_Account_Roles_AccessScope_Arrow());
		j.executeScript("arguments[0].click();", Arrow);
		Thread.sleep(1000);

		List<WebElement> AccessValue = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_Roles_AccessScope_list());
		j.executeScript("arguments[0].click();", AccessValue.get(2));

		Thread.sleep(1000);
		List<WebElement> btns = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_Roles_AddNewRoleBtn_window_fields_btns());
		j.executeScript("arguments[0].click();", btns.get(0));
		String msg = driver.findElement(By.xpath("//div[@class='ui-growl-message']")).getText();
		Assert.assertEquals(msg, "Successfully saved Tenant Role");
	}

	@Then("^I verify that user is able to click on the delete Link and observe the page is getting deleted$")
	public void I_verify_that_user_is_able_to_click_on_the_delete_Link_and_observe_the_page_is_getting_deleted()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		List<String> list = new ArrayList<>();
		List<WebElement> edit = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_Roles_RolesList_table_actioncolumns_list());
		edit.get(0).click();
		Thread.sleep(1000);

		List<WebElement> Pages = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_Roles_AccessiblePages_table_Pages_list());
		List<WebElement> Action_delete = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_Roles_AccessiblePages_table_Actions_list());
		System.out.println(Pages.size());
		for (int i = 0; i < Pages.size(); i++) {
			String name = Pages.get(i).getText();
			if (name.contains("Account Setup")) {
				Action_delete.get(i).click();
			}
		}
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Save_confirmation_Yes()).click();
		String msg = driver.findElement(By.xpath("//div[@class='ui-growl-message']")).getText();
		System.out.println(msg);
		Thread.sleep(1000);
		driver.navigate().refresh();
		Thread.sleep(1000);
		List<WebElement> Pages1 = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_Roles_AccessiblePages_table_Pages_list());
		System.out.println(Pages1.size());
		for (int i = 0; i < Pages1.size(); i++) {
			String page = Pages1.get(i).getText();
			list.add(i, page);

			j.executeScript("arguments[0].scrollIntoView();", Pages1.get(i));

		}
		if (list.contains("Account Setup")) {
			System.out.println("Page is not deleted");
		} else {
			System.out.println("Page is deleted");
		}
	}

	@Then("^I verify that user is able to click on the permissioncolumn Link and observe the fields$")
	public void I_verify_that_user_is_able_to_click_on_the_permissioncolumn_Link_and_observe_the_fields()
			throws InterruptedException {
		List<WebElement> edit = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_Roles_RolesList_table_actioncolumns_list());
		edit.get(0).click();
		Thread.sleep(1000);
		driver.findElement(
				CirrusDCSPageObjects6.getTenantPage_Account_Roles_AccessiblePages_table_permission_column_link())
				.click();
		Thread.sleep(1000);
		String txt = driver
				.findElement(CirrusDCSPageObjects6.getTenantPage_Account_Roles_Account_Permission_window_txt())
				.getText();
		Assert.assertEquals(txt, "Account Permission");

		List<WebElement> checkboxes = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_Roles_Account_Permission_window_checkboxes());
		for (WebElement checkbox : checkboxes) {
			String checkboxName = checkbox.getText();
			switch (checkboxName) {
			case "View Only":
				Assert.assertEquals(checkboxName, "View Only");
				break;
			case "Create":
				Assert.assertEquals(checkboxName, "Create");
				break;
			case "Edit":
				Assert.assertEquals(checkboxName, "Edit");
				break;
			case "Delete":
				Assert.assertEquals(checkboxName, "Delete");
				break;
			case "Full":
				Assert.assertEquals(checkboxName, "Full");
				break;
			}
		}

		WebElement Value = driver
				.findElement(CirrusDCSPageObjects6.getTenantPage_Account_Roles_Account_Permission_window_checkbox());
		Assert.assertEquals(Value.getText(), "Button/Link");

		List<WebElement> CHECKBOX = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_Roles_Account_Permission_window_checkbox1());
		Assert.assertEquals(CHECKBOX.get(0).getText(), "New/Sync");
		Assert.assertEquals(CHECKBOX.get(1).getText(), "Export");

		List<WebElement> btns = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_Roles_Account_Permission_window_btns());
		Assert.assertTrue(btns.get(0).isDisplayed());
		Assert.assertTrue(btns.get(1).isDisplayed());

	}

	@Then("^I verify that user is able to add the new pages under the accessible page$")
	public void I_verify_that_user_is_able_to_add_the_new_pages_under_the_accessible_page()
			throws InterruptedException {
		List<WebElement> edit = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_Roles_RolesList_table_actioncolumns_list());
		edit.get(0).click();
		Thread.sleep(1000);
		WebElement AddNewAvailablePage = driver
				.findElement(CirrusDCSPageObjects6.getTenantPage_Account_Roles_AddNewAvailablePage_btn());
		AddNewAvailablePage.click();
		Thread.sleep(1000);
		List<WebElement> fields = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_Roles_AddNewAvailablePageBtn_window_fields());
		fields.get(0).click();
		List<WebElement> btn = driver.findElements(
				CirrusDCSPageObjects6.getTenantPage_Account_Roles_AddNewAvailablePageBtn_window_fields_btns());
		btn.get(0).click();
		String msg = driver.findElement(By.xpath("//div[@class='ui-growl-message']")).getText();
		String[] Msg = msg.split(":");
		String value = Msg[0].trim();
		System.out.println(value);
		Assert.assertEquals(value, "Successfully assigned pages to");

	}

	@Then("^I click on the Add New Available Pages btn and verify that user is able to view all the fields$")
	public void I_click_on_the_Add_New_Available_Pages_btn_and_verify_that_user_is_able_to_view_all_the_fields()
			throws InterruptedException {
		List<WebElement> edit = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_Roles_RolesList_table_actioncolumns_list());
		edit.get(0).click();
		Thread.sleep(1000);
		WebElement AddNewAvailablePage = driver
				.findElement(CirrusDCSPageObjects6.getTenantPage_Account_Roles_AddNewAvailablePage_btn());
		AddNewAvailablePage.click();
		Thread.sleep(1000);
		List<WebElement> fields = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_Roles_AddNewAvailablePageBtn_window_fields());

		for (WebElement field : fields) {
			String fieldsName = field.getText();
			System.out.println(fieldsName);

			switch (fieldsName) {
			case "Name":
				Assert.assertEquals(fieldsName, "Name");
				break;
			case "URL":
				Assert.assertEquals(fieldsName, "URL");
				break;
			}
		}

		List<WebElement> btn = driver.findElements(
				CirrusDCSPageObjects6.getTenantPage_Account_Roles_AddNewAvailablePageBtn_window_fields_btns());
		Assert.assertTrue(btn.get(0).isDisplayed());
		Assert.assertTrue(btn.get(1).isDisplayed());

	}

	@Then("^I click on the Save btn and verify that user is able to save the details$")
	public void I_click_on_the_Save_btn_and_verify_that_user_is_able_to_save_the_details() throws InterruptedException {
		List<WebElement> edit = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_Roles_RolesList_table_actioncolumns_list());
		edit.get(0).click();
		Thread.sleep(1000);
		List<WebElement> btns = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_Roles_UserRoleSetting_fields_buttons());
		btns.get(0).click();
		String msg = driver.findElement(By.xpath("//div[@class='ui-growl-message']")).getText();
		Assert.assertEquals(msg, "Successfully saved Tenant Role");
		Thread.sleep(1000);
	}

	@Then("^I click on the edit option the Roles lists and User Role Settings and Accessible pages getting enabled$")
	public void I_click_on_the_edit_option_the_Roles_lists_and_User_Role_Settings_and_Accessible_pages_getting_enabled()
			throws InterruptedException {
		List<WebElement> edit = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_Roles_RolesList_table_actioncolumns_list());
		edit.get(0).click();
		Thread.sleep(1000);
		List<WebElement> btns = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_Roles_UserRoleSetting_fields_buttons());
		for (int i = 0; i < btns.size(); i++) {
			if (btns.get(i).getAttribute("aria-disabled").contains("false")) {
				System.out.println("User Role Settings is enable");
			} else {
				System.out.println("User Role Settings is Disable");
			}

		}

		WebElement AddNewAvailablePage = driver
				.findElement(CirrusDCSPageObjects6.getTenantPage_Account_Roles_AddNewAvailablePage_btn());
		if (AddNewAvailablePage.getAttribute("aria-disabled").contains("false")) {
			System.out.println("Accessible Pages is enable");
		} else {
			System.out.println("Accessible Pages is Disable");
		}

	}

	@Then("^I Click on the Roles sub module$")
	public void I_Click_on_the_Roles_sub_module() throws InterruptedException {
		List<WebElement> menulist = driver.findElements(CirrusDCSPageObjects6.getTenantPage_Account_submenu_list());
		menulist.get(5).click();
	}

	@Then("^I Click on the Events sub module$")
	public void I_Click_on_the_Events_sub_module() throws InterruptedException {
		List<WebElement> menulist = driver.findElements(CirrusDCSPageObjects6.getTenantPage_Account_submenu_list());
		menulist.get(4).click();
	}

	@Then("^I Click on the subscription sub module$")
	public void I_Click_on_the_subscription_sub_module() throws InterruptedException {
		List<WebElement> menulist = driver.findElements(CirrusDCSPageObjects6.getTenantPage_Account_submenu_list());
		menulist.get(3).click();
	}

	@Then("^I Click on the jobs sub module$")
	public void I_Click_on_the_jobs_sub_module() throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		List<WebElement> menulist = driver.findElements(CirrusDCSPageObjects6.getTenantPage_Account_submenu_list());
		menulist.get(2).click();
		Thread.sleep(1500);
		WebElement ele = driver.findElement(CirrusDCSPageObjects6.getTenantPage_Account_jobs_txt());
		System.out.println(ele.getText());
		Assert.assertEquals(ele.getText(), "Jobs");
		List<WebElement> columnlist = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_jobs_table_column_lists());

		for (WebElement column : columnlist) {
			String columnName = column.getText();

			switch (columnName) {
			case "Job ID":
				Assert.assertEquals(columnName, "Job ID");
				break;
			case "Role Key":
				Assert.assertEquals(columnName, "Role Key");
				break;
			case "Parameter":
				Assert.assertEquals(columnName, "Parameter");
				break;
			case "Time Schedule":
				Assert.assertEquals(columnName, "Time Schedule");
				break;
			case "Status":
				Assert.assertEquals(columnName, "Status");
				break;
			case "Actions":
				Assert.assertEquals(columnName, "Actions");
				break;
			}
		}
		List<WebElement> Actionscolumnlist = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_jobs_table_Actionscolumn_options_list());
		for (int i = 0; i < Actionscolumnlist.size(); i++) {
			Assert.assertTrue(Actionscolumnlist.get(i).isDisplayed());
		}
		j.executeScript("scroll(0,1000)");
		List<WebElement> Allpaginationbtnlist = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_jobs_All_pagination_btn_list());
		for (int i = 0; i < Allpaginationbtnlist.size(); i++) {
			Assert.assertTrue(Allpaginationbtnlist.get(i).isDisplayed());
		}
		List<WebElement> btns = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_jobs_default_and_newjob_btn_list());
		for (int i = 0; i < btns.size(); i++) {
			Assert.assertTrue(btns.get(i).isDisplayed());
		}

	}

	@Then("^I Click on the Account Users sub module$")
	public void I_Click_on_the_Account_Users_sub_module() {
		List<WebElement> menulist = driver.findElements(CirrusDCSPageObjects6.getTenantPage_Account_submenu_list());
		menulist.get(1).click();
	}

	@Then("^I verify that user is able to view selected bell schedule is getting displayed in RHS$")
	public void I_verify_that_user_is_able_to_view_selected_bell_schedule_is_getting_displayed_in_RHS()
			throws InterruptedException, AWTException {
		CirrusDCSPageObjects7.getResult();
	}

	@Then("^I verify that user is able to delete the bell$")
	public void I_verify_that_user_is_able_to_delete_the_bell() throws InterruptedException, AWTException {
		CirrusDCSPageObjects7.getcellvalue();
	}

	@Then("^I verify that user is able to Edit the External bell$")
	public void I_verify_that_user_is_able_to_Edit_the_External_bell() throws InterruptedException, AWTException {
		CirrusDCSPageObjects7.getEditMethod();
		Thread.sleep(1000);
		WebElement Ring_time = driver.findElement(CirrusDCSPageObjects7.getTenantPage_BellSchedule_RingTime_input());
		Ring_time.clear();
		Ring_time.sendKeys("12:30");
		List<WebElement> btns = driver.findElements(CirrusDCSPageObjects7.getTenantPage_BellScheduleDetails_Buttons());
		btns.get(1).click();
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Save_confirmation_Yes()).click();
		String msg = driver.findElement(By.xpath("//div[@class='ui-growl-message']")).getText();
		Assert.assertEquals(msg, "Bell Schedule Saved");
	}

	@Then("^I verify that user is able to Edit the internal bell$")
	public void I_verify_that_user_is_able_to_Edit_the_internal_bell() throws InterruptedException, AWTException {
		CirrusDCSPageObjects7.getEditMethod1();
		driver.findElement(CirrusDCSPageObjects7.getTenantPage_BellSchedule_list_Edit_icon()).click();
		Thread.sleep(1000);
		WebElement Ring_time = driver.findElement(CirrusDCSPageObjects7.getTenantPage_BellSchedule_Bell_Name_input());
		Ring_time.clear();
		Ring_time.sendKeys("12:30");
		List<WebElement> btns = driver.findElements(CirrusDCSPageObjects7.getTenantPage_BellScheduleDetails_Buttons());
		btns.get(1).click();
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Save_confirmation_Yes()).click();
		String msg = driver.findElement(By.xpath("//div[@class='ui-growl-message']")).getText();
		Assert.assertEquals(msg, "Bell Schedule Saved");
	}

	@Then("^I verify that user is able to add the External bell$")
	public void I_verify_that_user_is_able_to_add_the_External_bell() throws InterruptedException, AWTException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		int m = 1;
		Thread.sleep(1000);
		WebElement New_btn = driver.findElement(CirrusDCSPageObjects7.getTenantPage_BellScheduleList_New_btns());
		j.executeScript("arguments[0].click();", New_btn);
		Thread.sleep(1000);
		String BellName = "TestB";
		driver.findElement(CirrusDCSPageObjects7.getTenantPage_BellSchedule_Bell_Name_input()).sendKeys(BellName);
		Thread.sleep(1000);
		driver.findElement(CirrusDCSPageObjects7.getTenantPage_BellSchedule_RingTime_input()).sendKeys("12:30");
		driver.findElement(CirrusDCSPageObjects7.getTenantPage_BellSchedule_Active_checkBox()).click();

		List<WebElement> DAYList = driver.findElements(CirrusDCSPageObjects7.getTenantPage_BellSchedule_DAY_LIst());
		for (int i = 0; i < DAYList.size(); i++) {
			m = i * 2;
			if (m < DAYList.size()) {
				DAYList.get(m).click();
			}

			Thread.sleep(1000);
		}

		Thread.sleep(1000);
		driver.findElement(CirrusDCSPageObjects7.getTenantPage_BellSchedule_Bell_mode_Arrow()).click();
		Thread.sleep(1000);
		CirrusDCSPageObjects7.getBellMode1();

		WebElement Duration = driver
				.findElement(CirrusDCSPageObjects7.getTenantPage_BellSchedule_Bell_mode_ExternalDuration());
		Duration.clear();
		Duration.sendKeys("30");
		List<WebElement> btns = driver.findElements(CirrusDCSPageObjects7.getTenantPage_BellSchedule_buttons());
		btns.get(1).click();
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Save_confirmation_Yes()).click();
		String msg = driver.findElement(By.xpath("//div[@class='ui-growl-message']")).getText();
		System.out.println(msg);

	}

	@Then("^I verify that user is able to add the internal bell$")
	public void I_verify_that_user_is_able_to_add_the_internal_bell() throws InterruptedException, AWTException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		int m = 1;
		Thread.sleep(1000);
		WebElement New_btn = driver.findElement(CirrusDCSPageObjects7.getTenantPage_BellScheduleList_New_btns());
		j.executeScript("arguments[0].click();", New_btn);
		Thread.sleep(1000);
		String BellName = "TestA";
		driver.findElement(CirrusDCSPageObjects7.getTenantPage_BellSchedule_Bell_Name_input()).sendKeys(BellName);
		Thread.sleep(1000);
		driver.findElement(CirrusDCSPageObjects7.getTenantPage_BellSchedule_RingTime_input()).sendKeys("12:30");
		driver.findElement(CirrusDCSPageObjects7.getTenantPage_BellSchedule_Active_checkBox()).click();

		List<WebElement> DAYList = driver.findElements(CirrusDCSPageObjects7.getTenantPage_BellSchedule_DAY_LIst());
		for (int i = 0; i < DAYList.size(); i++) {
			m = i * 2;
			if (m < DAYList.size()) {
				DAYList.get(m).click();
			}

			Thread.sleep(1000);
		}

		Thread.sleep(1000);
		driver.findElement(CirrusDCSPageObjects7.getTenantPage_BellSchedule_Bell_mode_Arrow()).click();
		Thread.sleep(1000);
		CirrusDCSPageObjects7.getBellMode();

		WebElement Duration = driver.findElement(CirrusDCSPageObjects7.getTenantPage_BellSchedule_Bell_mode_Duration());
		Duration.clear();
		Duration.sendKeys("30");
		driver.findElement(CirrusDCSPageObjects7.getTenantPage_BellSchedule_SoundFile_Arrow()).click();
		Thread.sleep(1000);
		List<WebElement> soundFile = driver
				.findElements(CirrusDCSPageObjects7.getTenantPage_BellSchedule_SoundFile_list());
		soundFile.get(1).click();

		List<WebElement> btns = driver.findElements(CirrusDCSPageObjects7.getTenantPage_BellSchedule_buttons());
		btns.get(1).click();
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Save_confirmation_Yes()).click();
		String msg = driver.findElement(By.xpath("//div[@class='ui-growl-message']")).getText();
		System.out.println(msg);

	}

	@Then("^I verify that user is able to view all the field under the bell schedule page$")
	public void I_verify_that_user_is_able_to_view_all_the_field_under_the_bell_schedule_page()
			throws InterruptedException {
		Thread.sleep(1000);
		WebElement txt = driver.findElement(CirrusDCSPageObjects7.getTenantPage_BellSchedule_txt());
		// wait.until(ExpectedConditions.invisibilityOf(txt));
		Assert.assertEquals(txt.getText(), "Device Manager >> Bell Schedule");

		WebElement txt1 = driver.findElement(CirrusDCSPageObjects7.getTenantPage_BellScheduleDetails_txt());
		// wait.until(ExpectedConditions.invisibilityOf(txt1));
		Assert.assertEquals(txt1.getText(), "Bell Schedule Details");

		WebElement txt2 = driver.findElement(CirrusDCSPageObjects7.getTenantPage_BellScheduleList_txt());
		// wait.until(ExpectedConditions.invisibilityOf(txt2));
		Assert.assertEquals(txt2.getText(), "Bell Schedule List");

		Thread.sleep(1000);
		List<WebElement> fields = driver.findElements(CirrusDCSPageObjects7.getTenantPage_BellScheduleDetails_fields());
		for (int i = 0; i < fields.size(); i++) {
			String fieldName = fields.get(i).getText();
			switch (fieldName) {
			case "Bell Name : *":
				Assert.assertEquals(fieldName, "Bell Name : *");
				break;
			case "Ring Time : *":
				Assert.assertEquals(fieldName, "Ring Time : *");
				break;
			case "Active :":
				Assert.assertEquals(fieldName, "Active :");
				break;
			case "Day :":
				Assert.assertEquals(fieldName, "Day :");
				break;
			case "Bell Mode : *":
				Assert.assertEquals(fieldName, "Bell Mode : *");
				break;
			}
		}
		List<WebElement> fields1 = driver
				.findElements(CirrusDCSPageObjects7.getTenantPage_BellScheduleDetails_fields1());
		for (int i = 0; i < fields1.size(); i++) {
			String fieldName1 = fields1.get(i).getText();
			switch (fieldName1) {
			case "Duration(Sec) : *":
				Assert.assertEquals(fieldName1, "Duration(Sec) : *");
				break;
			case "Repeat Times : *":
				Assert.assertEquals(fieldName1, "Repeat Times : *");
				break;
			case "Volume :":
				Assert.assertEquals(fieldName1, "Volume :");
				break;
			case "Sound File : *":
				Assert.assertEquals(fieldName1, "Sound File : *");
				break;
			}
		}
		WebElement search_field = driver
				.findElement(CirrusDCSPageObjects7.getTenantPage_BellScheduleListSearch_field());
		Assert.assertTrue(search_field.isDisplayed());

		WebElement search_field_btn = driver
				.findElement(CirrusDCSPageObjects7.getTenantPage_BellScheduleListSearch_btn());
		Assert.assertTrue(search_field_btn.isDisplayed());

		List<WebElement> columnName = driver
				.findElements(CirrusDCSPageObjects7.getTenantPage_BellScheduleList_table_ColumnName());
		for (int i = 0; i < columnName.size(); i++) {
			String columnname = columnName.get(i).getText();
			switch (columnname) {
			case "Name":
				Assert.assertEquals(columnname, "Name");
				break;
			case "Time":
				Assert.assertEquals(columnname, "Time");
				break;
			case "Action":
				Assert.assertEquals(columnname, "Action");
				break;
			}
		}

		List<WebElement> pageNamtion_btns = driver
				.findElements(CirrusDCSPageObjects7.getTenantPage_BellScheduleList_pagination_btns());
		for (int i = 0; i < pageNamtion_btns.size(); i++) {
			Assert.assertTrue(pageNamtion_btns.get(i).isDisplayed());
		}

		WebElement New_btn = driver.findElement(CirrusDCSPageObjects7.getTenantPage_BellScheduleList_New_btns());
		Assert.assertTrue(New_btn.isDisplayed());

		WebElement count_value = driver.findElement(CirrusDCSPageObjects7.getTenantPage_BellScheduleList_Count_value());

		String[] colunt = count_value.getText().split("Count : ");
		String[] value = colunt[1].split("New");
		System.out.println(value[0]);

	}

	@Then("^I click on the Bell schedule submodule page$")
	public void I_click_on_the_Bell_schedule_submodule_page() throws InterruptedException {
		List<WebElement> menulist = driver
				.findElements(CirrusDCSPageObjects7.getTenantPage_DeviceMannager_submenu_list());
		menulist.get(9).click();
		Thread.sleep(1000);
	}

	@Then("^I Click on the Account setup sub module$")
	public void I_Click_on_the_Account_setup_sub_module() {
		List<WebElement> menulist = driver.findElements(CirrusDCSPageObjects6.getTenantPage_Account_submenu_list());
		menulist.get(0).click();
	}

	@Then("^I verify that user is able to save the information$")
	public void I_verify_that_user_is_able_to_save_the_information() throws InterruptedException, AWTException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		List<WebElement> btnlist = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_basicinfo_btn_list());
		j.executeScript("arguments[0].scrollIntoView();", btnlist.get(0));
		btnlist.get(0).click();
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Save_confirmation_Yes()).click();
		String msg = driver.findElement(By.xpath("//div[@class='ui-growl-message']")).getText();
		Assert.assertEquals(msg, "Successfully Saved");

	}

	@Then("^I edit the all the field under the Basic info submenu$")
	public void I_edit_the_all_the_field_under_the_Basic_info_submenu() throws InterruptedException, AWTException {
		Robot r = new Robot();
		JavascriptExecutor executor = (JavascriptExecutor) driver;
		String TenantName = "ZKTK1";
		String NewURL = "https://www.sedgwick.com";
		String Address1 = "2620 Thousand Oaks Blvd #2400,";
		String State = "AT";
		List<WebElement> menulist = driver.findElements(CirrusDCSPageObjects6
				.getTenantPage_Account_AccountSetup_basicinfo_Name_URL_Address1_Address3_State_Phone_Timeformat_fields_list());

		menulist.get(0).click();
		Thread.sleep(1000);
		r.keyPress(KeyEvent.VK_DELETE);
		r.keyRelease(KeyEvent.VK_DELETE);

//		Thread.sleep(3000);
//		menulist.get(0).sendKeys(Keys.chord(Keys.CONTROL,"a", Keys.DELETE));
//		Thread.sleep(3000);
//		((JavascriptExecutor) driver)
//	    .executeScript("arguments[0].value='"+TenantName+"'",menulist.get(0));

		// menulist.get(0).sendKeys(TenantName);

	}

	@Then("^I get the all the value which is present in the password polity page and cross check in the host login page$")
	public void I_get_the_all_the_value_which_is_present_in_the_password_polity_page_and_cross_check_in_the_host_login_page()
			throws AWTException, InterruptedException {
		List<WebElement> menulist = driver.findElements(
				CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_Password_Polity_Allfields_value());
		Map<String, String> map = new HashMap<String, String>();
		Map<String, String> map1 = new HashMap<String, String>();
		map.put("Password Strength:", "");
		map.put("Password Length:", "");
		map.put("Password Life Span (Days):", "");
		map.put("Password Tracking:", "");
		map.put("Max Login Trial Attempt:", "");
		map.put("Track Interval (Seconds):", "");
		map.put("Lockout Interval(Hrs.):", "");
		map.put("Send Email When Lockout:", "");

		for (int i = 0; i < menulist.size(); i++) {
			map.put("Password Strength:", menulist.get(0).getText());
			map.put("Password Length:", menulist.get(1).getText());
			map.put("Password Life Span (Days):", menulist.get(2).getText());
			map.put("Password Tracking:", menulist.get(3).getText());
			map.put("Max Login Trial Attempt:", menulist.get(4).getText());
			map.put("Track Interval (Seconds):", menulist.get(5).getText());
			map.put("Send Email When Lockout:", menulist.get(6).getText());
		}

//		for (Map.Entry<String, String> pair : map.entrySet()) {
//		    System.out.println(String.format("Key(Tenantpage) is: %s, Value(Tenantpage) is : %s", pair.getKey(), pair.getValue()));   
//		}

		Robot robot = new Robot();
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_T);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		robot.keyRelease(KeyEvent.VK_T);
		ArrayList<String> tabs = new ArrayList<String>(driver.getWindowHandles());
		driver.switchTo().window(tabs.get(0));

		driver.get(property.getProperty("HostLoginUrl"));
		driver.findElement(CirrusDCSPageObjects.getusername()).sendKeys(property.getProperty("Username"));
		driver.findElement(CirrusDCSPageObjects.getPassword()).sendKeys(property.getProperty("Password"));
		driver.findElement(CirrusDCSPageObjects.getSignin()).click();

		driver.findElement(CirrusDCSPageObjects.getTenantbtn()).click();
		String url = property.getProperty("HostTenantmoduleLink");
		Assert.assertEquals(driver.getCurrentUrl(), url);

		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,-700)");
		Thread.sleep(2000);
		driver.findElement(CirrusDCSPageObjects.getTenant_List_SearchBar()).clear();
		driver.findElement(CirrusDCSPageObjects.getTenant_List_SearchBar())
				.sendKeys(property.getProperty("Tenant_Code"));
		driver.findElement(CirrusDCSPageObjects.getTenant_List_SearchBarsymbol()).click();
		Thread.sleep(2000);
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getTenant_List_Bar_ListofTenant_Name()).isDisplayed());
		driver.findElement(CirrusDCSPageObjects.getTenant_List_Bar_ListofTenant_Name()).click();
		Thread.sleep(2000);
		String Name = driver.findElement(CirrusDCSPageObjects.getRespected_tenant_code()).getText();
		System.out.println(Name);

		driver.findElement(CirrusDCSPageObjects.getTenant_Information_Security()).click();
		List<WebElement> fieldsname = driver
				.findElements(CirrusDCSPageObjects6.getHostLogin_Page_tenant_module_Security_submodule_all_fields());
		map1.put("Password Strength:", "");
		map1.put("Password Length:", "");
		map1.put("Password Life Span (Days):", "");
		map1.put("Password Tracking:", "");
		map1.put("Max Login Trial Attempt:", "");
		map1.put("Track Interval (Seconds):", "");
		map1.put("Lockout Interval(Hrs.):", "");
		map1.put("Send Email When Lockout:", "");

		for (int i = 0; i < fieldsname.size(); i++) {
			map1.put("Password Strength:", fieldsname.get(0).getText());
			map1.put("Password Length:", fieldsname.get(1).getText());
			map1.put("Password Life Span (Days):", fieldsname.get(2).getText());
			map1.put("Password Tracking:", fieldsname.get(3).getText());
			map1.put("Max Login Trial Attempt:", fieldsname.get(4).getText());
			map1.put("Track Interval (Seconds):", fieldsname.get(5).getText());
			map1.put("Send Email When Lockout:", fieldsname.get(6).getText());
		}

//			for (Map.Entry<String, String> pair : map1.entrySet()) {
//			    System.out.println(String.format("Key(hostpage) is: %s, Value(hostpage) is : %s", pair.getKey(), pair.getValue()));   
//			}
		if (map.equals(map1)) {
			System.out.println("Both data are match");
		} else {
			System.out.println("Both data are not match");
		}
	}

	@Then("^I Modify the field and that is also reflected in hostlogin page$")
	public void I_Modify_the_field_and_that_is_also_reflected_in_hostlogin_page() throws InterruptedException {
		driver.findElement(
				By.xpath("//label[@id='tenantinfo:tenantInfoSecurity:passwordStrength_label']//parent::div/div[3]"))
				.click();
		Thread.sleep(1000);
		List<WebElement> item = driver
				.findElements(CirrusDCSPageObjects.getTenant_Information_Security_list_password_option());
		item.get(2);
		List<WebElement> btnlist = driver.findElements(
				CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_Password_Polity_Allbutton_list());
		btnlist.get(1).click();

	}

	@Then("^I click on the set the password length tap and set the the password length and that is reflected in the hostpage$")
	public void I_click_on_the_set_the_password_length_tap_and_set_the_password_lengthand_that_is_reflected_in_the_hostpage()
			throws InterruptedException, AWTException {
		String num = property.getProperty("PasswordLength");
		int number = Integer.parseInt(num);
		String no = driver
				.findElement(
						CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_Password_Polity_Pwd_length_Field())
				.getText();
		int number1 = Integer.parseInt(no);
		Thread.sleep(2000);
		driver.findElement(CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_Password_Polity_Pwd_length_Field())
				.click();
		if (number1 < number) {
			for (int i = number1; i < number; i++) {
				driver.findElement(By.xpath("//span[@id='tenantinfo:tenantInfoSecurity:passwordLength']/a[1]")).click();
			}
		} else if (number1 > number) {
			for (int i = number1; i > number; i--) {
				driver.findElement(By.xpath("//span[@id='tenantinfo:tenantInfoSecurity:passwordLength']/a[2]")).click();
			}
		} else {

		}
		String no1 = driver
				.findElement(
						CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_Password_Polity_Pwd_length_Field())
				.getText();
		System.out.println(no1 + "tenant part");
		driver.findElement(CirrusDCSPageObjects.getTenant_Information_Security_Password_save_btn()).click();
		Thread.sleep(2000);
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Save_confirmation_Yes()).click();
		String msg = driver.findElement(By.xpath("//div[@class='ui-growl-message']")).getText();
		Assert.assertEquals(msg, "Successfully Saved");

		Robot robot = new Robot();
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_T);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		robot.keyRelease(KeyEvent.VK_T);
		ArrayList<String> tabs = new ArrayList<String>(driver.getWindowHandles());
		driver.switchTo().window(tabs.get(0));

		driver.get(property.getProperty("HostLoginUrl"));
		driver.findElement(CirrusDCSPageObjects.getusername()).sendKeys(property.getProperty("Username"));
		driver.findElement(CirrusDCSPageObjects.getPassword()).sendKeys(property.getProperty("Password"));
		driver.findElement(CirrusDCSPageObjects.getSignin()).click();

		driver.findElement(CirrusDCSPageObjects.getTenantbtn()).click();
		String url = property.getProperty("HostTenantmoduleLink");
		Assert.assertEquals(driver.getCurrentUrl(), url);

		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,-700)");
		Thread.sleep(2000);
		driver.findElement(CirrusDCSPageObjects.getTenant_List_SearchBar()).clear();
		driver.findElement(CirrusDCSPageObjects.getTenant_List_SearchBar())
				.sendKeys(property.getProperty("Tenant_Code"));
		driver.findElement(CirrusDCSPageObjects.getTenant_List_SearchBarsymbol()).click();
		Thread.sleep(2000);
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getTenant_List_Bar_ListofTenant_Name()).isDisplayed());
		driver.findElement(CirrusDCSPageObjects.getTenant_List_Bar_ListofTenant_Name()).click();
		Thread.sleep(2000);
		String Name = driver.findElement(CirrusDCSPageObjects.getRespected_tenant_code()).getText();
		System.out.println(Name);

		driver.findElement(CirrusDCSPageObjects.getTenant_Information_Security()).click();
		String no11 = driver.findElement(CirrusDCSPageObjects.getTenant_Information_Security_Password_length())
				.getText();
		Assert.assertEquals(no1, no11);
		int number11 = Integer.parseInt(no11);
		System.out.println(number11 + "HOST LOGIN PART");

	}

	@Then("^I click on the set the Lockout Interval tap and set the Lockout Interval$")
	public void I_click_on_the_set_the_Lockout_Interval_tap_and_set_the_Lockout_Interval() throws InterruptedException {
		String num = property.getProperty("LockoutInterval");
		int number = Integer.parseInt(num);

		String no = driver.findElement(
				CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_Password_Polity_lockedoutInterval_Field())
				.getText();
		int number1 = Integer.parseInt(no);
		Thread.sleep(2000);
		driver.findElement(
				CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_Password_Polity_lockedoutInterval_Field())
				.click();
		if (number1 < number) {
			for (int i = number1; i < number; i++) {
				driver.findElement(By.xpath("//span[@id='tenantinfo:tenantInfoSecurity:lockoutInterval']/a[1]"))
						.click();
				Thread.sleep(2000);
			}
		} else if (number1 > number) {
			for (int i = number1; i > number; i--) {
				driver.findElement(By.xpath("//span[@id='tenantinfo:tenantInfoSecurity:lockoutInterval']/a[2]"))
						.click();
				Thread.sleep(2000);
			}
		} else {

		}
		String no1 = driver.findElement(
				CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_Password_Polity_lockedoutInterval_Field())
				.getText();
		System.out.println(no1);
		driver.findElement(CirrusDCSPageObjects.getTenant_Information_Security_Password_save_btn()).click();
		Thread.sleep(2000);
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Save_confirmation_Yes()).click();
		String msg = driver.findElement(By.xpath("//div[@class='ui-growl-message']")).getText();
		Assert.assertEquals(msg, "Successfully Saved");

	}

	@Then("^I click on the set the Max login trial attempt tap and set the set the Max login trial attempt$")
	public void I_click_on_the_set_the_Max_login_trial_attempt_tap_and_set_the_set_the_Max_login_trial_attempt()
			throws InterruptedException {
		String num = property.getProperty("Maxlogintrialattempt");
		int number = Integer.parseInt(num);

		String no = driver.findElement(
				CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_Password_Polity_MaxLoginTrailattempt_Field())
				.getText();
		int number1 = Integer.parseInt(no);

		Thread.sleep(2000);
		driver.findElement(
				CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_Password_Polity_MaxLoginTrailattempt_Field())
				.click();
		if (number1 < number) {
			for (int i = number1; i < number; i++) {
				driver.findElement(By.xpath("//span[@id='tenantinfo:tenantInfoSecurity:loginTrial']/a[1]")).click();
				Thread.sleep(2000);
			}
		} else if (number1 > number) {
			for (int i = number1; i > number; i--) {
				driver.findElement(By.xpath("//span[@id='tenantinfo:tenantInfoSecurity:loginTrial']/a[2]")).click();
				Thread.sleep(2000);
			}
		} else {

		}
		String no1 = driver.findElement(
				CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_Password_Polity_MaxLoginTrailattempt_Field())
				.getText();
		System.out.println(no1);
		driver.findElement(CirrusDCSPageObjects.getTenant_Information_Security_Password_save_btn()).click();
		Thread.sleep(2000);
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Save_confirmation_Yes()).click();
		String msg = driver.findElement(By.xpath("//div[@class='ui-growl-message']")).getText();
		Assert.assertEquals(msg, "Successfully Saved");

	}

	@Then("^I click on the set the Password Tracking tap and set the Password Tracking$")
	public void I_click_on_the_set_the_Password_Tracking_tap_and_set_the_Password_Tracking()
			throws InterruptedException {
		String num = property.getProperty("PasswordTracking");
		int number = Integer.parseInt(num);
		System.out.println(number);

		String no = driver
				.findElement(
						CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_Password_Polity_Pwd_tracking_Field())
				.getText();
		int number1 = Integer.parseInt(no);
		// System.out.println(number1);
		Thread.sleep(2000);
		driver.findElement(
				CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_Password_Polity_Pwd_tracking_Field()).click();
		if (number1 < number) {
			for (int i = number1; i < number; i++) {
				driver.findElement(By.xpath("//span[@id='tenantinfo:tenantInfoSecurity:passwordHistory']/a[1]"))
						.click();
			}
		} else if (number1 > number) {
			for (int i = number1; i > number; i--) {
				driver.findElement(By.xpath("//span[@id='tenantinfo:tenantInfoSecurity:passwordHistory']/a[2]"))
						.click();
			}
		} else {

		}
		String no1 = driver
				.findElement(
						CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_Password_Polity_Pwd_tracking_Field())
				.getText();
		System.out.println(no1);
		driver.findElement(CirrusDCSPageObjects.getTenant_Information_Security_Password_save_btn()).click();
		Thread.sleep(2000);
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Save_confirmation_Yes()).click();
		String msg = driver.findElement(By.xpath("//div[@class='ui-growl-message']")).getText();
		Assert.assertEquals(msg, "Successfully Saved");

	}

	@Then("^I click on the set the password length tap and set the the password length$")
	public void I_click_on_the_set_the_password_length_tap_and_set_the_password_length() throws InterruptedException {
		String num = property.getProperty("PasswordLength");
		int number = Integer.parseInt(num);
		String no = driver
				.findElement(
						CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_Password_Polity_Pwd_length_Field())
				.getText();
		int number1 = Integer.parseInt(no);
		Thread.sleep(2000);
		driver.findElement(CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_Password_Polity_Pwd_length_Field())
				.click();
		if (number1 < number) {
			for (int i = number1; i < number; i++) {
				driver.findElement(By.xpath("//span[@id='tenantinfo:tenantInfoSecurity:passwordLength']/a[1]")).click();
			}
		} else if (number1 > number) {
			for (int i = number1; i > number; i--) {
				driver.findElement(By.xpath("//span[@id='tenantinfo:tenantInfoSecurity:passwordLength']/a[2]")).click();
			}
		} else {

		}
		String no1 = driver
				.findElement(
						CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_Password_Polity_Pwdlifespan_Field())
				.getText();
		System.out.println(no1);
		driver.findElement(CirrusDCSPageObjects.getTenant_Information_Security_Password_save_btn()).click();
		Thread.sleep(2000);
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Save_confirmation_Yes()).click();
		String msg = driver.findElement(By.xpath("//div[@class='ui-growl-message']")).getText();
		Assert.assertEquals(msg, "Successfully Saved");
	}

	@Then("^I click on the set Track interval time tap and set the password life span$")
	public void I_click_on_the_set_Track_interval_time_tap_and_set_the_password_life_span()
			throws InterruptedException {
		String num = property.getProperty("TrackIntervalSecond");
		int number = Integer.parseInt(num);
		System.out.println(number);

		String no = driver
				.findElement(
						CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_Password_Polity_Track_interval_Field())
				.getText();
		int number1 = Integer.parseInt(no);
		System.out.println("display " + number1);
		driver.findElement(
				CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_Password_Polity_Track_interval_Field())
				.click();

		if (number1 < number) {
			for (int i = number1; i < number; i++) {
				driver.findElement(By.xpath(
						"(//form[@id='tenantinfo:tenantInfoSecurity']/div/div/div/div/div[2])[6]/span/span[2]/span/a[1]"))
						.click();
			}
		} else if (number1 > number) {
			for (int i = number1; i > number; i--) {
				driver.findElement(By.xpath(
						"(//form[@id='tenantinfo:tenantInfoSecurity']/div/div/div/div/div[2])[6]/span/span[2]/span/a[2]"))
						.click();
			}
		} else {

		}
		String no1 = driver
				.findElement(
						CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_Password_Polity_Pwdlifespan_Field())
				.getText();
		System.out.println(no1);
		driver.findElement(CirrusDCSPageObjects.getTenant_Information_Security_Password_save_btn()).click();
		Thread.sleep(2000);
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Save_confirmation_Yes()).click();
		String msg = driver.findElement(By.xpath("//div[@class='ui-growl-message']")).getText();
		Assert.assertEquals(msg, "Successfully Saved");
	}

	@Then("^I click on the set password life span tap and set the password life span$")
	public void I_click_on_the_set_password_life_span_tap_and_set_the_password_life_span() throws InterruptedException {
		String num = property.getProperty("PasswordLifeSpanDays");
		int number = Integer.parseInt(num);

		String no = driver
				.findElement(
						CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_Password_Polity_Pwdlifespan_Field())
				.getText();
		int number1 = Integer.parseInt(no);

		driver.findElement(CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_Password_Polity_Pwdlifespan_Field())
				.click();
		if (number1 < number) {
			for (int i = number1; i < number; i++) {
				driver.findElement(By.xpath("//span[@id='tenantinfo:tenantInfoSecurity:passwordExpiry']/a[1]")).click();
			}
		} else if (number1 > number) {
			for (int i = number1; i > number; i--) {
				driver.findElement(By.xpath("//span[@id='tenantinfo:tenantInfoSecurity:passwordExpiry']/a[2]")).click();
			}
		} else {

		}

		String no1 = driver
				.findElement(
						CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_Password_Polity_Pwdlifespan_Field())
				.getText();
		System.out.println(no1);
		driver.findElement(CirrusDCSPageObjects.getTenant_Information_Security_Password_save_btn()).click();
		Thread.sleep(2000);
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Save_confirmation_Yes()).click();
		String msg = driver.findElement(By.xpath("//div[@class='ui-growl-message']")).getText();
		Assert.assertEquals(msg, "Successfully Saved");

	}

	@Then("^I click on the password strength tap and view all the options$")
	public void I_click_on_the_password_strength_tap_and_view_all_the_options() {
		driver.findElement(CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_Password_Polity_PwdStrength_Field())
				.click();
		driver.findElement(CirrusDCSPageObjects6
				.getTenantPage_Account_AccountSetup_Password_Polity_PwdStrength_Field_downArrowbtn()).click();
		List<WebElement> optbtn = driver.findElements(CirrusDCSPageObjects6
				.getTenantPage_Account_AccountSetup_Password_Polity_PwdStrength_Field_all_options());
		for (WebElement Menu : optbtn) {
			String MenuName = Menu.getText();
			System.out.println(MenuName);
			switch (MenuName) {
			case "Normal":
				Assert.assertEquals(MenuName, "Normal");
				break;
			case "Medium":
				Assert.assertEquals(MenuName, "Medium");
				break;
			case "Strong":
				Assert.assertEquals(MenuName, "Strong");
				break;
			}
		}
		optbtn.get(0).click();
		List<WebElement> btns = driver.findElements(
				CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_Password_Polity_Allbutton_list());
		btns.get(0).click();
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getTenant_Module_Save_confirmation()).isDisplayed());
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Save_confirmation_Yes()).click();
		String msg = driver.findElement(By.xpath("//div[@class='ui-growl-message']")).getText();
		Assert.assertEquals(msg, "Successfully Saved");
	}

	@Then("^I verify that user is able to view all the property key in the configuration page$")
	public void I_verify_that_user_is_able_to_view_all_the_property_key_in_the_configuration_page()
			throws InterruptedException {
		int m = 0;
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,1000)");
		List<String> total_Properties = new ArrayList<String>();
		List<WebElement> btn = driver.findElements(
				CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_Password_Polity_configuration_all_Page_btns());
		WebElement fwdbtn = driver.findElement(
				CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_Password_Polity_configuration_forward_btn());
		for (int i = 0; i <= btn.size() - 1; i++) {

			Thread.sleep(1000);
			List<WebElement> propertylist = driver.findElements(CirrusDCSPageObjects6
					.getTenantPage_Account_AccountSetup_Password_Polity_configuration_all_Properties_key_list());
			for (int j = 0; j < propertylist.size(); j++) {
				m = m + 1;
				String property = propertylist.get(j).getText();
				Thread.sleep(1000);
				total_Properties.add(j, property);
				System.out.println(m + ". " + total_Properties.get(j));
			}
			propertylist.clear();
			fwdbtn.click();
		}

	}

	@Then("^I click on the configuration submenu$")
	public void I_click_on_the_configuration_submenu() {
		List<WebElement> menulist = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_menus_list());
		menulist.get(3).click();
	}

	@Then("^I click on the two factor Authentication submenu$")
	public void I_click_on_the_two_factor_Authentication_submenu() {
		List<WebElement> menulist = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_menus_list());
		menulist.get(2).click();
	}

	@Then("^I verify that user is able to access the session timeout field and verify that it is working accordingly$")
	public void I_verify_that_user_is_able_to_access_the_session_timeout_field_and_verify_that_it_is_working_accordingly()
			throws InterruptedException, AWTException {

		WebElement field = driver.findElement(CirrusDCSPageObjects6
				.getTenantPage_Account_AccountSetup_Password_Polity_twofactorAuthentication_sessionTimeout_Field());

		field.clear();
		field.sendKeys("61");
		driver.findElement(CirrusDCSPageObjects6
				.getTenantPage_Account_AccountSetup_Password_Polity_twofactorAuthentication_Save_button()).click();
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Save_confirmation_Yes()).click();
		String msg = driver.findElement(
				CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_Password_Polity_twofactorAuthentication_msg())
				.getText();
		System.out.println(msg);

		Robot robot = new Robot();
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_T);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		robot.keyRelease(KeyEvent.VK_T);
		ArrayList<String> tabs = new ArrayList<String>(driver.getWindowHandles());
		driver.switchTo().window(tabs.get(0));

		I_visit_CirrusDCS_Tenantlogin_page();
		I_visit_CirrusDCS_Tenantlogin_with_valid_credentials();
		wait.until(ExpectedConditions.invisibilityOf(driver.findElement(CirrusDCSPageObjects6
				.getTenantPage_Account_AccountSetup_Password_Polity_twofactorAuthentication_AreUTherewindow())));
		String name = driver
				.findElement(By.xpath("//span[@id='timeoutSession_title']/parent::div/parent::div/div[2]/p[1]"))
				.getText();
		System.out.println(name);
		System.out.println(
				"user is able to observe that based on the session timeout, application get to logout after two minute");
	}

	@Then("^I verify that user is able to view all the fields in the configuration page$")
	public void I_verify_that_user_is_able_to_view_all_the_fields_in_the_configuration_page() {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		Assert.assertTrue(driver
				.findElement(CirrusDCSPageObjects6
						.getTenantPage_Account_AccountSetup_Password_Polity_configuration_search_field())
				.isDisplayed());
		List<WebElement> methodlist = driver.findElements(CirrusDCSPageObjects6
				.getTenantPage_Account_AccountSetup_Password_Polity_configuration_table_columnname_field());

		for (WebElement method : methodlist) {
			String Method = method.getText();
			switch (Method) {
			case " PROPERTY KEY":
				Assert.assertEquals(Method, " PROPERTY KEY");
				break;
			case " PROPERTY VALUE":
				Assert.assertEquals(Method, " PROPERTY VALUE");
				break;
			case "Edit":
				Assert.assertEquals(Method, "Edit");
				break;
			}
		}
		js.executeScript("window.scrollBy(0,1000)");
		List<WebElement> btnslist = driver.findElements(
				CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_Password_Polity_configuration_all_btns());
		for (int i = 0; i < btnslist.size(); i++) {
			Assert.assertTrue(btnslist.get(i).isDisplayed());
		}
		List<WebElement> paginationbtnlist = driver.findElements(CirrusDCSPageObjects6
				.getTenantPage_Account_AccountSetup_Password_Polity_configuration_all_Pagination_btns());
		for (int i = 1; i < paginationbtnlist.size(); i++) {
			Assert.assertTrue(paginationbtnlist.get(i).isDisplayed());
		}

	}

	@Then("^I view all the fields under the two factor authentication tap$")
	public void I_view_all_the_fields_under_the_two_factor_authentication_tap() {
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects6
				.getTenantPage_Account_AccountSetup_Password_Polity_twofactorAuthentication_sessionTimeout_Field())
				.isDisplayed());
		Assert.assertTrue(driver
				.findElement(CirrusDCSPageObjects6
						.getTenantPage_Account_AccountSetup_Password_Polity_twofactorAuthentication_toggle_button())
				.isDisplayed());
		List<WebElement> methodlist = driver.findElements(CirrusDCSPageObjects6
				.getTenantPage_Account_AccountSetup_Password_Polity_twofactorAuthentication_authetication_method());

		for (WebElement method : methodlist) {
			String Method = method.getText();

			switch (Method) {
			case "Email":
				Assert.assertEquals(Method, "Email");
				break;
			case "Email or SMS":
				Assert.assertEquals(Method, "Email or SMS");
				break;
			}
		}
		Assert.assertTrue(driver
				.findElement(CirrusDCSPageObjects6
						.getTenantPage_Account_AccountSetup_Password_Polity_twofactorAuthentication_Save_button())
				.isDisplayed());

	}

	@Then("^I click on the Password Policy submenu$")
	public void I_click_on_the_Password_Policy_submenu() {
		List<WebElement> menulist = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_menus_list());
		menulist.get(1).click();
	}

	@Then("^I view all the fields under the password and polity tab$")
	public void I_view_all_the_fields_under_the_password_and_polity_tab() {
		List<WebElement> menulist = driver.findElements(
				CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_Password_Polity_Allfields_list());

		for (WebElement Menu : menulist) {
			String MenuName = Menu.getText();
			System.out.println(MenuName);
			switch (MenuName) {
			case "Password Strength:":
				Assert.assertEquals(MenuName, "Password Strength:");
				break;
			case "Password Length:":
				Assert.assertEquals(MenuName, "Password Length:");
				break;
			case "Password Life Span (Days):":
				Assert.assertEquals(MenuName, "Password Life Span (Days):");
				break;
			case "Password Tracking:":
				Assert.assertEquals(MenuName, "Password Tracking:");
				break;
			case "Max Login Trial Attempt:":
				Assert.assertEquals(MenuName, "Max Login Trial Attempt:");
				break;
			case "Track Interval (Seconds):":
				Assert.assertEquals(MenuName, "Track Interval (Seconds):");
				break;
			case "Lockout Interval(Hrs.):":
				Assert.assertEquals(MenuName, "Lockout Interval(Hrs.):");
				break;
			case "Send Email When Lockout:":
				Assert.assertEquals(MenuName, "Send Email When Lockout:");
				break;
			}
		}
		List<WebElement> btnlist = driver.findElements(
				CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_Password_Polity_Allbutton_list());

		for (WebElement btn : btnlist) {
			String btnName = btn.getText();
			switch (btnName) {
			case "Save":
				Assert.assertEquals(btnName, "Save");
				break;
			case "Cancel":
				Assert.assertEquals(btnName, "Cancel");
				break;
			}
		}

	}

	@Then("^I click on the Basic info submenu$")
	public void I_click_on_the_Basic_info_submenu() {
		List<WebElement> menulist = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_menus_list());
		menulist.get(0).click();
	}

	@Then("^I verify that user is able to view the the info in the CODE,TYPE,STATUS and ENABLED are same as given in the host login page$")
	public void I_verify_that_user_is_able_to_view_the_info_in_the_CODE_TYPE_STATUS_and_ENABLED_are_same_as_given_in_the_host_login_page() {
		WebElement code = driver
				.findElement(CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_basicinfo_code_value());
		WebElement Type = driver
				.findElement(CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_basicinfo_Type_value());
		WebElement status = driver
				.findElement(CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_basicinfo_status_value());
		Assert.assertEquals(code.getText(), Tenantcode);
		Assert.assertEquals(Type.getText(), TenantType);
		Assert.assertEquals(status.getText(), TenantStatus);
	}

	@Then("^I verify that user is able to view the info in the CODE,TYPE,STATUS and ENABLED are non editable$")
	public void I_verify_that_user_is_able_to_view_the_info_in_the_CODE_TYPE_STATUS_and_ENABLED_are_non_editable() {
		String value = "ABC";
		WebElement code = driver
				.findElement(CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_basicinfo_code_value());
		System.out.println(code.getText());
		code.click();
		try {
			code.clear();
			code.sendKeys(value);
			if (code.getText().equals(value))
				;

		} catch (WebDriverException wde) {
			System.out.println("Field is not editable in the code field");
		}

		WebElement Type = driver
				.findElement(CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_basicinfo_Type_value());
		System.out.println(Type.getText());
		Type.click();
		try {
			Type.clear();
			Type.sendKeys(value);
			if (Type.getText().equals(value))
				;

		} catch (WebDriverException wde) {
			System.out.println("Field is not editable in the type field");
		}

		WebElement status = driver
				.findElement(CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_basicinfo_status_value());
		System.out.println(status.getText());
		status.click();
		try {
			status.clear();
			status.sendKeys(value);
			if (status.getText().equals(value))
				;

		} catch (WebDriverException wde) {
			System.out.println("Field is not editable in the status field");
		}
	}

	@Then("^I verify that user is able to view the all the fields under the Basic info submenu$")
	public void I_verify_that_user_is_able_to_view_the_all_the_fields_under_the_Basic_info_submenu() {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		List<WebElement> menulist = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_basicinfo_fields_list());
		for (WebElement Menu : menulist) {
			String MenuName = Menu.getText();
			switch (MenuName) {
			case "Code:":
				Assert.assertEquals(MenuName, "Code:");
				break;
			case "Name:":
				Assert.assertEquals(MenuName, "Name:");
				break;
			case "Type:":
				Assert.assertEquals(MenuName, "Type:");
				break;
			case "URL:":
				Assert.assertEquals(MenuName, "URL:");
				break;
			case "Status:":
				Assert.assertEquals(MenuName, "Status:");
				break;
			case "Enabled:":
				Assert.assertEquals(MenuName, "Enabled:");
				break;
			case "Country:":
				Assert.assertEquals(MenuName, "Country:");
				break;
			case "Address 1:":
				Assert.assertEquals(MenuName, "Address 1:");
				break;
			case "Address 2:":
				Assert.assertEquals(MenuName, "Address 2:");
				break;
			case "Address 3:":
				Assert.assertEquals(MenuName, "Address 3:");
				break;
			case "City:":
				Assert.assertEquals(MenuName, "City:");
				break;
			case "State:":
				Assert.assertEquals(MenuName, "State:");
				break;
			case "ZIP Code:":
				Assert.assertEquals(MenuName, "ZIP Code:");
				break;
			case "Phone:":
				Assert.assertEquals(MenuName, "Phone:");
				break;
			case "Date Format:":
				Assert.assertEquals(MenuName, "Date Format:");
				break;
			case "Time Format:":
				Assert.assertEquals(MenuName, "Time Format:");
				break;
			case "Client Logo:":
				Assert.assertEquals(MenuName, "Client Logo:");
				break;
			}
		}
		js.executeScript("window.scrollBy(0,1000)");
		String value = driver
				.findElement(CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_basicinfo_Displayfields())
				.getText();
		Assert.assertEquals(value, "Display:");
		List<WebElement> btnlist = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_basicinfo_btn_list());
		for (WebElement btn : btnlist) {
			String button = btn.getText();
			System.out.println(button);
			switch (button) {
			case "Save":
				Assert.assertEquals(button, "Save");
				break;
			case "Cancel":
				Assert.assertEquals(button, "Cancel");
				break;
			}
		}
	}

	@Then("^I verify that user is able to view the all the menu under the company setup submodule$")
	public void I_verify_that_user_is_able_to_view_the_all_the_menu_under_the_company_setup_submodule() {
		List<WebElement> menulist = driver
				.findElements(CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_menus_list());
		for (WebElement Menu : menulist) {
			String MenuName = Menu.getText();
			System.out.println(MenuName);
			switch (MenuName) {
			case "Basic Info":
				Assert.assertEquals(MenuName, "Basic Info");
				break;
			case "Password Policy":
				Assert.assertEquals(MenuName, "Password Policy");
				break;
			case "Configurations":
				Assert.assertEquals(MenuName, "Configurations");
				break;

			case "Two Factor Authentication":
				Assert.assertEquals(MenuName, "Two Factor Authentication");
				break;

			}
		}

	}

	@Then("^I click on the WorkdayIntegration module page$")
	public void I_click_on_the_WorkdayIntegration_module_page() {
		driver.findElement(cirrusDCSPageObjects4.getTenantPage_security_WorkdayIntegration_module()).click();
	}

	@Then("^I click on the Security and audit module page$")
	public void I_click_on_the_Security_and_audit_module_page() {
		driver.findElement(cirrusDCSPageObjects3.get_TenantPage_security_Audit_module()).click();
	}

	@Then("^I verify that User is able to view recently logged in Users in the Active Login user page$")
	public void I_verify_that_User_is_able_to_view_recently_logged_in_Users_in_the_Active_Login_user_page()
			throws InterruptedException {
		String RecentUserName = driver
				.findElement(cirrusDCSPageObjects3.getSecurity_Audit_Active_Login_Users_ActiveUser_list()).getText();
		String RecentUserSignOnTime = driver
				.findElement(cirrusDCSPageObjects3.getSecurity_Audit_Active_Login_Users_SignOnTime_list()).getText();
		String RecentUserSessionID = driver
				.findElement(cirrusDCSPageObjects3.getSecurity_Audit_Active_Login_Users_SessionID_list()).getText();
		System.out.println("Rcently logged user name is '" + RecentUserName + "' and it's sign on time is '"
				+ RecentUserSignOnTime + "' and it's session id is '" + RecentUserSessionID + "'");
	}

	@Then("^I verify that User is able to logoff the login User in the Active Login User page$")
	public void I_verify_that_User_is_able_to_logoff_the_login_User_in_the_Active_Login_User_page()
			throws InterruptedException {
		driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_Active_Login_Users_logoff_Button()).click();
		Thread.sleep(500);
		String msg = driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_Active_Login_Users_messages_display())
				.getText();
		System.out.println(msg);
//		String[] arrOfStr = msg.split(":", 2); 
//		  String Actualmsg =arrOfStr[0];
//		 // Assert.assertEquals(Actualmsg, "Successfully logged off ");
	}

	@Then("^I verify that user is able to search the user with userName in the Active Login User page$")
	public void I_verify_that_user_is_able_to_search_the_user_with_userName_in_the_Active_Login_User_page() {
		String UserNamee = "akshaybv@zktk";
		driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_Active_Login_Users_User_SearchField())
				.sendKeys(UserNamee);
		// driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_Active_Login_Users_Gobutton()).click();
		List<WebElement> Activeuserlist = driver
				.findElements(cirrusDCSPageObjects3.getSecurity_Audit_Active_Login_Users_ActiveUser_list());
		for (int i = 0; i < Activeuserlist.size(); i++) {

			String userName = Activeuserlist.get(i).getText();
			if (userName.equals(UserNamee))
				System.out.println("Activer user name is '" + userName);
			else {
				System.out.println("Filter is not working properly");
			}
		}
	}

	@Then("^I verify that user is able to view the active user list with all the details$")
	public void I_verify_that_user_is_able_to_view_the_active_user_list_with_all_the_details() {
		List<WebElement> Activeuserlist = driver
				.findElements(cirrusDCSPageObjects3.getSecurity_Audit_Active_Login_Users_ActiveUser_list());
		List<WebElement> SignOnTimelist = driver
				.findElements(cirrusDCSPageObjects3.getSecurity_Audit_Active_Login_Users_SignOnTime_list());
		List<WebElement> SessionIdlist = driver
				.findElements(cirrusDCSPageObjects3.getSecurity_Audit_Active_Login_Users_SessionID_list());

		for (int i = 0; i < Activeuserlist.size(); i++) {
			String userName = Activeuserlist.get(i).getText();
			String SignOnTime = SignOnTimelist.get(i).getText();
			String SessionId = SessionIdlist.get(i).getText();
			System.out.println("Activer user name is '" + userName + "' and its Sign on time is '" + SignOnTime
					+ "' and its session id is '" + SessionId + "'");
		}
	}

	@Then("^I verify that User is able to view Locked account login attempts in the History Login audit page$")
	public void I_verify_that_User_is_able_to_view_Locked_account_login_attempts_in_the_History_Login_audit_page()
			throws InterruptedException {
		String name = "akshaybv@zktk";
		driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_Text_From_Date_input())
				.sendKeys("10/17/2022 11:00");
		driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_Text_To_Date_input())
				.sendKeys("10/18/2022 00:00");
		driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_User_text_input_field())
				.sendKeys(name);
		driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_Text_Gobutton()).click();
		List<WebElement> Usernamelist = driver
				.findElements(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_table_UserName_list());
		List<WebElement> failuremsglist = driver
				.findElements(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_table_failuremsg_list());
		List<WebElement> signonTimelist = driver
				.findElements(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_table_SignOnTime_list());
		for (int i = 0; i < failuremsglist.size(); i++) {
			String name1 = failuremsglist.get(i).getText();
			String name2 = Usernamelist.get(i).getText();
			String name3 = signonTimelist.get(i).getText();
			if (name1.contains("locked")) {
				System.out.println("the user name is '" + name2 + "' and the reason behind the failure is '" + name1
						+ "' and its signon time is '" + name3 + "'");
			}
		}
	}

	@Then("^I verify that User is able to view Failed login attempted details in the History Login audit page$")
	public void I_verify_that_User_is_able_to_view_Failed_login_attempted_details_in_the_History_Login_audit_page()
			throws InterruptedException {
		String name = "akshaybv@zktk";
		driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_Text_From_Date_input())
				.sendKeys("10/17/2022 11:00");
		driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_Text_To_Date_input())
				.sendKeys("10/18/2022 00:00");
		driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_User_text_input_field())
				.sendKeys(name);
		driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_Text_Gobutton()).click();
		List<WebElement> Usernamelist = driver
				.findElements(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_table_UserName_list());
		List<WebElement> failuremsglist = driver
				.findElements(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_table_failuremsg_list());
		for (int i = 0; i < failuremsglist.size(); i++) {
			String name1 = failuremsglist.get(i).getText();
			int no = name1.length();
			String name2 = Usernamelist.get(i).getText();
			if (no > 0) {
				System.out.println(
						"the user name is '" + name2 + "' and the reason behind the failure is '" + name1 + "'");
			}
		}

	}

	@Then("^I verify that User is able to Filter User by User name in the History Login audit page$")
	public void I_verify_that_User_is_able_to_Filter_User_by_User_name_in_the_History_Login_audit_page()
			throws InterruptedException {
		String name = "akshaybv@zktk";
		driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_Text_From_Date_input())
				.sendKeys("09/01/2022 00:00");
		driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_Text_To_Date_input())
				.sendKeys("10/19/2022 00:00");
		driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_User_text_input_field())
				.sendKeys(name);
		driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_Text_Gobutton()).click();
		Thread.sleep(1000);
		List<WebElement> Usernamelist = driver
				.findElements(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_table_UserName_list());
		for (int i = 0; i < Usernamelist.size(); i++) {
			String name1 = Usernamelist.get(i).getText();
			if (name1.contains(name)) {
				System.out.println("filter is working based on the input");
			} else {
				System.out.println("filter is not working based on the input");
			}
		}
	}

	@Then("^I verify that user is able to view login Users in the History Login audit page$")
	public void I_verify_that_user_is_able_to_view_login_Users_in_the_History_Login_audit_page()
			throws InterruptedException {
		driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_Text_From_Date_input())
				.sendKeys("09/01/2022 00:00");
		driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_Text_To_Date_input())
				.sendKeys("10/19/2022 00:00");
		driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_Text_Gobutton()).click();
		Thread.sleep(1000);
		Assert.assertTrue(driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_table_data())
				.isDisplayed());
	}

	@Then("^I verify that User able to unlock locked Tenant account in the Locked accounts page$")
	public void I_verify_that_User_able_to_unlock_locked_Tenant_account_in_the_Locked_accounts_page() {
		driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_Locked_Accounts_table_Action_unlocked_list())
				.click();
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getTenant_Module_Save_confirmation()).isDisplayed());
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Save_confirmation_Yes()).click();
		String msg = driver.findElement(By.xpath("//div[@class='ui-growl-message']")).getText();
		Assert.assertEquals(msg, "User Unlocked Successfully");
	}

	@Then("^I verify that User is able to view details of Locked Tenant account in the Locked accounts page$")
	public void I_verify_that_User_is_able_to_view_details_of_Locked_Tenant_account_in_the_Locked_accounts_page() {
		List<WebElement> Userlist = driver
				.findElements(cirrusDCSPageObjects3.getSecurity_Audit_Locked_Accounts_table_UserName_list());
		List<WebElement> accountLockedlist = driver
				.findElements(cirrusDCSPageObjects3.getSecurity_Audit_Locked_Accounts_table_AccountLocked_list());
		List<WebElement> MostRecentLoginFailurelist = driver.findElements(
				cirrusDCSPageObjects3.getSecurity_Audit_Locked_Accounts_table_Most_Recent_Login_Failure_list());
		List<WebElement> ConsecutiveFailureslist = driver.findElements(
				cirrusDCSPageObjects3.getSecurity_Audit_Locked_Accounts_table_Consecutive_Failures_list());
		for (int i = 0; i < Userlist.size(); i++) {
			String name = Userlist.get(i).getText();
			String name1 = accountLockedlist.get(i).getText();
			String name2 = MostRecentLoginFailurelist.get(i).getText();
			String name3 = ConsecutiveFailureslist.get(i).getText();
			System.out.println("name of the user is '" + name + "' its account is locked '" + name1
					+ "' and its most Recent login failure is '" + name2 + "' and its Consecutive Failureslist is '"
					+ name3 + "'");
		}
	}

	@Then("^I verify that User is able to view details of Account expired in the Expired Accounts page$")
	public void I_verify_that_User_is_able_to_view_details_of_Account_expired_in_the_Expired_Accounts_page() {
		List<WebElement> Userlist = driver
				.findElements(cirrusDCSPageObjects3.getSecurity_Audit_Expired_Accounts_table_UserName_list());
		List<WebElement> accountexpiredlist = driver
				.findElements(cirrusDCSPageObjects3.getSecurity_Audit_Expired_Accounts_table_accountexpired_list());
		List<WebElement> DaysSinceLastPasswordChangelist = driver.findElements(
				cirrusDCSPageObjects3.getSecurity_Audit_Expired_Accounts_table_Days_Since_Last_Password_Change_list());
		List<WebElement> PasswordLifeSpanlist = driver
				.findElements(cirrusDCSPageObjects3.getSecurity_Audit_Expired_Accounts_table_Password_LifeSpan_list());
		for (int i = 0; i < Userlist.size(); i++) {
			String name = Userlist.get(i).getText();
			String name1 = accountexpiredlist.get(i).getText();
			String name2 = DaysSinceLastPasswordChangelist.get(i).getText();
			String name3 = PasswordLifeSpanlist.get(i).getText();
			System.out.println("name of the user is '" + name + "' its account is expired '" + name1
					+ "' and its day since last password change is '" + name2 + "' and its password life span is '"
					+ name3 + "'");
		}
	}

	@Then("^I verify that user is able to search the user details by entering Username in the Tenant User Audit page$")
	public void I_verify_that_user_is_able_to_search_the_user_details_by_entering_Username_in_the_Tenant_User_Audit_page() {
		String name = "akshaybv@zktk";
		driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_Tenant_User_AuditUser_text_input_field())
				.sendKeys(name);
		driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_Text_Gobutton()).click();
		List<WebElement> Usernamelist = driver
				.findElements(cirrusDCSPageObjects3.getSecurity_Audit_Tenant_User_AuditUser_table_UserName_list());
		List<WebElement> msglist = driver
				.findElements(cirrusDCSPageObjects3.getSecurity_Audit_Tenant_User_AuditUser_table_AuditMsg_list());

		for (int i = 0; i < Usernamelist.size(); i++) {
			System.out.println(
					"'" + Usernamelist.get(i).getText() + "' and its audit msg is '" + msglist.get(i).getText() + "'");
		}
	}

	@Then("^I verify that user is able to search the user details by date in the Tenant User Audit page$")
	public void I_verify_that_user_is_able_to_search_the_user_details_by_date_in_the_Tenant_User_Audit_page() {
		driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_Tenant_User_Audit_From_Date_input())
				.sendKeys("10/17/2022 11:00");
		driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_Tenant_User_Audit_To_Date_input())
				.sendKeys("10/18/2022 00:00");

		driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_Text_Gobutton()).click();
		List<WebElement> Usernamelist = driver
				.findElements(cirrusDCSPageObjects3.getSecurity_Audit_Tenant_User_AuditUser_table_UserName_list());
		for (int i = 0; i < Usernamelist.size(); i++) {
			System.out.println(Usernamelist.get(i).getText());
		}
	}

	@Then("^I click on the Tenant User Audit  page and user is able to verify that all the fields which are available on the page$")
	public void I_click_on_the_Tenant_User_Audit_page_and_user_is_able_to_verify_that_all_the_fields_which_are_available_on_the_page() {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		List<WebElement> menulist = driver
				.findElements(cirrusDCSPageObjects3.getTenantPage_security_Audit_module_submenu_list());
		menulist.get(4).click();
		String headerName = driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_Locked_Accounts_Text())
				.getText();
		Assert.assertEquals(headerName, "Security & Audit >> Tenant User Audit");
		List<WebElement> fields = driver
				.findElements(cirrusDCSPageObjects3.getSecurity_Audit_Tenant_User_Audit_Text_fields_list());
		for (WebElement element : fields) {
			String ele = element.getText();

			switch (ele) {
			case "From":
				Assert.assertEquals(ele, "From");
				break;
			case "To":
				Assert.assertEquals(ele, "To");
				break;
			case "User":
				Assert.assertEquals(ele, "User");
				break;
			}
		}
		List<WebElement> columnName = driver
				.findElements(cirrusDCSPageObjects3.Security_Audit_Tenant_User_Audit_table_columnName_list());
		for (WebElement element : columnName) {
			String ele = element.getText();
			switch (ele) {
			case "Audit Date":
				Assert.assertEquals(ele, "Audit Date");
				break;
			case "Data Object":
				Assert.assertEquals(ele, "Data Object");
				break;
			case "User":
				Assert.assertEquals(ele, "User");
				break;
			case "Operation":
				Assert.assertEquals(ele, "Operation");
				break;
			case "Audit Message":
				Assert.assertEquals(ele, "Audit Message");
				break;
			}
		}
		List<WebElement> name2 = driver
				.findElements(cirrusDCSPageObjects3.getSecurity_Audit_Tenant_User_Audit_Export_As_button_list());
		for (WebElement element : name2) {
			String ele = element.getAttribute("value");
			switch (ele) {
			case "Export As CSV":
				Assert.assertEquals(ele, "Export As CSV");
				break;
			case "Export As PDF":
				Assert.assertEquals(ele, "Export As PDF");
				break;
			case "Export As Excel":
				Assert.assertEquals(ele, "Export As Excel");
				break;
			}
		}

	}

	@Then("^I click on the Locked accounts and user is able to verify that all the fields which are available on the page$")
	public void I_click_on_the_Locked_accounts_and_user_is_able_to_verify_that_all_the_fields_which_are_available_on_the_page() {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		List<WebElement> menulist = driver
				.findElements(cirrusDCSPageObjects3.getTenantPage_security_Audit_module_submenu_list());
		menulist.get(3).click();
		String headerName = driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_Locked_Accounts_Text())
				.getText();
		Assert.assertEquals(headerName, "Security & Audit >> Locked Accounts");
		List<WebElement> name2 = driver
				.findElements(cirrusDCSPageObjects3.getSecurity_Audit_Locked_Accounts_Export_As_button_list());
		for (WebElement element : name2) {
			String ele = element.getAttribute("value");
			switch (ele) {
			case "Export As CSV":
				Assert.assertEquals(ele, "Export As CSV");
				break;
			case "Export As PDF":
				Assert.assertEquals(ele, "Export As PDF");
				break;
			case "Export As Excel":
				Assert.assertEquals(ele, "Export As Excel");
				break;
			}
		}
		List<WebElement> columnName = driver
				.findElements(cirrusDCSPageObjects3.Security_Audit_Locked_Accounts_table_columnName_list());
		for (WebElement element : columnName) {
			String ele = element.getText();
			switch (ele) {
			case "Account":
				Assert.assertEquals(ele, "Account");
				break;
			case "Account Locked":
				Assert.assertEquals(ele, "Account Locked");
				break;
			case "User":
				Assert.assertEquals(ele, "User");
				break;
			case "Most Recent Login Failure":
				Assert.assertEquals(ele, "Most Recent Login Failure");
				break;
			case "Consecutive Failures":
				Assert.assertEquals(ele, "Consecutive Failures");
				break;
			case "Lockout Period End Time":
				Assert.assertEquals(ele, "Lockout Period End Time");
				break;
			case "Action":
				Assert.assertEquals(ele, "Action");
				break;
			}
		}
		js.executeScript("window.scrollBy(0,1000)");
		Assert.assertTrue(driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_Expired_Accounts_refresh_btn())
				.isDisplayed());
	}

	@Then("^I click on the Expired Accounts and user is able to verify that all the fields which are available on the page$")
	public void I_click_on_the_Expired_Accounts_and_user_is_able_to_verify_that_all_the_fields_which_are_available_on_the_page() {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		List<WebElement> menulist = driver
				.findElements(cirrusDCSPageObjects3.getTenantPage_security_Audit_module_submenu_list());
		menulist.get(2).click();
		String headerName = driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_Expired_Accounts_Text())
				.getText();
		Assert.assertEquals(headerName, "Security & Audit >> Expired Accounts");
		List<WebElement> name2 = driver
				.findElements(cirrusDCSPageObjects3.getSecurity_Audit_Expired_Accounts_Export_As_button_list());
		for (WebElement element : name2) {
			String ele = element.getAttribute("value");
			switch (ele) {
			case "Export As CSV":
				Assert.assertEquals(ele, "Export As CSV");
				break;
			case "Export As PDF":
				Assert.assertEquals(ele, "Export As PDF");
				break;
			case "Export As Excel":
				Assert.assertEquals(ele, "Export As Excel");
				break;
			}
		}
		List<WebElement> columnName = driver
				.findElements(cirrusDCSPageObjects3.getSecurity_Audit_Expired_Accounts_table_columnName_list());
		for (WebElement element : columnName) {
			String ele = element.getText();
			switch (ele) {
			case "Account":
				Assert.assertEquals(ele, "Account");
				break;
			case "Account Expired":
				Assert.assertEquals(ele, "Account Expired");
				break;
			case "User":
				Assert.assertEquals(ele, "User");
				break;
			case "Days Since Last Password Change":
				Assert.assertEquals(ele, "Days Since Last Password Change");
				break;
			case "Password LifeSpan":
				Assert.assertEquals(ele, "Password LifeSpan");
				break;
			}
		}
		// js.executeScript("window.scrollBy(0,1000)");
		Assert.assertTrue(driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_Expired_Accounts_refresh_btn())
				.isDisplayed());

	}

	@Then("^I click on the History Login Audit and user is able to verify that all the fields which are available on the page$")
	public void I_click_on_the_History_Login_Audit_and_user_is_able_to_verify_that_all_the_fields_which_are_available_on_the_page() {
		List<WebElement> menulist = driver
				.findElements(cirrusDCSPageObjects3.getTenantPage_security_Audit_module_submenu_list());
		menulist.get(1).click();
		String headerName = driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_Text())
				.getText();
		Assert.assertEquals(headerName, "Security & Audit >> History Login Audit");
		List<WebElement> fields = driver
				.findElements(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_Text_fields_list());
		for (WebElement element : fields) {
			String ele = element.getText();

			switch (ele) {
			case "From":
				Assert.assertEquals(ele, "From");
				break;
			case "To":
				Assert.assertEquals(ele, "To");
				break;
			case "User":
				Assert.assertEquals(ele, "User");
				break;
			}
		}
		Assert.assertTrue(
				driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_Text_Gobutton())
						.isDisplayed());
		List<WebElement> name2 = driver
				.findElements(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_Export_As_button_list());
		for (WebElement element : name2) {
			String ele = element.getAttribute("value");
			switch (ele) {
			case "Export As CSV":
				Assert.assertEquals(ele, "Export As CSV");
				break;
			case "Export As PDF":
				Assert.assertEquals(ele, "Export As PDF");
				break;
			case "Export As Excel":
				Assert.assertEquals(ele, "Export As Excel");
				break;
			}
		}
		List<WebElement> columnName = driver
				.findElements(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_table_columnName_list());
		for (WebElement element : columnName) {
			String ele = element.getText();

			switch (ele) {
			case "Account":
				Assert.assertEquals(ele, "Account");
				break;
			case "Sign On Time":
				Assert.assertEquals(ele, "Sign On Time");
				break;
			case "User":
				Assert.assertEquals(ele, "User");
				break;
			case "Sign Off Time":
				Assert.assertEquals(ele, "Sign Off Time");
				break;
			case "Device Type":
				Assert.assertEquals(ele, "Device Type");
				break;
			case "Failed Signon":
				Assert.assertEquals(ele, "Failed Signon");
				break;
			case "Invalid Credential":
				Assert.assertEquals(ele, "Invalid Credential");
				break;
			case "Failure Message":
				Assert.assertEquals(ele, "Failure Message");
				break;
			case "Session ID":
				Assert.assertEquals(ele, "Session ID");
				break;
			}
		}
	}

	@Then("^I Verify that user is able to access the pagination btn and the page is displaying accordingly$")
	public void I_Verify_that_user_is_able_to_access_the_pagination_btn_and_the_page_is_displaying_accordingly()
			throws InterruptedException {
		int m = 1;
		List<WebElement> pageno = driver.findElements(cirrusDCSPageObjects4.getWorkdayIntegration_Page_btn());
		List<String> total_property1 = new ArrayList<String>();
		for (int i = 0; i < pageno.size(); i++) {
			List<WebElement> Properties = driver
					.findElements(cirrusDCSPageObjects4.getWorkdayIntegration_properties_list());
			for (int b = 0; b < Properties.size(); b++) {
				WebElement Properties1 = Properties.get(b);
				String PropertiesName = Properties1.getText();
				total_property1.add(b, PropertiesName);
				System.out.println(m + ". " + total_property1.get(b));
				m = m + 1;
			}
			Properties.clear();
			WebElement element = driver.findElement(cirrusDCSPageObjects4.getWorkdayIntegration_forward_btn());
			JavascriptExecutor executor = (JavascriptExecutor) driver;
			executor.executeScript("arguments[0].click();", element);
			Thread.sleep(3000);

		}
	}

	@Then("^I click on the log which is available on the Workday Integration Manual Operation Details block$")
	public void I_click_on_the_log_which_is_available_on_the_Workday_Integration_Manual_Operation_Details_block()
			throws InterruptedException {
		Thread.sleep(1000);
		JavascriptExecutor executor = (JavascriptExecutor) driver;
		WebElement element = driver.findElement(
				cirrusDCSPageObjects4.getWorkdayIntegration_Workday_Integration_Manual_Operation_Details_jobKey_name());
		String v = element.getAttribute("aria-selected");
		System.out.println(v);
		while (v.contains("false")) {
			v = element.getAttribute("aria-selected");
			executor.executeScript("arguments[0].click();", element);
		}
	}

	@Then("^I verify that user is able to get the jobs details in the Log Detail For block$")
	public void I_verify_that_user_is_able_to_get_the_jobs_details_in_the_Log_Detail_For_block()
			throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,800)");
		String msg = driver
				.findElement(cirrusDCSPageObjects4
						.getWorkdayIntegration_Workday_Integration_Manual_Operation_Details_Log_details_for_msg())
				.getText();
		System.out.println(msg);

	}

	@Then("^I click on the log link and verify that user is able to search the msg in the log details page$")
	public void I_click_on_the_log_link_and_verify_that_user_is_able_to_search_the_msg_in_the_log_details_page()
			throws InterruptedException {
		wait.until(ExpectedConditions.invisibilityOf(driver.findElement(By.xpath("//img[@id='j_id_b']"))));
		driver.findElement(cirrusDCSPageObjects4
				.getWorkdayIntegration_Workday_Integration_Manual_Operation_Details_Action_column_log_link()).click();
		Thread.sleep(2000);
		String search = "GetWorkers >>> Load the individual workers from employeelist or contingentlist:";
		driver.findElement(
				cirrusDCSPageObjects4.getWorkdayIntegration_Workday_Integration_Manual_Operation_log_window_search())
				.sendKeys(search);
		driver.findElement(cirrusDCSPageObjects4
				.getWorkdayIntegration_Workday_Integration_Manual_Operation_log_window_search_btn()).click();
		Thread.sleep(1000);
		List<WebElement> logmsglist = driver.findElements(cirrusDCSPageObjects4
				.getWorkdayIntegration_Workday_Integration_Manual_Operation_log_table_search_log_msg_list());
		for (WebElement logmsg : logmsglist) {
			System.out.println(logmsg.getText());
		}
	}

	@Then("^I click on the log link and verify that available fields are displayed on the log details window$")
	public void I_click_on_the_log_link_and_verify_that_available_fields_are_displayed_on_the_log_details_window()
			throws InterruptedException {
		wait.until(ExpectedConditions.invisibilityOf(driver.findElement(By.xpath("//img[@id='j_id_b']"))));
		driver.findElement(cirrusDCSPageObjects4
				.getWorkdayIntegration_Workday_Integration_Manual_Operation_Details_Action_column_log_link()).click();
		Thread.sleep(2000);
		String name = driver.findElement(
				cirrusDCSPageObjects4.getWorkdayIntegration_Workday_Integration_Manual_Operation_log_details_Txt())
				.getText();
		Assert.assertEquals(name, "Log Details");
		Assert.assertTrue(driver.findElement(
				cirrusDCSPageObjects4.getWorkdayIntegration_Workday_Integration_Manual_Operation_log_window_search())
				.isDisplayed());

		List<WebElement> colunmName = driver.findElements(cirrusDCSPageObjects4
				.getWorkdayIntegration_Workday_Integration_Manual_Operation_log_table_column_name());

		for (WebElement ele1 : colunmName) {
			String element = ele1.getText();
			switch (element) {

			case "Log Time":
				Assert.assertEquals(element, "Log Time");
				break;
			case "Log Message":
				Assert.assertEquals(element, "Log Message");
				break;
			case "Employee Number":
				Assert.assertEquals(element, "Employee Number");
				break;
			}
		}
		List<WebElement> btns = driver.findElements(cirrusDCSPageObjects4
				.getWorkdayIntegration_Workday_Integration_Manual_Operation_log_table_All_pgn_btn());

		for (WebElement pgbtn : btns) {
			Assert.assertTrue(pgbtn.isDisplayed());
		}
	}

	@Then("^I verify that user is able to view all the fields which is available on the employee reload page$")
	public void I_verify_that_user_is_able_to_view_all_the_fields_which_is_available_on_the_employee_reload_page()
			throws InterruptedException {
		String txt = driver
				.findElement(
						cirrusDCSPageObjects4.getWorkdayIntegration_Workday_Integration_Employeee_Reload__page_txt())
				.getText();
		Assert.assertEquals(txt, "Workday Integration >> Workday Data Reload");
		Assert.assertTrue(driver
				.findElement(cirrusDCSPageObjects4
						.getWorkdayIntegration_Workday_Integration_Employeee_Reload_Employee_Id_Numbers_Only_field())
				.isDisplayed());
		Assert.assertTrue(driver.findElement(cirrusDCSPageObjects4
				.getWorkdayIntegration_Workday_Integration_Employeee_Reload_Contingent_Workers_ID_Number_Only_field())
				.isDisplayed());
		Assert.assertTrue(driver.findElement(
				cirrusDCSPageObjects4.getWorkdayIntegration_Workday_Integration_Employeee_Reload_Reload_IDs_btn())
				.isDisplayed());
	}

	@Then("^I verify that user is able to see that after the clicking on the refresh btn search field get cleared$")
	public void I_verify_that_user_is_able_to_see_that_after_the_clicking_on_the_refresh_btn_search_field_get_cleared()
			throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,800)");
		driver.findElement(
				cirrusDCSPageObjects4.getWorkdayIntegration_Workday_Integration_Manual_Operation_Details_Refresh_btn())
				.click();
		Thread.sleep(300);
		WebElement element = driver.findElement(
				cirrusDCSPageObjects4.getWorkdayIntegration_Manual_operations_key_value_text_input_field());
		js.executeScript("arguments[0].click();", element);
		String vl = driver
				.findElement(cirrusDCSPageObjects4.getWorkdayIntegration_Manual_operations_key_value_text_input_field())
				.getText();
		System.out.println(vl);
	}

	@Then("^I enter the key in the search field which is available on the workday integration manual operation details block$")
	public void I_enter_the_key_in_the_search_field_which_is_available_on_the_workday_integration_manual_operation_details_block()
			throws InterruptedException {
		Thread.sleep(2000);
		String keyname = "getWDWorkers_ZKTK";
		wait.until(ExpectedConditions.invisibilityOf(driver.findElement(By.xpath("//img[@id='j_id_b']"))));
		driver.findElement(cirrusDCSPageObjects4.getWorkdayIntegration_Manual_operations_key_value_text_input_field())
				.sendKeys(keyname);
	}

	@Then("^I verify that user is able to search key in the workday integration Manual operation details block$")
	public void I_verify_that_user_is_able_to_search_key_in_the_workday_integration_Manual_operation_details_block()
			throws InterruptedException {
		Thread.sleep(2000);
		String keyname = "getWDWorkers_ZKTK";
		wait.until(ExpectedConditions.invisibilityOf(driver.findElement(By.xpath("//img[@id='j_id_b']"))));
		driver.findElement(
				cirrusDCSPageObjects4.getWorkdayIntegration_Workday_Integration_Manual_Operation_Details_search_field())
				.sendKeys(keyname);
		driver.findElement(
				cirrusDCSPageObjects4.getWorkdayIntegration_Workday_Integration_Manual_Operation_Details_search_btn())
				.click();
		Thread.sleep(1000);
		int n = 1;
		List<WebElement> pages = driver.findElements(
				cirrusDCSPageObjects4.getWorkdayIntegration_Workday_Integration_Manual_Operation_Details_Page_btn());
		List<String> total_jobs = new ArrayList<String>();
		for (int i = 0; i < pages.size(); i++) {
			List<WebElement> jobNamelist = driver.findElements(cirrusDCSPageObjects4
					.getWorkdayIntegration_Workday_Integration_Manual_Operation_Details_jobKey_list());
			for (int b = 0; b < jobNamelist.size(); b++) {
				WebElement jobname = jobNamelist.get(b);
				String jobname1 = jobname.getText();
				total_jobs.add(b, jobname1);
				System.out.println(n + ". " + total_jobs.get(b));
				n = n + 1;
			}
			jobNamelist.clear();
			WebElement element = driver.findElement(cirrusDCSPageObjects4
					.getWorkdayIntegration_Workday_Integration_Manual_Operation_Details_forword_btn());
			JavascriptExecutor executor = (JavascriptExecutor) driver;
			executor.executeScript("arguments[0].click();", element);
			Thread.sleep(3000);

		}

	}

	@Then("^I click on the edit button in the Workday Integration Manual Operation block and all fields are displayed$")
	public void I_click_on_the_edit_button_in_the_Workday_Integration_Manual_Operation_block_and_all_fields_are_displayed()
			throws InterruptedException {
		Thread.sleep(2000);
		wait.until(ExpectedConditions.invisibilityOf(driver.findElement(By.xpath("//img[@id='j_id_b']"))));
		driver.findElement(cirrusDCSPageObjects4
				.getWorkdayIntegration_Manual_operations_Header_workdayIntegrationManualOperation_properties_edit_btn())
				.click();
		Thread.sleep(2000);
		String namee = driver.findElement(
				cirrusDCSPageObjects4.getWorkdayIntegration_Workday_Integration_Manual_Operation_edit_property_Txt())
				.getText();
		Assert.assertEquals(namee, "Edit Property");
		List<WebElement> name1 = driver.findElements(cirrusDCSPageObjects4
				.getWorkdayIntegration_Workday_Integration_Manual_Operation_edit_property_fields());
		Assert.assertEquals(name1.get(0).getText(), "Property Key :");
		Assert.assertEquals(name1.get(1).getText(), "Property Value :");
		Assert.assertTrue(driver.findElement(
				cirrusDCSPageObjects4.getWorkdayIntegration_Workday_Integration_Manual_Operation_edit_save_btn())
				.isDisplayed());

	}

	@Then("^I verify that user is able to search the key or value in the manual operations page$")
	public void I_verify_that_user_is_able_to_search_the_key_or_value_in_the_manual_operations_page()
			throws InterruptedException {
		driver.findElement(cirrusDCSPageObjects4.getWorkdayIntegration_Manual_operations_key_value_text_input_field())
				.sendKeys("workday.getworkers.IncludeCompensation");
		driver.findElement(cirrusDCSPageObjects4.getWorkdayIntegration_Manual_operations_key_value_text_search_button())
				.click();
		Thread.sleep(2000);
		List<WebElement> name1 = driver.findElements(cirrusDCSPageObjects4
				.getWorkdayIntegration_Manual_operations_Header_workdayIntegrationManualOperation_properties_list());
		for (WebElement mm : name1) {
			String b = mm.getText();
			System.out.println(b);
		}

	}

	@Then("^I verify that user is able to Select Operation from the select operation drop down in the manual operations page$")
	public void I_verify_that_user_is_able_to_Select_Operation_from_the_select_operation_drop_down_in_the_manual_operations_page()
			throws InterruptedException {

		Thread.sleep(2000);
		wait.until(ExpectedConditions.invisibilityOf(driver.findElement(By.xpath("//img[@id='j_id_b']"))));
		driver.findElement(cirrusDCSPageObjects4.getWorkdayIntegration_Manual_operations_select_operation_dropdown())
				.click();
		List<WebElement> list = driver.findElements(By.xpath("//ul[@id='manualOperationForm:j_id_1d_items']/li"));
		for (int i = 0; i < list.size(); i++) {
			String n = list.get(i).getText();
			// System.out.println(n);

		}
		for (int i = 0; i < list.size(); i++) {
			String b = list.get(i).getText();
			if (b.contains("testjob")) {
				list.get(i).click();
			}
		}
	}

	@Then("^I click on the Employee Reload page$")
	public void I_click_on_the_Employee_Reload_page() throws InterruptedException {
		List<WebElement> menulist = driver
				.findElements(cirrusDCSPageObjects4.getTenantPage_WorkdayIntegration_submenu_list());
		menulist.get(2).click();
	}

	@Then("^I click on the Manual operations page$")
	public void I_click_on_the_Manual_operations_page() throws InterruptedException {
		List<WebElement> menulist = driver
				.findElements(cirrusDCSPageObjects4.getTenantPage_WorkdayIntegration_submenu_list());
		menulist.get(1).click();
	}

	@Then("^I click on the Manual operations page and user is able to verify that all the fields are displayed in Manual operations page$")
	public void I_click_on_the_Manual_operations_and_user_is_able_to_verify_that_all_the_fields_are_displayed_in_Manual_operations_Properties_page()
			throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		List<WebElement> menulist = driver
				.findElements(cirrusDCSPageObjects4.getTenantPage_WorkdayIntegration_submenu_list());
		menulist.get(1).click();
		String headerName = driver
				.findElement(cirrusDCSPageObjects4.getWorkdayIntegration_Manual_operations_Header_Text()).getText();

		Assert.assertEquals(headerName, "Workday Integration >> Manual Operation");
		String name = driver
				.findElement(cirrusDCSPageObjects4
						.getWorkdayIntegration_Manual_operations_Header_workdayIntegrationManualOperation_Text())
				.getText();
		System.out.println(name);
		Assert.assertEquals(name, "Workday Integration Manual Operation");

		Assert.assertTrue(driver
				.findElement(cirrusDCSPageObjects4.getWorkdayIntegration_Manual_operations_select_operation_dropdown())
				.isDisplayed());
		Assert.assertTrue(driver
				.findElement(cirrusDCSPageObjects4.getWorkdayIntegration_Manual_operations_key_value_text_input_field())
				.isDisplayed());
		Assert.assertTrue(driver
				.findElement(
						cirrusDCSPageObjects4.getWorkdayIntegration_Manual_operations_key_value_text_search_button())
				.isDisplayed());

		List<WebElement> colunmName = driver.findElements(cirrusDCSPageObjects4
				.getWorkdayIntegration_Manual_operations_Header_workdayIntegrationManualOperation_table_column());

		for (WebElement ele1 : colunmName) {
			String element = ele1.getText();
			switch (element) {

			case " Key":
				Assert.assertEquals(element, " Key");
				break;
			case " Value":
				Assert.assertEquals(element, " Value");
				break;
			case "Value":
				Assert.assertEquals(element, "Value");
				break;
			case " Edit":
				Assert.assertEquals(element, " Edit");
				break;
			}
		}
		int m = 1;
		List<WebElement> pageno = driver.findElements(cirrusDCSPageObjects4
				.getWorkdayIntegration_Manual_operations_Header_workdayIntegrationManualOperation_Page_btn());
		List<String> total_property1 = new ArrayList<String>();
		for (int i = 0; i < pageno.size(); i++) {
			List<WebElement> Properties = driver.findElements(cirrusDCSPageObjects4
					.getWorkdayIntegration_Manual_operations_Header_workdayIntegrationManualOperation_properties_list());
			for (int b = 0; b < Properties.size(); b++) {
				WebElement Properties1 = Properties.get(b);
				String PropertiesName = Properties1.getText();
				total_property1.add(b, PropertiesName);
				System.out.println(m + ". " + total_property1.get(b));
				m = m + 1;
			}
			Properties.clear();
			WebElement element = driver.findElement(cirrusDCSPageObjects4
					.getWorkdayIntegration_Manual_operations_Header_workdayIntegrationManualOperation_forward_btn());
			JavascriptExecutor executor = (JavascriptExecutor) driver;
			executor.executeScript("arguments[0].click();", element);
			Thread.sleep(3000);

		}
		Assert.assertTrue(driver
				.findElement(cirrusDCSPageObjects4
						.getWorkdayIntegration_Manual_operations_Header_workdayIntegrationManualOperation_submit_btn())
				.isDisplayed());
		String name2 = driver
				.findElement(
						cirrusDCSPageObjects4.getWorkdayIntegration_Workday_Integration_Manual_Operation_Details_Text())
				.getText();
		System.out.println(name2);

		List<WebElement> colunmName1 = driver.findElements(cirrusDCSPageObjects4
				.getWorkdayIntegration_Workday_Integration_Manual_Operation_Details_table_columns_list());

		for (WebElement ele1 : colunmName1) {
			String element = ele1.getText();
			System.out.println(element);
			switch (element) {

			case " Job Key":
				Assert.assertEquals(element, " Job Key");
				break;
			case " Start Time":
				Assert.assertEquals(element, " Start Time");
				break;
			case " End Time":
				Assert.assertEquals(element, " End Time");
				break;
			case " Job Operation Status":
				Assert.assertEquals(element, " Job Operation Status");
				break;
			case "Action":
				Assert.assertEquals(element, "Action");
				break;
			}
		}

		System.out.println("list of the job key");

		int n = 1;
		List<WebElement> pages = driver.findElements(
				cirrusDCSPageObjects4.getWorkdayIntegration_Workday_Integration_Manual_Operation_Details_Page_btn());
		List<String> total_jobs = new ArrayList<String>();
		for (int i = 0; i < pages.size(); i++) {
			List<WebElement> jobNamelist = driver.findElements(cirrusDCSPageObjects4
					.getWorkdayIntegration_Workday_Integration_Manual_Operation_Details_jobKey_list());
			for (int b = 0; b < jobNamelist.size(); b++) {
				WebElement jobname = jobNamelist.get(b);
				String jobname1 = jobname.getText();
				total_jobs.add(b, jobname1);
				System.out.println(n + ". " + total_jobs.get(b));
				n = n + 1;
			}
			jobNamelist.clear();
			WebElement element = driver.findElement(cirrusDCSPageObjects4
					.getWorkdayIntegration_Workday_Integration_Manual_Operation_Details_forword_btn());
			JavascriptExecutor executor = (JavascriptExecutor) driver;
			executor.executeScript("arguments[0].click();", element);
			Thread.sleep(3000);

		}
		Assert.assertTrue(driver
				.findElement(cirrusDCSPageObjects4
						.getWorkdayIntegration_Workday_Integration_Manual_Operation_Details_Action_column_log_link())
				.isDisplayed());
		js.executeScript("window.scrollBy(0,1000)");
		Assert.assertTrue(driver
				.findElement(cirrusDCSPageObjects4
						.getWorkdayIntegration_Workday_Integration_Manual_Operation_Details_Refresh_btn())
				.isDisplayed());
	}

	@Then("^I click on the Integration Properties and user is able to verify that all the fields are displayed in WorkDay Integration Properties page$")
	public void I_click_on_the_Integration_Properties_and_user_is_able_to_verify_that_all_the_fields_are_displayed_in_WorkDay_Integration_Properties_page() {
		List<WebElement> menulist = driver
				.findElements(cirrusDCSPageObjects4.getTenantPage_WorkdayIntegration_submenu_list());
		menulist.get(0).click();
		String headerName = driver.findElement(cirrusDCSPageObjects4.getWorkdayIntegration_Text()).getText();
		Assert.assertEquals(headerName, "Workday Integration >> Integration Properties");
		Assert.assertTrue(
				driver.findElement(cirrusDCSPageObjects4.getWorkdayIntegration_Search_input_field()).isDisplayed());
		Assert.assertTrue(
				driver.findElement(cirrusDCSPageObjects4.getWorkdayIntegration_Search_button_icon()).isDisplayed());
		Assert.assertTrue(
				driver.findElement(cirrusDCSPageObjects4.getWorkdayIntegration_Export_button_icon()).isDisplayed());

		List<WebElement> colunmName = driver
				.findElements(cirrusDCSPageObjects4.getWorkdayIntegration_table_columns_list());
		for (WebElement ele : colunmName) {
			String element = ele.getText();

			switch (element) {

			case "Category":
				Assert.assertEquals(element, "Category");
				break;
			case "Property Key":
				Assert.assertEquals(element, "Property Key");
				break;
			case "Value":
				Assert.assertEquals(element, "Value");
				break;
			case "Data Type":
				Assert.assertEquals(element, "Data Type");
				break;
			case "Action":
				Assert.assertEquals(element, "Action");
				break;

			}
		}
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,1000)");
		Assert.assertTrue(
				driver.findElement(cirrusDCSPageObjects4.getWorkdayIntegration_Pagination_btns_list()).isDisplayed());
	}

	@Then("^I click on the Active Login User and user is able to verify that all the fields which are available on the page$")
	public void I_click_on_the_Active_Login_User_and_user_is_able_to_verify_that_all_the_fields_which_are_available_on_the_page() {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		List<WebElement> menulist = driver
				.findElements(cirrusDCSPageObjects3.getTenantPage_security_Audit_module_submenu_list());
		menulist.get(0).click();
		String headerName = driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_Active_Login_Users_Text())
				.getText();
		Assert.assertEquals(headerName, "Active Login Users");
		Assert.assertTrue(driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_Active_Login_Users_UserField())
				.isDisplayed());
		Assert.assertTrue(driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_Active_Login_Users_Gobutton())
				.isDisplayed());
		List<WebElement> name2 = driver
				.findElements(cirrusDCSPageObjects3.getSecurity_Audit_Active_Login_Users_Export_As_button_list());
		for (WebElement element : name2) {
			String ele = element.getAttribute("value");
			switch (ele) {
			case "Export As CSV":
				Assert.assertEquals(ele, "Export As CSV");
				break;
			case "Export As PDF":
				Assert.assertEquals(ele, "Export As PDF");
				break;
			case "Export As Excel":
				Assert.assertEquals(ele, "Export As Excel");
				break;
			}
		}
		List<WebElement> colunmName = driver
				.findElements(cirrusDCSPageObjects3.getSecurity_Audit_Active_Login_Users_table_column_list());
		for (WebElement ele : colunmName) {
			String element = ele.getText();
			switch (element) {

			case "Account":
				Assert.assertEquals(element, "Account");
				break;
			case "User":
				Assert.assertEquals(element, "User");
				break;
			case "Sign On Time":
				Assert.assertEquals(element, "Sign On Time");
				break;
			case "Duration":
				Assert.assertEquals(element, "Duration");
				break;
			case "Device Type":
				Assert.assertEquals(element, "Device Type");
				break;
			case "Session ID":
				Assert.assertEquals(element, "Session ID");
				break;
			case "Action":
				Assert.assertEquals(element, "Action");
				break;
			}
		}

		js.executeScript("window.scrollBy(0,1000)");
		Assert.assertTrue(
				driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_Active_Login_Users_Refresh_button())
						.isDisplayed());
	}

	@Then("^I visit CirrusDCS Tenantlogin and verify Account module is displayed with its submenu$")
	public void I_visit_CirrusDCS_Tenantlogin_and_verify_Account_module_is_displayed_with_its_submenu()
			throws InterruptedException {
		List<WebElement> menulist = driver.findElements(CirrusDCSPageObjects6.getTenantPage_Account_submenu_list());
		for (WebElement Menu : menulist) {
			String MenuName = Menu.getText();
			System.out.println(MenuName);
			switch (MenuName) {
			case "Account Users":
				Assert.assertEquals(MenuName, "Account Users");
				break;
			case "Jobs":
				Assert.assertEquals(MenuName, "Jobs");
				break;
			case "Account Setup":
				Assert.assertEquals(MenuName, "Account Setup");
				break;

			case "Subscriptions":
				Assert.assertEquals(MenuName, "Subscriptions");
				break;

			case "Events":
				Assert.assertEquals(MenuName, "Events");
				break;
			case "Roles":
				Assert.assertEquals(MenuName, "Roles");
				break;

			}
		}
	}

	@Then("^I visit CirrusDCS Tenantlogin and verify WorkdayIntegration module is displayed with its submenu$")
	public void I_visit_CirrusDCS_Tenantlogin_and_verify_WorkdayIntegration_module_is_displayed_with_its_submenu()
			throws InterruptedException {
		List<WebElement> menulist = driver
				.findElements(cirrusDCSPageObjects4.getTenantPage_WorkdayIntegration_submenu_list());
		for (WebElement Menu : menulist) {
			String MenuName = Menu.getText();
			System.out.println(MenuName);
			switch (MenuName) {

			case "Integration Properties":
				Assert.assertEquals(MenuName, "Integration Properties");
				break;
			case "Manual Operations":
				Assert.assertEquals(MenuName, "Manual Operations");
				break;
			case "Employee Reload":
				Assert.assertEquals(MenuName, "Employee Reload");
				break;

			}
		}
	}

	@Then("^I visit CirrusDCS Tenantlogin and verify Security and audit module is displayed with its submenu$")
	public void I_visit_CirrusDCS_Tenantlogin_and_verify_Security_and_audit_module_is_displayed_with_its_submenu()
			throws InterruptedException {
		List<WebElement> menulist = driver
				.findElements(cirrusDCSPageObjects3.getTenantPage_security_Audit_module_submenu_list());
		for (WebElement Menu : menulist) {
			String MenuName = Menu.getText();
			System.out.println(MenuName);
			switch (MenuName) {

			case "Active Login Users":
				Assert.assertEquals(MenuName, "Active Login Users");
				break;
			case "History Login Audit":
				Assert.assertEquals(MenuName, "History Login Audit");
				break;
			case "Expired Accounts":
				Assert.assertEquals(MenuName, "Expired Accounts");
				break;
			case "Locked Accounts":
				Assert.assertEquals(MenuName, "Locked Accounts");
				break;
			case "Tenant User Audit":
				Assert.assertEquals(MenuName, "Tenant User Audit");
				break;
			}
		}
	}

	@Then("^I visit CirrusDCS HostLogin with invalid credentials$")
	public void I_visit_CirrusDCS_HostLogin_with_invalid_credentials() {
		String num = property.getProperty("Maxlogintrialattempt");
		int PasswordLength = Integer.parseInt(num);
		for (int i = 0; i <= PasswordLength; i++) {
			driver.findElement(CirrusDCSPageObjects.getusername()).sendKeys(property.getProperty("Username"));
			driver.findElement(CirrusDCSPageObjects.getPassword()).sendKeys(IncorrectHostloginPwd);
			driver.findElement(CirrusDCSPageObjects.getSignin()).click();
		}
	}

	@Then("^I verify that user is able to check that account is locked after set number of Max incorrect login trial attempt$")
	public void I_verify_that_user_is_able_to_check_that_account_is_locked_after_set_number_of_Max_incorrect_login_trial_attempt() {
		String msg = driver.findElement(By.xpath("//div[@class='zk_errorMessageContainer']/span")).getText();
		System.out.println(msg);
	}

	@Then("^I visit CirrusDCS HostLogin and verify Security and audit module is displayed with its submenu$")
	public void I_visit_CirrusDCS_HostLogin_and_verify_Security_and_audit_module_is_displayed_with_its_submenu()
			throws InterruptedException {
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module()).click();
		String Name = driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module()).getText();
		System.out.println(Name);
		List<WebElement> MenuList = driver.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Menus_list());
		for (WebElement Menu : MenuList) {
			String MenuName = Menu.getText();
			switch (MenuName) {

			case "Host Role":
				Assert.assertEquals(MenuName, "Host Role");
				System.out.println(MenuName);
				break;
			case "Tenant Role":
				Assert.assertEquals(MenuName, "Tenant Role");
				System.out.println(MenuName);
				break;
			case "Security Policy":
				Assert.assertEquals(MenuName, "Security Policy");
				System.out.println(MenuName);
				break;
			case "Login Audit":
				Assert.assertEquals(MenuName, "Login Audit");
				System.out.println(MenuName);
				break;
			case "Events":
				Assert.assertEquals(MenuName, "Events");
				System.out.println(MenuName);
				break;
			case "Locked Accounts":
				Assert.assertEquals(MenuName, "Locked Accounts");
				System.out.println(MenuName);
				break;
			case "Expired Accounts":
				Assert.assertEquals(MenuName, "Expired Accounts");
				System.out.println(MenuName);
				break;
			}
		}

	}

	@Then("^I click on the security and audit module$")
	public void I_click_on_the_security_and_audit_module() throws InterruptedException {
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module()).click();
	}

	@Then("^I verify user is able to set the session time out value as per the requirement$")
	public void I_verify_user_is_able_to_set_the_session_time_out_value_as_per_the_requirement()
			throws InterruptedException {
		String num = property.getProperty("Sessiontimeout");
		WebElement no = driver.findElement(By.xpath(
				"//div[@id='securityPolicyForm:policyGrid_content']/table/tbody/tr/td[1]/div[3]/div[1]/div[2]/input"));
		no.clear();
		no.sendKeys(num);
		Thread.sleep(2000);
		List<WebElement> buttons = driver
				.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Security_policy_submenu_btns_list());
		buttons.get(0).click();
		Thread.sleep(2000);
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Security_policy_confirmationPage_yes_btn())
				.click();
		Assert.assertNotEquals(no.getText(), Sessiontimeout);
		wait.until(
				ExpectedConditions.visibilityOf(driver.findElement(By.xpath("//div[@class='ui-growl-message']/span"))));
		String msg = driver.findElement(By.xpath("//div[@class='ui-growl-message']/span")).getText();
		Assert.assertEquals(msg, "Security Policy Updated Successfully");

	}

	@Then("^I click on the session time out$")
	public void I_click_on_the_session_time_out() throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		Sessiontimeout = js
				.executeScript("return document.getElementById('securityPolicyForm:policyGrid:0:sessionTimeout').value")
				.toString();
		System.out.println(Sessiontimeout);
	}

	@Then("^I click on the track interval$")
	public void I_click_on_the_track_interval() throws InterruptedException {
		TrackInterval = driver.findElement(By.id("securityPolicyForm:policyGrid:0:j_id_20_display")).getText();
		System.out.println(TrackInterval);
	}

	@Then("^I click on the password length$")
	public void I_click_on_the_password_length() throws InterruptedException {
		passwordLength = driver.findElement(By.id("securityPolicyForm:policyGrid:0:j_id_1b_display")).getText();
		System.out.println(passwordLength);
	}

	@Then("^I click on the password tracking$")
	public void I_click_on_the_password_tracking() throws InterruptedException {
		passwordtraking = driver.findElement(By.id("securityPolicyForm:policyGrid:0:j_id_1m_display")).getText();
		System.out.println(passwordtraking);
	}

	@Then("^I click on the Max login trial attempt$")
	public void I_click_on_the_Max_login_trial_attempt() throws InterruptedException {
		Maxlogintrialattempt = driver.findElement(By.id("securityPolicyForm:policyGrid:0:j_id_1v_display")).getText();
		System.out.println("display value " + Maxlogintrialattempt);
	}

	@Then("^I click on the Lockout interval$")
	public void I_click_on_the_Lockout_interval() throws InterruptedException {
		Lockoutinterval = driver
				.findElement(
						cirrusDCSPageObjects2.getsecurity_Audit_module_Security_policy_Lockout_Interval_Hrs_value())
				.getText();
		System.out.println("display value " + Lockoutinterval);
	}

	@Then("^I verify user is able to set the Send Email when lockout check box toggle button as per the requirement$")
	public void I_verify_user_is_able_to_set_the_Send_Email_when_lockout_check_box_toggle_button_as_per_the_requirement()
			throws InterruptedException {
		String value = driver
				.findElement(cirrusDCSPageObjects2
						.getsecurity_Audit_module_Security_policy_Send_Email_when_lockout_checkbox())
				.getAttribute("class");
		if (value.contains("check")) {
			System.out.println("Send Email when lockout check box is enable");
		} else if (value.contains("blank")) {
			System.out.println("Send Email when lockout check box is disable");
		}
		List<WebElement> buttons = driver
				.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Security_policy_submenu_btns_list());
		buttons.get(0).click();
		Thread.sleep(2000);
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Security_policy_confirmationPage_yes_btn())
				.click();
		wait.until(ExpectedConditions.visibilityOf(driver
				.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Security_policy_successfull_alert_msg())));
		String msg = driver
				.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Security_policy_successfull_alert_msg())
				.getText();
		// System.out.println(msg);
		Assert.assertEquals(msg, "Security Policy Updated Successfully");
	}

	@Then("^I verify user is able to set the Two Factor Authentication by email as per the requirement$")
	public void I_verify_user_is_able_to_set_the_Two_Factor_Authentication_by_email_as_per_the_requirement()
			throws InterruptedException {
		String value = driver
				.findElement(cirrusDCSPageObjects2
						.getsecurity_Audit_module_Security_policy_Two_Factor_Authentication_by_email_checkbox())
				.getAttribute("style");
		System.out.println(value);
		if (value.equals("width: 29.4px; margin-right: 0px;")) {
			System.out.println("Two factor authentication is disable");
		} else if (value.equals("width: 29px; margin-right: -29px;")) {
			System.out.println("Two factor authentication is enable");
		}
		List<WebElement> buttons = driver
				.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Security_policy_submenu_btns_list());
		// buttons.get(0).click();
		Thread.sleep(2000);
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Security_policy_confirmationPage_yes_btn())
				.click();
		wait.until(ExpectedConditions.visibilityOf(driver
				.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Security_policy_successfull_alert_msg())));
		String msg = driver
				.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Security_policy_successfull_alert_msg())
				.getText();
		System.out.println(msg);
		Assert.assertEquals(msg, "Security Policy Updated Successfully");
	}

	@Then("^I click on the Send Email when lockout check box$")
	public void I_click_on_the_Send_Email_when_lockout_check_box() throws InterruptedException {
		driver.findElement(
				cirrusDCSPageObjects2.getsecurity_Audit_module_Security_policy_Send_Email_when_lockout_checkbox())
				.click();

	}

	@Then("^I click on the Two Factor Authentication by email$")
	public void I_click_on_the_Two_Factor_Authentication_by_email() throws InterruptedException {
		driver.findElement(cirrusDCSPageObjects2
				.getsecurity_Audit_module_Security_policy_Two_Factor_Authentication_by_email_checkbox1()).click();
		Thread.sleep(2000);
	}

	@Then("^I verify user is able to set the track interval value as per the requirement$")
	public void I_verify_user_is_able_to_set_the_track_interval_value_as_per_the_requirement()
			throws InterruptedException {
		String num = property.getProperty("TrackIntervalSecond");
		int number = Integer.parseInt(num);
		System.out.println(number);
		int number1 = Integer.parseInt(TrackInterval);
		System.out.println("display " + number1);
		driver.findElement(By.id("securityPolicyForm:policyGrid:0:j_id_1v_display")).click();

		if (number1 < number) {
			for (int i = number1; i < number; i++) {
				driver.findElement(By.xpath("//span[@id='securityPolicyForm:policyGrid:0:maxTrialInterval']/a[1]"))
						.click();
			}
		} else if (number1 > number) {
			for (int i = number1; i > number; i--) {
				driver.findElement(By.xpath("//span[@id='securityPolicyForm:policyGrid:0:maxTrialInterval']/a[2]"))
						.click();
			}
		} else {

		}
		List<WebElement> buttons = driver
				.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Security_policy_submenu_btns_list());
		buttons.get(0).click();
		Thread.sleep(2000);
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Security_policy_confirmationPage_yes_btn())
				.click();
		wait.until(
				ExpectedConditions.visibilityOf(driver.findElement(By.xpath("//div[@class='ui-growl-message']/span"))));
		String msg = driver.findElement(By.xpath("//div[@class='ui-growl-message']/span")).getText();
		System.out.println(msg);
		Assert.assertEquals(msg, "Security Policy Updated Successfully");

	}

	@Then("^I verify user is able to set the Max login trial attempt value as per the requirement$")
	public void I_verify_user_is_able_to_set_the_Max_login_trial_attempt_value_as_per_the_requirement()
			throws InterruptedException {
		String num = property.getProperty("Maxlogintrialattempt");
		int PasswordLength = Integer.parseInt(num);
		System.out.println(PasswordLength);
		int number1 = Integer.parseInt(Maxlogintrialattempt);
		System.out.println("display " + number1);
		driver.findElement(By.id("securityPolicyForm:policyGrid:0:j_id_1v_display")).click();

		if (number1 < PasswordLength) {
			for (int i = number1; i < PasswordLength; i++) {
				driver.findElement(By.xpath("//span[@id='securityPolicyForm:policyGrid:0:maxTrialInterval']/a[1]"))
						.click();
			}
		} else if (number1 > PasswordLength) {
			for (int i = number1; i > PasswordLength; i--) {
				driver.findElement(By.xpath("//span[@id='securityPolicyForm:policyGrid:0:maxTrialInterval']/a[2]"))
						.click();
			}
		} else {

		}
		List<WebElement> buttons = driver
				.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Security_policy_submenu_btns_list());
		buttons.get(0).click();
		Thread.sleep(2000);
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Security_policy_confirmationPage_yes_btn())
				.click();
		wait.until(
				ExpectedConditions.visibilityOf(driver.findElement(By.xpath("//div[@class='ui-growl-message']/span"))));
		String msg = driver.findElement(By.xpath("//div[@class='ui-growl-message']/span")).getText();
		System.out.println(msg);
		Assert.assertEquals(msg, "Security Policy Updated Successfully");
	}

	@Then("^I verify user is able to set the Lockout interval value as per the requirement$")
	public void I_verify_user_is_able_to_set_the_Lockout_interval_value_as_per_the_requirement()
			throws InterruptedException {
		String num = property.getProperty("Lockoutinterval");
		int PasswordLength = Integer.parseInt(num);
		System.out.println(PasswordLength);
		int number1 = Integer.parseInt(Lockoutinterval);
		System.out.println("display " + number1);
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Security_policy_Lockout_Interval_Hrs_value())
				.click();

		if (number1 < PasswordLength) {
			for (int i = number1; i < PasswordLength; i++) {
				driver.findElement(By.xpath("//span[@id='securityPolicyForm:policyGrid:0:lockoutInterval']/a[1]"))
						.click();
			}
		} else if (number1 > PasswordLength) {
			for (int i = number1; i > PasswordLength; i--) {
				driver.findElement(By.xpath("//span[@id='securityPolicyForm:policyGrid:0:lockoutInterval']/a[2]"))
						.click();
			}
		} else {

		}
		List<WebElement> buttons = driver
				.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Security_policy_submenu_btns_list());
		buttons.get(0).click();
		Thread.sleep(2000);
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Security_policy_confirmationPage_yes_btn())
				.click();
		wait.until(ExpectedConditions.visibilityOf(driver
				.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Security_policy_successfull_alert_msg())));
		String msg = driver
				.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Security_policy_successfull_alert_msg())
				.getText();
		Assert.assertEquals(msg, "Security Policy Updated Successfully");

	}

	@Then("^I verify user is able to set the password traking value as per the requirement$")
	public void I_verify_user_is_able_to_set_the_password_traking_value_as_per_the_requirement()
			throws InterruptedException {
		String num = property.getProperty("Maxlogintrialattempt");
		int PasswordLength = Integer.parseInt(num);
		System.out.println(PasswordLength);
		int number1 = Integer.parseInt(Maxlogintrialattempt);
		System.out.println("display " + number1);
		driver.findElement(By.id("securityPolicyForm:policyGrid:0:j_id_1m_display")).click();

		if (number1 < PasswordLength) {
			for (int i = number1; i < PasswordLength; i++) {
				driver.findElement(By.xpath("//span[@id='securityPolicyForm:policyGrid:0:passwordHistory']/a[1]"))
						.click();
			}
		} else if (number1 > PasswordLength) {
			for (int i = number1; i > PasswordLength; i--) {
				driver.findElement(By.xpath("//span[@id='securityPolicyForm:policyGrid:0:passwordHistory']/a[2]"))
						.click();
			}
		} else {

		}
		List<WebElement> buttons = driver
				.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Security_policy_submenu_btns_list());
		buttons.get(0).click();
		Thread.sleep(2000);
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Security_policy_confirmationPage_yes_btn())
				.click();
		wait.until(
				ExpectedConditions.visibilityOf(driver.findElement(By.xpath("//div[@class='ui-growl-message']/span"))));
		String msg = driver.findElement(By.xpath("//div[@class='ui-growl-message']/span")).getText();
		System.out.println(msg);
		Assert.assertEquals(msg, "Security Policy Updated Successfully");

	}

	@Then("^I verify user is able to set the password length value as per the requirement$")
	public void I_verify_user_is_able_to_set_the_password_length_value_as_per_the_requirement()
			throws InterruptedException {
		String num = property.getProperty("PasswordLength");
		int PasswordLength = Integer.parseInt(num);
		System.out.println(PasswordLength);
		int number1 = Integer.parseInt(passwordLength);
		System.out.println("display " + number1);
		driver.findElement(By.id("securityPolicyForm:policyGrid:0:j_id_1b_display")).click();

		if (number1 < PasswordLength) {
			for (int i = number1; i < PasswordLength; i++) {
				driver.findElement(By.xpath("//span[@id='securityPolicyForm:policyGrid:0:passwordMinlength']/a[1]"))
						.click();
			}
		} else if (number1 > PasswordLength) {
			for (int i = number1; i > PasswordLength; i--) {
				driver.findElement(By.xpath("//span[@id='securityPolicyForm:policyGrid:0:passwordMinlength']/a[2]"))
						.click();
			}
		} else {

		}
		List<WebElement> buttons = driver
				.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Security_policy_submenu_btns_list());
		buttons.get(0).click();
		Thread.sleep(2000);
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Security_policy_confirmationPage_yes_btn())
				.click();
		wait.until(
				ExpectedConditions.visibilityOf(driver.findElement(By.xpath("//div[@class='ui-growl-message']/span"))));
		String msg = driver.findElement(By.xpath("//div[@class='ui-growl-message']/span")).getText();
		System.out.println(msg);
		Assert.assertEquals(msg, "Security Policy Updated Successfully");

	}

	@Then("^I click on the security policy submodule$")
	public void I_click_on_the_security_policy_submodule() throws InterruptedException {
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Security_policy_submenu()).click();
	}

	@Then("^I verify user is able to view the all the fieds under the Active login users page$")
	public void I_verify_user_is_able_to_view_the_all_the_fieds_under_the_Active_login_users_page()
			throws InterruptedException {

		Thread.sleep(2000);
		List<WebElement> name1 = driver
				.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Activer_login_users_webElements_list());
		for (WebElement element : name1) {
			String ele = element.getText();
			switch (ele) {
			case "Account Id":
				Assert.assertEquals(ele, "Account Id");
				break;
			case "User":
				Assert.assertEquals(ele, "User");
				break;
			case "GO":
				Assert.assertEquals(ele, "GO");
				break;
			}
		}

		List<WebElement> name2 = driver
				.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Activer_login_users_Export_As_btn_list());
		for (WebElement element : name2) {
			String ele = element.getAttribute("value");
			switch (ele) {
			case "Export As CSV":
				Assert.assertEquals(ele, "Export As CSV");
				break;
			case "Export As PDF":
				Assert.assertEquals(ele, "Export As PDF");
				break;
			case "Export As Excel":
				Assert.assertEquals(ele, "Export As Excel");
				break;
			}
		}
		List<WebElement> name3 = driver
				.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Activer_login_table_header_name_list());
		for (WebElement element : name3) {
			String ele = element.getText();
			switch (ele) {
			case "Account":
				Assert.assertEquals(ele, "Account");
				break;
			case "Account Id":
				Assert.assertEquals(ele, "Account Id");
				break;
			case "User":
				Assert.assertEquals(ele, "User");
				break;
			case "Signon Time":
				Assert.assertEquals(ele, "Signon Time");
				break;
			case "Duration":
				Assert.assertEquals(ele, "Duration");
				break;
			case "Device Type":
				Assert.assertEquals(ele, "Device Type");
				break;
			case "Session ID":
				Assert.assertEquals(ele, "Session ID");
				break;
			case "Action":
				Assert.assertEquals(ele, "Action");

			}

		}
		((JavascriptExecutor) driver).executeScript("window.scrollTo(0, document.body.scrollHeight)");
		Assert.assertEquals(
				driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Activer_Refresh_btn()).getText(),
				"Refresh");
	}

	@Then("^I verify user is able to view the login Users and their details in Login User Table$")
	public void I_verify_user_is_able_to_view_the_login_Users_and_their_details_in_Login_User_Table()
			throws InterruptedException {
		Thread.sleep(2000);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		int m = 1;
		List<WebElement> paginationbtn = driver.findElements(
				cirrusDCSPageObjects2.getsecurity_Audit_module_Activer_login_users_Pagination_btns_list());
		for (int M = 0; M < 2; M++) {
			js.executeScript("window.scrollBy(0,document.body.scrollHeight)", "");

			paginationbtn.get(M).click();
			Thread.sleep(2000);
			List<WebElement> column1 = driver
					.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Activer_login_users_User_column());
			List<WebElement> column2 = driver
					.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Activer_login_users_Account_column());
			for (int i = 0; i < column1.size(); i++) {
				String name1 = column1.get(i).getText();
				String name2 = column2.get(i).getText();
				System.out.println(m + " user name is '" + name1 + "' and its account name is '" + name2 + "'");
				m = m + 1;
			}
			column1.clear();
			column2.clear();
		}

	}

	@Then("^I verify that User is able to logoff login User$")
	public void I_verify_that_User_is_able_to_logoff_login_User() throws InterruptedException {
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Activer_login_users_logoff_btn()).click();
		Thread.sleep(2000);
		wait.until(ExpectedConditions.visibilityOf(driver
				.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Security_policy_successfull_alert_msg())));
		String msg = driver
				.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Security_policy_successfull_alert_msg())
				.getText();
		String userName = property.getProperty("Username");
		System.out.println(msg);
		Assert.assertEquals(msg, "Successfully logged off : " + userName);
		driver.navigate().refresh();
		Thread.sleep(2000);
		String Title = driver.getTitle();
		Assert.assertEquals(Title, "DCS Tenant Login");
	}

	@Then("^I verify that user is able to search the User by the User name search field$")
	public void I_verify_that_user_is_able_to_search_the_User_by_the_User_name_search_field()
			throws InterruptedException {
		String Name = "admin";
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Activer_login_users_User_search_field())
				.sendKeys(Name);
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Activer_login_users_Go_btn()).click();
		Thread.sleep(500);
		List<WebElement> colunm2 = driver
				.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Activer_login_users_User_column());
		for (int i = 0; i < colunm2.size(); i++) {
			String name = colunm2.get(i).getText();
			if (name.equals(Name)) {
				System.out.println("filter is working fine");
			} else {
				System.out.println("filter is not working fine");
			}
		}
	}

	@Then("^I verify that user is able to search the account id by the account id search field$")
	public void I_verify_that_user_is_able_to_search_the_account_id_by_the_account_id_search_field()
			throws InterruptedException {
		String Name = "Host";
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Activer_login_users_AccountId_search_field())
				.sendKeys(Name);
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Activer_login_users_Go_btn()).click();
		Thread.sleep(500);
		List<WebElement> colunm2 = driver.findElements(
				cirrusDCSPageObjects2.getsecurity_Audit_module_Activer_login_users_AccountId_List_column());
		for (int i = 0; i < colunm2.size(); i++) {
			String name = colunm2.get(i).getText();
			if (name.equals(Name)) {
				System.out.println("filter is working fine");
			} else {
				System.out.println("filter is not working fine");
			}
		}

	}

	@Then("^I verify that User is able to view recently logged in Users$")
	public void I_verify_that_User_is_able_to_view_recently_logged_in_Users() throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,1000)");
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Activer_Refresh_btn()).click();
		List<WebElement> colunm2 = driver
				.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Activer_login_users_User_column());
		String name = colunm2.get(0).getText();
		System.out.println("Recenly logged user name is '" + name + "'");

	}

	@Then("^I verify that User is able to Download Active Logi Users details as Excel File format$")
	public void I_verify_that_User_is_able_to_Download_Active_Logi_Users_details_as_Excel_File_format()
			throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,10)");
		List<WebElement> exportbtn = driver
				.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Activer_login_users_Export_As_btn_list());

		exportbtn.get(2).click();
		String filename = "OnlineUsers.xls";
		String downloadPath = "C:\\Users\\rishikeshbm\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;
		for (int i = 0; i < len; i++) {
			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}

	@Then("^I verify that user is able to export the configuration property list$")
	public void I_verify_that_user_is_able_to_export_the_configuration_property_list() throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,1000)");
		List<WebElement> exportbtn = driver.findElements(
				CirrusDCSPageObjects6.getTenantPage_Account_AccountSetup_Password_Polity_configuration_all_btns());

		exportbtn.get(1).click();
		String filename = "Proverties.csv";
		String downloadPath = "C:\\Users\\rishikeshbm\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;
		for (int i = 0; i < len; i++) {
			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}

	}

	@Then("^I verify that User is able to Download Active Logi Users details as PDF File format$")
	public void I_verify_that_User_is_able_to_Download_Active_Logi_Users_details_as_PDF_File_format()
			throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,10)");
		List<WebElement> exportbtn = driver
				.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Activer_login_users_Export_As_btn_list());

		exportbtn.get(1).click();
		String filename = "OnlineUsers.pdf";
		String downloadPath = "C:\\Users\\rishikeshbm\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;
		for (int i = 0; i < len; i++) {
			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}

	@Then("^I verify that User is able to Export Host User Audit details as Excel file$")
	public void I_verify_that_User_is_able_to_Export_Host_User_Audit_details_as_Excel_file()
			throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,10)");
		List<WebElement> exportbtn = driver.findElements(
				cirrusDCSPageObjects2.getsecurity_Audit_module_Host_user_Audit_table_export_AS_button_list());

		exportbtn.get(0).click();
		String filename = "HostUsersAudit.xls";
		String downloadPath = "C:\\Users\\rishikeshbm\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;
		for (int i = 0; i < len; i++) {
			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}

	}

	@Then("^I verify that User is able to Export Host User Audit details as PDF file$")
	public void I_verify_that_User_is_able_to_Export_Host_User_Audit_details_as_PDF_file() throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,10)");
		List<WebElement> exportbtn = driver.findElements(
				cirrusDCSPageObjects2.getsecurity_Audit_module_Host_user_Audit_table_export_AS_button_list());

		exportbtn.get(0).click();
		String filename = "HostUsersAudit.pdf";
		String downloadPath = "C:\\Users\\rishikeshbm\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;
		for (int i = 0; i < len; i++) {
			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}

	}

	@Then("^I verify that User is able to Export Login Audit details as EXCEL file$")
	public void I_verify_that_User_is_able_to_Export_Login_Audit_details_as_EXCEL_file() throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,10)");
		List<WebElement> exportbtn = driver.findElements(
				cirrusDCSPageObjects2.getsecurity_Audit_module_Host_Login_Audit_table_export_AS_button_list());

		exportbtn.get(2).click();
		String filename = "loginAudit.xls";
		String downloadPath = "C:\\Users\\rishikeshbm\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;
		for (int i = 0; i < len; i++) {
			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}

	}

	@Then("^I verify that User is able to Export Locked HostAdmin Accounts details as EXCEL file$")
	public void I_verify_that_User_is_able_to_Export_Locked_HostAdmin_Accounts_details_as_EXCEL_file()
			throws InterruptedException {

		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Locked_accounts_submodule_Host_admin_button())
				.click();
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,10)");
		List<WebElement> exportbtn = driver.findElements(
				cirrusDCSPageObjects2.getsecurity_Audit_module_Locked_accounts_submodule_Export_As_button_list());

		exportbtn.get(2).click();
		String filename = "LockedAccount.xls";
		String downloadPath = "C:\\Users\\rishikeshbm\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;
		for (int i = 0; i < len; i++) {
			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}

	@Then("^I verify that User is able to Export Locked HostAdmin Accounts details as PDF file$")
	public void I_verify_that_User_is_able_to_Export_Locked_HostAdmin_Accounts_details_as_PDF_file()
			throws InterruptedException {

		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Locked_accounts_submodule_Host_admin_button())
				.click();
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,10)");
		List<WebElement> exportbtn = driver.findElements(
				cirrusDCSPageObjects2.getsecurity_Audit_module_Locked_accounts_submodule_Export_As_button_list());

		exportbtn.get(1).click();
		String filename = "LockedAccount.pdf";
		String downloadPath = "C:\\Users\\rishikeshbm\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;
		for (int i = 0; i < len; i++) {
			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}

	@Then("^I verify that User is able to Export Active Login Users details as EXCEL file$")
	public void I_verify_that_User_is_able_to_Active_Login_Users_Accounts_details_as_EXCEL_file()
			throws InterruptedException {
		List<WebElement> Exportbtn = driver
				.findElements(cirrusDCSPageObjects3.getSecurity_Audit_Active_Login_Users_Export_As_button_list());
		Exportbtn.get(2).click();
		String filename = "OnlineUsers.xls";
		String downloadPath = "C:\\Users\\rishikeshbm\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;
		for (int i = 0; i < len; i++) {
			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}

	@Then("^I verify that User is able to Export Active Login Users details as PDF file$")
	public void I_verify_that_User_is_able_to_Active_Login_Users_Accounts_details_as_PDF_file()
			throws InterruptedException {
		List<WebElement> Exportbtn = driver
				.findElements(cirrusDCSPageObjects3.getSecurity_Audit_Active_Login_Users_Export_As_button_list());
		Exportbtn.get(1).click();
		String filename = "OnlineUsers.pdf";
		String downloadPath = "C:\\Users\\rishikeshbm\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;
		for (int i = 0; i < len; i++) {
			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}

	@Then("^I verify that User is able to  able to Export Logins and login attempts details as EXCEL file in the History Login audit page")
	public void I_verify_that_User_is_able_to_able_to_Export_Logins_and_login_attempts_details_as_EXCEL_file_in_the_History_Login_audit_page()
			throws InterruptedException {
		String name = "akshaybv@zktk";
		driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_Text_From_Date_input())
				.sendKeys("10/17/2022 11:00");
		driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_Text_To_Date_input())
				.sendKeys("10/18/2022 00:00");
		driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_User_text_input_field())
				.sendKeys(name);
		driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_Text_Gobutton()).click();
		List<WebElement> Exportbtn = driver
				.findElements(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_Export_As_button_list());
		Exportbtn.get(2).click();
		String filename = "loginAudit.xls";
		String downloadPath = "C:\\Users\\rishikeshbm\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;
		for (int i = 0; i < len; i++) {
			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}

	@Then("^I verify that User is able to  able to Export Logins and login attempts details as PDF file in the History Login audit page")
	public void I_verify_that_User_is_able_to_able_to_Export_Logins_and_login_attempts_details_as_PDF_file_in_the_History_Login_audit_page()
			throws InterruptedException {
		String name = "akshaybv@zktk";
		driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_Text_From_Date_input())
				.sendKeys("10/17/2022 11:00");
		driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_Text_To_Date_input())
				.sendKeys("10/18/2022 00:00");
		driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_User_text_input_field())
				.sendKeys(name);
		driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_Text_Gobutton()).click();
		List<WebElement> Exportbtn = driver
				.findElements(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_Export_As_button_list());
		Exportbtn.get(1).click();
		String filename = "loginAudit.pdf";
		String downloadPath = "C:\\Users\\rishikeshbm\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;
		for (int i = 0; i < len; i++) {
			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}

	@Then("^I verify that User is able to able to Export Expired Accounts details as EXCEL file in the History Login audit page")
	public void I_verify_that_User_is_able_to_able_to_Export_Expired_Accounts_details_as_EXCEL_file_in_the_History_Login_audit_page()
			throws InterruptedException {
		List<WebElement> Exportbtn = driver
				.findElements(cirrusDCSPageObjects3.getSecurity_Audit_Expired_Accounts_Export_As_button_list());
		Exportbtn.get(2).click();
		String filename = "expiredAccount.xls";
		String downloadPath = "C:\\Users\\rishikeshbm\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;
		for (int i = 0; i < len; i++) {
			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}

	@Then("^I verify that User is able to able to Export Expired Accounts details as PDF file in the History Login audit page")
	public void I_verify_that_User_is_able_to_able_to_Export_Expired_Accounts_details_as_PDF_file_in_the_History_Login_audit_page()
			throws InterruptedException {
		List<WebElement> Exportbtn = driver
				.findElements(cirrusDCSPageObjects3.getSecurity_Audit_Expired_Accounts_Export_As_button_list());
		Exportbtn.get(1).click();
		String filename = "expiredAccount.pdf";
		String downloadPath = "C:\\Users\\rishikeshbm\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;
		for (int i = 0; i < len; i++) {
			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}

	@Then("^I verify that User is able to Export Locked Accounts details as EXCEL file in the Locked accounts page")
	public void I_verify_that_User_is_able_to_Export_Locked_Accounts_details_as_EXCEL_file_in_the_Locked_accounts_page()
			throws InterruptedException {
		List<WebElement> Exportbtn = driver
				.findElements(cirrusDCSPageObjects3.getSecurity_Audit_Locked_Accounts_Export_As_button_list());
		Exportbtn.get(2).click();
		String filename = "LockedAccount.xls";
		String downloadPath = "C:\\Users\\rishikeshbm\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;
		for (int i = 0; i < len; i++) {
			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}

	@Then("^I verify that User is able to Export Locked Accounts details as PDF file in the Locked accounts page")
	public void I_verify_that_User_is_able_to_Export_Locked_Accounts_details_as_PDF_file_in_the_Locked_accounts_page()
			throws InterruptedException {
		List<WebElement> Exportbtn = driver
				.findElements(cirrusDCSPageObjects3.getSecurity_Audit_Locked_Accounts_Export_As_button_list());
		Exportbtn.get(1).click();
		String filename = "LockedAccount.pdf";
		String downloadPath = "C:\\Users\\rishikeshbm\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;
		for (int i = 0; i < len; i++) {
			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}

	@Then("^I verify that User is able to Export Locked Accounts details as PDF file in the Tenant User Audit page")
	public void I_verify_that_User_is_able_to_Export_Locked_Accounts_details_as_PDF_file_in_the_Tenant_User_Audit_page()
			throws InterruptedException {
		driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_Text_Gobutton()).click();
		Thread.sleep(1000);
		List<WebElement> Exportbtn = driver
				.findElements(cirrusDCSPageObjects3.getSecurity_Audit_Tenant_User_Audit_Export_As_button_list());
		Exportbtn.get(1).click();
		String filename = "TenantUsersAudit.pdf";
		String downloadPath = "C:\\Users\\rishikeshbm\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;
		for (int i = 0; i < len; i++) {
			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}

	@Then("^I verify that User is able to Export Locked Accounts details as EXCEL file in the Tenant User Audit page")
	public void I_verify_that_User_is_able_to_Export_Locked_Accounts_details_as_EXCEL_file_in_the_Tenant_User_Audit_page()
			throws InterruptedException {
		driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_Text_Gobutton()).click();
		Thread.sleep(1000);
		List<WebElement> Exportbtn = driver
				.findElements(cirrusDCSPageObjects3.getSecurity_Audit_Tenant_User_Audit_Export_As_button_list());
		Exportbtn.get(2).click();
		String filename = "TenantUsersAudit.xls";
		String downloadPath = "C:\\Users\\rishikeshbm\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;
		for (int i = 0; i < len; i++) {
			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}

	@Then("^I verify that user is able to edit the property value in the edit property pop up page")
	public void I_verify_that_user_is_able_to_edit_the_property_value_in_the_edit_property_pop_up_page()
			throws InterruptedException {
		Thread.sleep(1000);
		List<WebElement> fieldvalue = driver.findElements(
				cirrusDCSPageObjects4.getWorkdayIntegration_Integration_properties_Edit_Property_fields_input());
		fieldvalue.get(0).clear();
		fieldvalue.get(0).sendKeys("ABC");
		fieldvalue.get(1).sendKeys("test");
		driver.findElement(cirrusDCSPageObjects4.getWorkdayIntegration_Integration_properties_Edit_Property_Save_btn())
				.click();

		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getTenant_Module_Save_confirmation()).isDisplayed());
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Save_confirmation_Yes()).click();
		String msg = driver.findElement(By.xpath("//div[@class='ui-growl-message']")).getText();
		Assert.assertEquals(msg, "Property saved successfully");

	}

	@Then("^I verify that user is able to view the all the fields which are available on the edit property page in the Integration Properties page")
	public void I_verify_that_user_is_able_to_view_the_all_the_fields_which_are_available_on_the_edit_property_page_in_the_Integration_Properties_page()
			throws InterruptedException {
		Thread.sleep(1000);
		Assert.assertTrue(driver
				.findElement(
						cirrusDCSPageObjects4.getWorkdayIntegration_Integration_properties_Edit_Property_screen_txt())
				.isDisplayed());
		List<WebElement> fields = driver.findElements(
				cirrusDCSPageObjects4.getWorkdayIntegration_Integration_properties_Edit_Property_fields_list());
		for (WebElement element : fields) {
			String ele = element.getText();
			switch (ele) {
			case "Property Key :":
				Assert.assertEquals(ele, "Property Key :");
				break;
			case "Property Value :":
				Assert.assertEquals(ele, "Property Value :");
				break;
			case "Reason : *":
				Assert.assertEquals(ele, "Reason : *");
				break;
			}
		}
		Assert.assertTrue(driver
				.findElement(
						cirrusDCSPageObjects4.getWorkdayIntegration_Integration_properties_Edit_Property_Save_btn())
				.isDisplayed());
	}

	@Then("^I click on the edit button on the Integration Properties page")
	public void I_click_on_the_edit_button_on_the_Integration_Properties_page() throws InterruptedException {
		driver.findElement(cirrusDCSPageObjects4.getWorkdayIntegration_Integration_properties_Edit_btn()).click();
	}

	@Then("^I verify that user is able to access the Export as CSV button and verify that the records list has been exported in the CSV file format")
	public void I_verify_that_user_is_able_to_access_the_Export_as_CSV_button_and_verify_that_the_records_list_has_been_exported_in_the_CSV_file_format()
			throws InterruptedException {
		List<WebElement> Times = driver
				.findElements(CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_criteria_Dates());
		Times.get(0).sendKeys(property.getProperty("VisitorModuleFromTime"));
		Times.get(1).sendKeys(property.getProperty("VisitorModuleToTime"));
		List<WebElement> btns = driver
				.findElements(CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_criteria_all_buttons());
		btns.get(0).click();
		wait.until(ExpectedConditions.invisibilityOf(driver.findElement(CirrusDCSPageObjects5.getGlobalLoadingImg())));
		List<WebElement> Exportbtn = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_Report_Export_As_btns());
		Exportbtn.get(2).click();
		String filename = "visitorlog.csv";
		String downloadPath = "C:\\Users\\rishikeshbm\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;
		for (int i = 0; i < len; i++) {
			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}

	@Then("^I verify that user is able to access the Export as PDF button and verify that the records list has been exported in the PDF file format")
	public void I_verify_that_user_is_able_to_access_the_Export_as_PDF_button_and_verify_that_the_records_list_has_been_exported_in_the_PDF_file_format()
			throws InterruptedException {
		List<WebElement> Times = driver
				.findElements(CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_criteria_Dates());
		Times.get(0).sendKeys(property.getProperty("VisitorModuleFromTime"));
		Times.get(1).sendKeys(property.getProperty("VisitorModuleToTime"));
		List<WebElement> btns = driver
				.findElements(CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_criteria_all_buttons());
		btns.get(0).click();
		wait.until(ExpectedConditions.invisibilityOf(driver.findElement(CirrusDCSPageObjects5.getGlobalLoadingImg())));
		List<WebElement> Exportbtn = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_Report_Export_As_btns());
		Exportbtn.get(1).click();
		String filename = "visitorlog.pdf";
		String downloadPath = "C:\\Users\\rishikeshbm\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;
		for (int i = 0; i < len; i++) {
			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}

	@Then("^I verify that user is able to access the Export as excel button and verify that the records list has been exported in the excel file format")
	public void I_verify_that_user_is_able_to_access_the_Export_as_excel_button_and_verify_that_the_records_list_has_been_exported_in_the_excel_file_format()
			throws InterruptedException {
		List<WebElement> Times = driver
				.findElements(CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_criteria_Dates());
		Times.get(0).sendKeys(property.getProperty("VisitorModuleFromTime"));
		Times.get(1).sendKeys(property.getProperty("VisitorModuleToTime"));
		List<WebElement> btns = driver
				.findElements(CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_criteria_all_buttons());
		btns.get(0).click();
		wait.until(ExpectedConditions.invisibilityOf(driver.findElement(CirrusDCSPageObjects5.getGlobalLoadingImg())));
		List<WebElement> Exportbtn = driver.findElements(
				CirrusDCSPageObjects5.getAttendance_module_Visitor_log_Visitorlog_Report_Export_As_btns());
		Exportbtn.get(0).click();
		String filename = "visitorlog.xls";
		String downloadPath = "C:\\Users\\rishikeshbm\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;
		for (int i = 0; i < len; i++) {
			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}

	@Then("^I Verify that user is able to access the Export button and verify that the file is downloaded to the Device")
	public void I_Verify_that_user_is_able_to_access_the_Export_button_and_verify_that_the_file_is_downloaded_to_the_Device()
			throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		WebElement Exportbtn = driver.findElement(cirrusDCSPageObjects4.getWorkdayIntegration_Export_button_icon());
		js.executeScript("arguments[0].click();", Exportbtn);

		String filename = "WorkdayProperties.csv";
		String downloadPath = "C:\\Users\\rishikeshbm\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;
		for (int i = 0; i < len; i++) {
			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}

	}

	@Then("^I verify that User is able to Export Locked Accounts details as CSV file in the Tenant User Audit page")
	public void I_verify_that_User_is_able_to_Export_Locked_Accounts_details_as_CSV_file_in_the_Tenant_User_Audit_page()
			throws InterruptedException {
		driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_Text_Gobutton()).click();
		Thread.sleep(1000);
		List<WebElement> Exportbtn = driver
				.findElements(cirrusDCSPageObjects3.getSecurity_Audit_Tenant_User_Audit_Export_As_button_list());
		Exportbtn.get(0).click();
		String filename = "TenantUsersAudit.csv";
		String downloadPath = "C:\\Users\\rishikeshbm\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;
		for (int i = 0; i < len; i++) {
			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}

	@Then("^I verify that User is able to Export Locked Accounts details as CSV file in the Locked accounts page")
	public void I_verify_that_User_is_able_to_Export_Locked_Accounts_details_as_CSV_file_in_the_Locked_accounts_page()
			throws InterruptedException {
		List<WebElement> Exportbtn = driver
				.findElements(cirrusDCSPageObjects3.getSecurity_Audit_Locked_Accounts_Export_As_button_list());
		Exportbtn.get(0).click();
		String filename = "LockedAccount.csv";
		String downloadPath = "C:\\Users\\rishikeshbm\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;
		for (int i = 0; i < len; i++) {
			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}

	@Then("^I verify that User is able to able to Export Expired Accounts details as CSV file in the History Login audit page")
	public void I_verify_that_User_is_able_to_able_to_Export_Expired_Accounts_details_as_CSV_file_in_the_History_Login_audit_page()
			throws InterruptedException {
		List<WebElement> Exportbtn = driver
				.findElements(cirrusDCSPageObjects3.getSecurity_Audit_Expired_Accounts_Export_As_button_list());
		Exportbtn.get(0).click();
		String filename = "expiredAccount.csv";
		String downloadPath = "C:\\Users\\rishikeshbm\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;
		for (int i = 0; i < len; i++) {
			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}

	@Then("^I verify that User is able to  able to Export Logins and login attempts details as CSV file in the History Login audit page")
	public void I_verify_that_User_is_able_to_able_to_Export_Logins_and_login_attempts_details_as_CSV_file_in_the_History_Login_audit_page()
			throws InterruptedException {
		String name = "akshaybv@zktk";
		driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_Text_From_Date_input())
				.sendKeys("10/17/2022 11:00");
		driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_Text_To_Date_input())
				.sendKeys("10/18/2022 00:00");
		driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_User_text_input_field())
				.sendKeys(name);
		driver.findElement(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_Text_Gobutton()).click();
		List<WebElement> Exportbtn = driver
				.findElements(cirrusDCSPageObjects3.getSecurity_Audit_History_Login_Audit_Export_As_button_list());
		Exportbtn.get(0).click();
		String filename = "loginAudit.csv";
		String downloadPath = "C:\\Users\\rishikeshbm\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;
		for (int i = 0; i < len; i++) {
			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}

	@Then("^I verify that User is able to Export Active Login Users details as CSV file$")
	public void I_verify_that_User_is_able_to_Active_Login_Users_Accounts_details_as_CSV_file()
			throws InterruptedException {
		List<WebElement> Exportbtn = driver
				.findElements(cirrusDCSPageObjects3.getSecurity_Audit_Active_Login_Users_Export_As_button_list());
		Exportbtn.get(0).click();
		String filename = "OnlineUsers.csv";
		String downloadPath = "C:\\Users\\rishikeshbm\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;
		for (int i = 0; i < len; i++) {
			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}

	@Then("^I verify that User is able to Export Locked HostAdmin Accounts details as CSV file$")
	public void I_verify_that_User_is_able_to_Export_Locked_HostAdmin_Accounts_details_as_CSV_file()
			throws InterruptedException {

		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Locked_accounts_submodule_Host_admin_button())
				.click();
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,10)");
		List<WebElement> exportbtn = driver.findElements(
				cirrusDCSPageObjects2.getsecurity_Audit_module_Locked_accounts_submodule_Export_As_button_list());

		exportbtn.get(0).click();
		String filename = "LockedAccount.csv";
		String downloadPath = "C:\\Users\\rishikeshbm\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;
		for (int i = 0; i < len; i++) {
			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}

	@Then("^I verify that User is able to Export Locked Tenant Accounts details as EXCEL file$")
	public void I_verify_that_User_is_able_to_Export_Locked_Tenant_Accounts_details_as_EXCEL_file()
			throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,10)");
		List<WebElement> exportbtn = driver.findElements(
				cirrusDCSPageObjects2.getsecurity_Audit_module_Locked_accounts_submodule_Export_As_button_list());

		exportbtn.get(2).click();
		String filename = "LockedAccount.xls";
		String downloadPath = "C:\\Users\\rishikeshbm\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;
		for (int i = 0; i < len; i++) {
			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}

	@Then("^I verify that User is able to Export Locked Tenant Accounts details as PDF file$")
	public void I_verify_that_User_is_able_to_Export_Locked_Tenant_Accounts_details_as_PDF_file()
			throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,10)");
		List<WebElement> exportbtn = driver.findElements(
				cirrusDCSPageObjects2.getsecurity_Audit_module_Locked_accounts_submodule_Export_As_button_list());

		exportbtn.get(1).click();
		String filename = "LockedAccount.pdf";
		String downloadPath = "C:\\Users\\rishikeshbm\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;
		for (int i = 0; i < len; i++) {
			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}

	@Then("^I verify that User is able to Export Locked Tenant Accounts details as CSV file$")
	public void I_verify_that_User_is_able_to_Export_Locked_Tenant_Accounts_details_as_CSV_file()
			throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,10)");
		List<WebElement> exportbtn = driver.findElements(
				cirrusDCSPageObjects2.getsecurity_Audit_module_Locked_accounts_submodule_Export_As_button_list());

		exportbtn.get(0).click();
		String filename = "LockedAccount.csv";
		String downloadPath = "C:\\Users\\rishikeshbm\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;
		for (int i = 0; i < len; i++) {
			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}

	@Then("^I verify that User is able to Export Login Audit details as PDF file$")
	public void I_verify_that_User_is_able_to_Export_Login_Audit_details_as_PDF_file() throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,10)");
		List<WebElement> exportbtn = driver.findElements(
				cirrusDCSPageObjects2.getsecurity_Audit_module_Host_Login_Audit_table_export_AS_button_list());

		exportbtn.get(1).click();
		String filename = "loginAudit.pdf";
		String downloadPath = "C:\\Users\\rishikeshbm\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;
		for (int i = 0; i < len; i++) {
			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}

	}

	@Then("^I verify that User is able to Export Expired Accounts details as EXCEL file$")
	public void I_verify_that_User_is_able_to_Export_Expired_Accounts_details_as_EXCEL_file()
			throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,10)");
		List<WebElement> exportbtn = driver.findElements(
				cirrusDCSPageObjects2.getsecurity_Audit_module_Expired_Accounts_table_export_AS_button_list());

		exportbtn.get(2).click();
		String filename = "ExpiredAccount.xls";
		String downloadPath = "C:\\Users\\rishikeshbm\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;
		for (int i = 0; i < len; i++) {
			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}

	@Then("^I verify that User is able to Export Expired Accounts details as PDF file$")
	public void I_verify_that_User_is_able_to_Export_Expired_Accounts_details_as_PDF_file()
			throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,10)");
		List<WebElement> exportbtn = driver.findElements(
				cirrusDCSPageObjects2.getsecurity_Audit_module_Expired_Accounts_table_export_AS_button_list());

		exportbtn.get(1).click();
		String filename = "ExpiredAccount.pdf";
		String downloadPath = "C:\\Users\\rishikeshbm\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;
		for (int i = 0; i < len; i++) {
			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}

	@Then("^I verify that User is able to Export Expired Accounts details as CSV file$")
	public void I_verify_that_User_is_able_to_Export_Expired_Accounts_details_as_CSV_file()
			throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,10)");
		List<WebElement> exportbtn = driver.findElements(
				cirrusDCSPageObjects2.getsecurity_Audit_module_Expired_Accounts_table_export_AS_button_list());

		exportbtn.get(0).click();
		String filename = "ExpiredAccount.csv";
		String downloadPath = "C:\\Users\\rishikeshbm\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;
		for (int i = 0; i < len; i++) {
			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}

	@Then("^I verify that User is able to Export Login Audit details as CSV file$")
	public void I_verify_that_User_is_able_to_Export_Login_Audit_details_as_CSV_file() throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,10)");
		List<WebElement> exportbtn = driver.findElements(
				cirrusDCSPageObjects2.getsecurity_Audit_module_Host_Login_Audit_table_export_AS_button_list());

		exportbtn.get(0).click();
		String filename = "loginAudit.csv";
		String downloadPath = "C:\\Users\\rishikeshbm\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;
		for (int i = 0; i < len; i++) {
			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}

	@Then("^I verify that User is able to Export Host User Audit details as CSV file$")
	public void I_verify_that_User_is_able_to_Export_Host_User_Audit_details_as_CSV_file() throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,10)");
		List<WebElement> exportbtn = driver.findElements(
				cirrusDCSPageObjects2.getsecurity_Audit_module_Host_user_Audit_table_export_AS_button_list());

		exportbtn.get(0).click();
		String filename = "HostUsersAudit.csv";
		String downloadPath = "C:\\Users\\rishikeshbm\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;
		for (int i = 0; i < len; i++) {
			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}

	}

	@Then("^I verify that User is able to Download Active Logi Users details as CSV File format$")
	public void I_verify_that_User_is_able_to_Download_Active_Logi_Users_details_as_CSV_File_format()
			throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,10)");
		List<WebElement> exportbtn = driver
				.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Activer_login_users_Export_As_btn_list());

		exportbtn.get(0).click();
		String filename = "OnlineUsers.csv";
		String downloadPath = "C:\\Users\\rishikeshbm\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;
		for (int i = 0; i < len; i++) {
			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}

	@Then("^I click on the Expired Accounts submodule$")
	public void I_click_on_the_Expired_Accounts_submodule() throws InterruptedException {
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Expired_Accounts_link()).click();
	}

	@Then("^I click on the Locked Accounts submodule$")
	public void I_click_on_the_Locked_Accounts_submodule() throws InterruptedException {
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Locked_accounts_submodule_link()).click();
	}

	@Then("^I click on the Events submodule$")
	public void I_click_on_the_Events_submodule() throws InterruptedException {
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Events_submodule_link()).click();
	}

	@Then("^I click on the Login Audit submodule$")
	public void I_click_on_the_Login_Audit_submodule() throws InterruptedException {
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_Login_Audit_link()).click();
	}

	@Then("^I click on the Host user Audit submodule$")
	public void I_click_on_the_Host_user_Audit_submodule() throws InterruptedException {
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_user_Audit_link()).click();
	}

	@Then("^I verify that User is able to view details of Account expired")
	public void I_verify_that_User_is_able_to_view_details_of_Account_expired() throws InterruptedException {
		List<WebElement> UserNameList = driver
				.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Expired_Accounts_UserColumn_list());
		List<WebElement> ExpiredAccountList = driver.findElements(
				cirrusDCSPageObjects2.getsecurity_Audit_module_Expired_Accounts_AccountExpiredColumn_list());
		for (int i = 0; i < UserNameList.size(); i++) {
			String Name1 = UserNameList.get(i).getText();
			String Name2 = ExpiredAccountList.get(i).getText();
			System.out.println("name of the accountUser '" + Name1 + "' status of the expired account '" + Name2 + "'");

		}

	}

	@Then("^I verify that User is able to delete mulitple events message at once")
	public void I_verify_that_User_is_able_to_delete_mulitple_events_message_at_once() throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		String value1 = "EmailVerificationEvent";
		String value2 = "ResetPwdEvent";
		List<WebElement> Eventype = driver
				.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Events_Submodule_EventType_column_list());
		List<WebElement> checkbox = driver.findElements(By.xpath(
				"//form[@id='eventMessagesForm']/div/div/div[2]/div/div[1]/div[1]/table/tbody/tr/td[1]/div/div[2]/span"));
		WebElement yesBtn = driver.findElement(By.xpath("//div[@id='j_id_m']/div[3]/button[1]"));
		for (int i = 0; i < Eventype.size(); i++) {
			String EventName = Eventype.get(i).getText();
			if (EventName.contains(value1) || EventName.contains(value2)) {
				checkbox.get(i).click();
				Thread.sleep(2000);

			}
		}
		j.executeScript("scroll(0,1000)");
		List<WebElement> buttons = driver.findElements(
				cirrusDCSPageObjects2.getsecurity_Audit_module_Events_Submodule_avialable_footer_buttons_list());
		buttons.get(1).click();
		yesBtn.click();
		wait.until(ExpectedConditions.visibilityOf(driver
				.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Events_Submodule_Action_popup_msg())));
		String msg = driver
				.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Events_Submodule_Action_popup_msg())
				.getText();
		System.out.println(msg);
	}

	@Then("^I verify that User is able to delete individual event message")
	public void I_verify_that_User_is_able_to_delete_individual_event_message() throws InterruptedException {

		String value = "FailToLoginEvent";
		List<WebElement> Eventype = driver
				.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Events_Submodule_EventType_column_list());
		List<WebElement> Action = driver
				.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Events_Submodule_Action_column_list());
		WebElement yesBtn = driver.findElement(By.xpath("//div[@id='j_id_m']/div[3]/button[1]"));
		for (int i = 0; i < Eventype.size(); i++) {
			String EventName = Eventype.get(i).getText();
			if (EventName.contains(value)) {
				Action.get(i).click();
				Thread.sleep(2000);

			}
			break;
		}
		yesBtn.click();
		wait.until(ExpectedConditions.visibilityOf(driver
				.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Events_Submodule_Action_popup_msg())));
		String msg = driver
				.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Events_Submodule_Action_popup_msg())
				.getText();
		System.out.println(msg);
		String value1 = "Event message: '" + value + "' deleted successfully";
		Assert.assertEquals(msg, value1);
	}

	@Then("^I verify that User is able to observe Event ocuured in Events Table")
	public void I_verify_that_User_is_able_to_observe_Event_ocuured_in_Events_Table() throws InterruptedException {
		List<WebElement> Eventype = driver
				.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Events_Submodule_EventType_column_list());
		List<WebElement> EventypeDate = driver
				.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Events_Submodule_Date_column_list());
		for (int i = 0; i < Eventype.size(); i++) {
			String EVENTName = Eventype.get(i).getText();
			String EventDate = EventypeDate.get(i).getText();
			System.out.println("Name of the event '" + EVENTName + "' and occured on the '" + EventDate + "' ");
		}
	}

	@Then("^I verify that User is able to view the Locked Host admin account")
	public void I_verify_that_User_is_able_to_view_the_Locked_Host_admin_account() throws InterruptedException {
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Locked_accounts_submodule_Host_admin_button())
				.click();

		List<WebElement> HostUserLockedList = driver.findElements(
				cirrusDCSPageObjects2.getsecurity_Audit_module_Locked_accounts_submodule_HostAdmin_User_list());
		List<WebElement> Most_Recent_Login_failureList = driver.findElements(cirrusDCSPageObjects2
				.getsecurity_Audit_module_Locked_accounts_submodule_Locked_HostAdmin_Most_Recent_Login_failure_column_list());
		if (HostUserLockedList.size() > 0) {
			for (int i = 0; i < HostUserLockedList.size(); i++) {
				String HostUserName = HostUserLockedList.get(i).getText();
				String Most_Recent_Login_failure = Most_Recent_Login_failureList.get(i).getText();
				System.out.println("Hostadmin user account name is '" + HostUserName
						+ "' and most recent login failure time is '" + Most_Recent_Login_failure + "'");
			}
		} else {
			System.out.println("currently not any single Hostadmin account is locked");
		}
	}

	@Then("^I verify that User is able to unlock locked Host admin account")
	public void I_verify_that_User_is_able_to_unlock_locked_Host_admin_account() throws InterruptedException {
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Locked_accounts_submodule_Host_admin_button())
				.click();
		List<WebElement> unlockbtnlist = driver.findElements(cirrusDCSPageObjects2
				.getsecurity_Audit_module_Locked_accounts_submodule_HostAdmin_Unlock_column_button_list());
		List<WebElement> HostUserLockedList = driver.findElements(
				cirrusDCSPageObjects2.getsecurity_Audit_module_Locked_accounts_submodule_HostAdmin_User_list());
		WebElement yesBtn = driver.findElement(By.xpath("//div[@id='j_id_m']/div[3]/button[1]"));
		System.out.println(HostUserLockedList.size());
		if (HostUserLockedList.size() > 0) {
			for (int i = 0; i < HostUserLockedList.size(); i++) {
				String TenantUserName = HostUserLockedList.get(i).getText();
				unlockbtnlist.get(i).click();
				System.out.println("unlocked tenant account user Name is '" + TenantUserName);
				yesBtn.click();
			}
			String msg = driver.findElement(By.xpath(" //div[@class='ui-growl-message']/span")).getText();
			Assert.assertEquals(msg, "User Unlocked Successfully");
		} else if (HostUserLockedList.size() == 0) {
			System.out.println("currently not any single host account is locked");
		}
	}

	@Then("^I verify that User is able to unlock locked Tenant account")
	public void I_verify_that_User_is_able_to_unlock_locked_Tenant_account() throws InterruptedException {
		List<WebElement> unlockbtnlist = driver.findElements(cirrusDCSPageObjects2
				.getsecurity_Audit_module_Locked_accounts_submodule_LockedTenant_Unlock_column_button_list());
		List<WebElement> TenantUserLockedList = driver.findElements(
				cirrusDCSPageObjects2.getsecurity_Audit_module_Locked_accounts_submodule_LockedTenant_User_list());
		WebElement yesBtn = driver.findElement(By.xpath("//div[@id='j_id_m']/div[3]/button[1]"));

		if (TenantUserLockedList.size() > 0) {
			for (int i = 0; i < TenantUserLockedList.size(); i++) {
				String TenantUserName = TenantUserLockedList.get(i).getText();
				unlockbtnlist.get(i).click();
				System.out.println("unlocked tenant account user Name is '" + TenantUserName);
				yesBtn.click();
			}
			String msg = driver.findElement(By.xpath(" //div[@class='ui-growl-message']/span")).getText();
			Assert.assertEquals(msg, "User Unlocked Successfully");
		} else if (TenantUserLockedList.size() == 0) {
			System.out.println("currently not any single tennat account is locked");
		}

	}

	@Then("^I verify that User is able to view the Locked Tenant account")
	public void I_verify_that_User_is_able_to_view_the_Locked_Tenant_account() throws InterruptedException {
		List<WebElement> TenantUserLockedList = driver.findElements(
				cirrusDCSPageObjects2.getsecurity_Audit_module_Locked_accounts_submodule_LockedTenant_User_list());
		List<WebElement> Most_Recent_Login_failureList = driver.findElements(cirrusDCSPageObjects2
				.getsecurity_Audit_module_Locked_accounts_submodule_LockedTenant_Most_Recent_Login_failure_column_list());
		if (TenantUserLockedList.size() > 0) {
			for (int i = 0; i < TenantUserLockedList.size(); i++) {
				String TenantUserName = TenantUserLockedList.get(i).getText();
				String Most_Recent_Login_failure = Most_Recent_Login_failureList.get(i).getText();
				System.out.println("Tenant user account name is '" + TenantUserName
						+ "' and most recent login failure time is '" + Most_Recent_Login_failure + "'");
			}
		} else {
			System.out.println("currently not any single tennat account is locked");
		}
	}

	@Then("^I verify that User is able to view the all the fields which are available on the Locked accounts  page")
	public void I_verify_that_User_is_able_to_view_the_all_the_fields_which_are_available_on_the_Locked_accounts_page()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		Assert.assertTrue(driver.findElement(
				cirrusDCSPageObjects2.getsecurity_Audit_module_Locked_accounts_submodule_Tenant_account_button())
				.isDisplayed());
		Assert.assertTrue(driver
				.findElement(
						cirrusDCSPageObjects2.getsecurity_Audit_module_Locked_accounts_submodule_Host_admin_button())
				.isDisplayed());
		List<WebElement> tenantColumnlist = driver.findElements(cirrusDCSPageObjects2
				.getsecurity_Audit_module_Locked_accounts_submodule_Tenant_account_button_table_column_list());
		for (WebElement element : tenantColumnlist) {
			String ele = element.getText();
			switch (ele) {
			case "Account":
				Assert.assertEquals(ele, "Account");
				break;
			case "User":
				Assert.assertEquals(ele, "User");
				break;
			case "Account Locked":
				Assert.assertEquals(ele, "Account Locked");
				break;
			case "Most Recent Login failure":
				Assert.assertEquals(ele, "Most Recent Login failure");
				break;
			case "Consecutive Failures":
				Assert.assertEquals(ele, "Consecutive Failures");
				break;
			case "Lockout Period End Time":
				Assert.assertEquals(ele, "Lockout Period End Time");
				break;
			case "Action":
				Assert.assertEquals(ele, "Action");
				break;
			}
		}
		List<WebElement> name2 = driver.findElements(
				cirrusDCSPageObjects2.getsecurity_Audit_module_Locked_accounts_submodule_Export_As_button_list());
		for (WebElement element : name2) {
			String ele = element.getAttribute("value");
			switch (ele) {
			case "Export As CSV":
				Assert.assertEquals(ele, "Export As CSV");
				break;
			case "Export As PDF":
				Assert.assertEquals(ele, "Export As PDF");
				break;
			case "Export As Excel":
				Assert.assertEquals(ele, "Export As Excel");
				break;
			}
		}
		j.executeScript("scroll(0,1000)");
		Assert.assertTrue(
				driver.findElement(By.xpath("//form[@id='j_id_t:lockedAccountForm']/div[2]/button")).isDisplayed());
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Locked_accounts_submodule_Host_admin_button())
				.click();
		List<WebElement> HostAdminColumnlist = driver.findElements(cirrusDCSPageObjects2
				.getsecurity_Audit_module_Locked_accounts_submodule_Host_admin_button_table_column_list());
		for (WebElement element : HostAdminColumnlist) {
			String ele = element.getText();
			switch (ele) {
			case "User":
				Assert.assertEquals(ele, "User");
				break;
			case "Account Locked":
				Assert.assertEquals(ele, "Account Locked");
				break;
			case "Most Recent Login failure":
				Assert.assertEquals(ele, "Most Recent Login failure");
				break;
			case "Consecutive Failures":
				Assert.assertEquals(ele, "Consecutive Failures");
				break;
			case "Lockout Period End Time":
				Assert.assertEquals(ele, "Lockout Period End Time");
				break;
			case "Action":
				Assert.assertEquals(ele, "Action");
				break;
			}
		}
		List<WebElement> name21 = driver.findElements(cirrusDCSPageObjects2
				.getsecurity_Audit_module_Locked_accounts_submodule_hostAdmin_button_Export_As_button_list());
		for (WebElement element : name21) {
			String ele = element.getAttribute("value");
			switch (ele) {
			case "Export As CSV":
				Assert.assertEquals(ele, "Export As CSV");
				break;
			case "Export As PDF":
				Assert.assertEquals(ele, "Export As PDF");
				break;
			case "Export As Excel":
				Assert.assertEquals(ele, "Export As Excel");
				break;
			}
		}
		j.executeScript("scroll(0,1000)");
		Assert.assertTrue(
				driver.findElement(By.xpath("(//div[@class='text-right row'])[4]/button/span")).isDisplayed());
	}

	@Then("^I verify that User is able to view the all the fields which are available on the Events page")
	public void I_verify_that_User_is_able_to_view_the_all_the_fields_which_are_available_on_the_Events_page()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;

		String text = driver
				.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Events_Submodule_Event_Messages_text())
				.getText();
		System.out.println(text);
		// Assert.assertEquals(text, "ZKDCS Accounts with Expired Passwords");
		List<WebElement> name1 = driver.findElements(
				cirrusDCSPageObjects2.getsecurity_Audit_module_Events_Submodule_table_headercolumn_list());
		for (WebElement element : name1) {
			String ele = element.getText();
			System.out.println(ele);
			switch (ele) {
			case "Event Type":
				Assert.assertEquals(ele, "Event Type");
				break;
			case "Date":
				Assert.assertEquals(ele, "Date");
				break;
			case "Message":
				Assert.assertEquals(ele, "Message");
				break;
			case "Action":
				Assert.assertEquals(ele, "Action");
				break;

			}
		}
		List<WebElement> name2 = driver.findElements(
				cirrusDCSPageObjects2.getsecurity_Audit_module_Locked_accounts_submodule_Export_As_button_list());
		for (WebElement element : name2) {
			String ele = element.getAttribute("value");
			switch (ele) {
			case "Export As CSV":
				Assert.assertEquals(ele, "Export As CSV");
				break;
			case "Export As PDF":
				Assert.assertEquals(ele, "Export As PDF");
				break;
			case "Export As Excel":
				Assert.assertEquals(ele, "Export As Excel");
				break;
			}
			j.executeScript("scroll(0,1000)");
			List<WebElement> buttons = driver.findElements(
					cirrusDCSPageObjects2.getsecurity_Audit_module_Events_Submodule_avialable_footer_buttons_list());
			boolean value = buttons.get(0).isDisplayed();
			boolean value1 = buttons.get(1).isDisplayed();
			Assert.assertTrue(value);
			Assert.assertTrue(value1);
		}
	}

	@Then("^I verify that User is able to view the all the fields which are available on the Expired Accounts page")
	public void I_verify_that_User_is_able_to_view_the_all_the_fields_which_are_available_on_the_Expired_Accounts_page()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;

		String text = driver
				.findElement(cirrusDCSPageObjects2
						.getsecurity_Audit_module_Expired_Accounts_ZKDCS_Accounts_with_Expired_Passwords_text())
				.getText();
		// System.out.println(text);
		Assert.assertEquals(text, "ZKDCS Accounts with Expired Passwords");
		List<WebElement> name2 = driver
				.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Expired_Accounts_Export_As_button_list());
		for (WebElement element : name2) {
			String ele = element.getAttribute("value");
			switch (ele) {
			case "Export As CSV":
				Assert.assertEquals(ele, "Export As CSV");
				break;
			case "Export As PDF":
				Assert.assertEquals(ele, "Export As PDF");
				break;
			case "Export As Excel":
				Assert.assertEquals(ele, "Export As Excel");
				break;
			}
		}
		List<WebElement> name1 = driver.findElements(
				cirrusDCSPageObjects2.getsecurity_Audit_module_Expired_Accounts_table_headercolumn_list());
		for (WebElement element : name1) {
			String ele = element.getText();
			switch (ele) {
			case "Account":
				Assert.assertEquals(ele, "Account");
				break;
			case "User":
				Assert.assertEquals(ele, "User");
				break;
			case "Account Expired":
				Assert.assertEquals(ele, "Account Expired");
				break;
			case "Days Since Last Password Change":
				Assert.assertEquals(ele, "Days Since Last Password Change");
				break;
			case "Password LifeSpan":
				Assert.assertEquals(ele, "Password LifeSpan");
				break;
			}
		}
		j.executeScript("scroll(0,1000)");
		boolean value = driver
				.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Expired_Accounts_Refresh_button())
				.isDisplayed();
		Assert.assertTrue(value);
	}

	@Then("^I verify that User is able to view the all the fields which are available on the Login Audit page$")
	public void I_verify_that_User_is_able_to_view_the_all_the_fields_which_are_available_on_the_Host_User_Audit_page()
			throws InterruptedException {
		List<WebElement> name1 = driver
				.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_Login_Audit_available_fields());
		for (WebElement element : name1) {
			String ele = element.getText();

			switch (ele) {
			case "From":
				Assert.assertEquals(ele, "From");
				break;
			case "To":
				Assert.assertEquals(ele, "To");
				break;
			case "Account Id":
				Assert.assertEquals(ele, "Account Id");
				break;
			case "User":
				Assert.assertEquals(ele, "User");
				break;
			}
		}
		Assert.assertEquals(driver
				.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_Login_Audit_Go_button()).getText(),
				"Go");
		List<WebElement> name = driver
				.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_Login_Audi_table_headercolumn_list());
		for (WebElement element : name) {
			String ele = element.getText();
			switch (ele) {
			case "Account":
				Assert.assertEquals(ele, "Account");
				break;
			case "Account Id":
				Assert.assertEquals(ele, "Account Id");
				break;
			case "User":
				Assert.assertEquals(ele, "User");
				break;
			case "Signon Time":
				Assert.assertEquals(ele, "Signon Time");
				break;
			case "Signoff Time":
				Assert.assertEquals(ele, "Signoff Time");
				break;
			case "Device Type":
				Assert.assertEquals(ele, "Device Type");
				break;
			case "Failed Signon":
				Assert.assertEquals(ele, "Failed Signon");
				break;
			case "Invalid Credential":
				Assert.assertEquals(ele, "Invalid Credential");
				break;
			case "Failure Message":
				Assert.assertEquals(ele, "Failure Message");
				break;
			case "Session ID":
				Assert.assertEquals(ele, "Session ID");
				break;
			}
		}
		List<WebElement> name2 = driver.findElements(
				cirrusDCSPageObjects2.getsecurity_Audit_module_Host_Login_Audit_table_export_AS_button_list());
		for (WebElement element : name2) {
			String ele = element.getAttribute("value");
			switch (ele) {
			case "Export As CSV":
				Assert.assertEquals(ele, "Export As CSV");
				break;
			case "Export As PDF":
				Assert.assertEquals(ele, "Export As PDF");
				break;
			case "Export As Excel":
				Assert.assertEquals(ele, "Export As Excel");
				break;
			}
		}
	}

	@Then("^I verify that User is able to view the all the field which is available on the Host User Audit page$")
	public void I_verify_that_User_is_able_to_view_the_all_the_field_which_is_available_on_the_Host_User_Audit_page()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		List<WebElement> name1 = driver
				.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_user_Audit_available_fields());
		for (WebElement element : name1) {
			String ele = element.getText();
			switch (ele) {
			case "From":
				Assert.assertEquals(ele, "From");
				break;
			case "To":
				Assert.assertEquals(ele, "To");
				break;
			case "User":
				Assert.assertEquals(ele, "User");
				break;
			}
		}
		Assert.assertEquals(driver
				.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_user_Audit_Go_button()).getText(),
				"Go");
		List<WebElement> name = driver
				.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_user_Audit_table_headercolumn_list());
		for (WebElement element : name) {
			String ele = element.getText();

			switch (ele) {
			case "Audit Date":
				Assert.assertEquals(ele, "Audit Date");
				break;
			case "User":
				Assert.assertEquals(ele, "User");
				break;
			case "Data Object":
				Assert.assertEquals(ele, "Data Object");
				break;
			case "Operation":
				Assert.assertEquals(ele, "Operation");
				break;
			case "Audit Message":
				Assert.assertEquals(ele, "Audit Message");
				break;
			}

		}
		List<WebElement> name2 = driver.findElements(
				cirrusDCSPageObjects2.getsecurity_Audit_module_Host_user_Audit_table_export_AS_button_list());
		for (WebElement element : name2) {
			String ele = element.getAttribute("value");
			switch (ele) {
			case "Export As CSV":
				Assert.assertEquals(ele, "Export As CSV");
				break;
			case "Export As PDF":
				Assert.assertEquals(ele, "Export As PDF");
				break;
			case "Export As Excel":
				Assert.assertEquals(ele, "Export As Excel");
				break;
			}
		}
		j.executeScript("scroll(0,1000)");
		Assert.assertTrue(driver
				.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_user_Audit_table_Refresh_button())
				.isDisplayed());
		System.out.println("rishi");

	}

	@Then("^I verify that User is able to search User details by entering Username$")
	public void I_verify_that_User_is_able_to_search_User_details_by_entering_Username() throws InterruptedException {
		String userNAme = "h_Sumukh@zktk";
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_user_Audit_User_input_field())
				.sendKeys(userNAme);
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_user_Audit_Go_button()).click();
		Thread.sleep(1000);
		List<WebElement> UserNameList = driver
				.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_user_Audit_Table_UserName_List());
		for (WebElement name : UserNameList) {
			String Nameq = name.getText();
			Assert.assertEquals(Nameq, userNAme);
		}
		Thread.sleep(2000);

	}

	@Then("^I verify that User is able to view the failed login attempted details$")
	public void I_verify_that_User_is_able_to_view_the_failed_login_attempted_details() throws InterruptedException {
		String UserName = "Akshaybv";
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_Login_User_input_field())
				.sendKeys(UserName);
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_Login_Audit_Go_button()).click();
		List<WebElement> UserNameList = driver
				.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_Login_Audi_Table_UserName_List());
		List<WebElement> failureMsg = driver.findElements(
				cirrusDCSPageObjects2.getsecurity_Audit_module_Host_Login_Audi_Table_Failure_message_List());
		for (int i = 0; i < failureMsg.size(); i++) {
			if (failureMsg.get(i).getText().isEmpty()) {
				System.out.println(" UserName '" + UserNameList.get(i).getText() + "' no failure reason");
			} else if (!failureMsg.get(i).getText().isEmpty()) {

				System.out.println(" UserName '" + UserNameList.get(i).getText() + "' reason of the faliure '"
						+ failureMsg.get(i).getText() + "'");
			}

		}
	}

	@Then("^I verify that User is able to search login Users details by User name$")
	public void I_verify_that_User_is_able_to_search_login_Users_details_by_User_name() throws InterruptedException {
		String UserName = "akshaybv@zktk";
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_Login_User_input_field())
				.sendKeys(UserName);
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_Login_Audit_Go_button()).click();
		List<WebElement> UserNameList = driver
				.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_Login_Audi_Table_UserName_List());
		for (WebElement name : UserNameList) {
			Assert.assertEquals(name.getText(), UserName);
		}
		Thread.sleep(2000);

	}

	@Then("^I verify that User is able to search login Users details by Account ID$")
	public void I_verify_that_User_is_able_to_search_login_Users_details_by_Account_ID() throws InterruptedException {
		Thread.sleep(2000);
		String AccountName = "ZKTK";
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_Login_AccountID_input_field())
				.sendKeys(AccountName);
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_Login_Audit_Go_button()).click();
		List<WebElement> AccountIdList = driver
				.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_Login_Audi_Table_AccountID_List());
		for (WebElement name : AccountIdList) {
			Assert.assertEquals(name.getText(), AccountName);
		}
		Thread.sleep(2000);
	}

	@Then("^I verify that User is able to search login Users details by Date$")
	public void I_verify_that_User_is_able_to_search_login_Users_details_by_Date() throws InterruptedException {
		Thread.sleep(2000);
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_Login_Audi_From_input_field())
				.sendKeys("09/7/2022 00:00");
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_Login_Audi_To_input_field())
				.sendKeys("10/8/2022 00:00");
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_Login_Audit_Go_button()).click();
		List<WebElement> UserNameList = driver
				.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_Login_Audi_Table_UserName_List());
		for (WebElement name : UserNameList) {
			Assert.assertTrue(name.isDisplayed());
		}
		Thread.sleep(2000);
	}

	@Then("^I verify that User is able to search User details by Date$")
	public void I_verify_that_User_is_able_to_search_User_details_by_Date() throws InterruptedException {
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_user_Audit_From_input_field())
				.sendKeys("6/7/2022 10:50");
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_user_Audit_To_input_field())
				.sendKeys("10/7/2022 10:50");
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_user_Audit_Go_button()).click();
		Thread.sleep(1000);
		List<WebElement> UserNameList = driver
				.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_user_Audit_Table_UserName_List());
		for (WebElement name : UserNameList) {
			Assert.assertTrue(name.isDisplayed());
		}
		Thread.sleep(2000);
	}

	@Then("^I click on the Active login users submodule$")
	public void I_click_on_the_Active_login_users_submodule() throws InterruptedException {
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Activer_login_users_link()).click();
	}

	@Then("^I click on the password life span days$")
	public void I_click_on_the_password_life_span_days() throws InterruptedException {
		passwordlifespanvalue = driver
				.findElement(By.xpath("//span[@id='securityPolicyForm:policyGrid:0:j_id_1h_display']")).getText();
		driver.findElement(By.xpath("//span[@id='securityPolicyForm:policyGrid:0:j_id_1h_display']")).click();
	}

	@Then("^I verify user is able to set the set password life span value as per the requirement$")
	public void I_verify_user_is_able_to_set_the_set_password_life_span_value_as_per_the_requirement()
			throws InterruptedException {
		String num = property.getProperty("PasswordLifeSpanDays");
		int number = Integer.parseInt(num);

		int number1 = Integer.parseInt(passwordlifespanvalue);
		if (number1 < number) {
			for (int i = number1; i < number; i++) {
				driver.findElement(By.xpath("//span[@id='securityPolicyForm:policyGrid:0:passwordExpiry']/a[1]"))
						.click();
			}
		} else if (number1 > number) {
			for (int i = number1; i > number; i--) {
				driver.findElement(By.xpath("//span[@id='securityPolicyForm:policyGrid:0:passwordExpiry']/a[2]"))
						.click();
			}
		} else {

		}
		Thread.sleep(2000);
		List<WebElement> buttons = driver
				.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Security_policy_submenu_btns_list());
		buttons.get(0).click();
		Thread.sleep(2000);
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Security_policy_confirmationPage_yes_btn())
				.click();
		Thread.sleep(2000);
		String no1 = driver.findElement(By.xpath("//span[@id='securityPolicyForm:policyGrid:0:j_id_1h_display']"))
				.getText();
		System.out.println(no1);
		Assert.assertEquals(no1, num);

	}

	@Then("^I click on the password strength fields$")
	public void I_click_on_the_password_strength_fields() throws InterruptedException {
		driver.findElement(
				cirrusDCSPageObjects2.getsecurity_Audit_module_Security_policy_submenupassword_strength_value())
				.click();
	}

	@Then("^I verify user is able to view the all the option under in the password strength field$")
	public void I_verify_user_is_able_to_view_the_all_the_option_under_in_the_password_strength_field()
			throws InterruptedException {
		driver.findElement(By.xpath("//div[@class='ui-selectonemenu-trigger ui-state-default ui-corner-right']"))
				.click();
		List<WebElement> name1 = driver.findElements(
				cirrusDCSPageObjects2.getsecurity_Audit_module_Security_policy_submenupassword_strength_valueList());
		for (WebElement element : name1) {
			String ele = element.getText();
			switch (ele) {
			case "Normal":
				Assert.assertEquals(ele, "Normal");
				break;
			case "Medium":
				Assert.assertEquals(ele, "Medium");
				break;
			case "Strong":
				Assert.assertEquals(ele, "Strong");
				break;
			}
		}
		name1.get(2).click();
		Thread.sleep(2000);
		List<WebElement> buttons = driver
				.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Security_policy_submenu_btns_list());
		buttons.get(0).click();
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Security_policy_confirmationPage_yes_btn())
				.click();

	}

	@Then("^I verify that user is able to view the all the available fields in the security policy submodule$")
	public void I_verify_that_user_is_able_to_view_the_all_the_available_fields_in_the_security_policy_submodule()
			throws InterruptedException {
		List<WebElement> name1 = driver
				.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Security_policy_submenu_fields_list());
		for (WebElement element : name1) {
			String ele = element.getText();
			switch (ele) {

			case "Password Strength:":
				Assert.assertEquals(ele, "Password Strength:");
				break;
			case "Password Length:":
				Assert.assertEquals(ele, "Password Length:");
				break;
			case "Password Life Span (Days):":
				Assert.assertEquals(ele, "Password Life Span (Days):");
				break;
			case "Password Tracking:":
				Assert.assertEquals(ele, "Password Tracking:");
				break;
			case "Session Timeout:":
				Assert.assertEquals(ele, "Session Timeout:");
				break;
			case "Max login trial attempt:":
				Assert.assertEquals(ele, "Max login trial attempt:");
				break;
			case "Track Interval (Seconds):":
				Assert.assertEquals(ele, "Track Interval (Seconds):");
				break;
			case "Lockout Interval(Hrs.):":
				Assert.assertEquals(ele, "Lockout Interval(Hrs.):");
				break;
			case "Send Email when lockout:":
				Assert.assertEquals(ele, "Send Email when lockout:");
				break;
			}
		}
		List<WebElement> buttons = driver
				.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Security_policy_submenu_btns_list());
		for (WebElement elementt : buttons) {
			String button = elementt.getText();
			switch (button) {

			case "Save":
				Assert.assertEquals(button, "Save");
				break;
			case "Cancel":
				Assert.assertEquals(button, "Cancel");
				break;
			}
		}
	}

	@Then("^I click on the List of users btn$")
	public void I_click_on_the_List_of_users_btn() throws InterruptedException {
		Thread.sleep(2000);
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_role_ListofUsers_btn()).click();
	}

	@Then("^I verify that User is able to view the list of Users$")
	public void I_verify_that_User_is_able_to_view_the_list_of_Users() throws InterruptedException {
		List<WebElement> username = driver
				.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_role_ListOfUsers_username());
		for (int i = 0; i < username.size(); i++) {
			String Name11 = username.get(i).getText();
			Assert.assertTrue(username.get(i).isDisplayed());
			System.out.println(Name11);
		}
	}

	@Then("^I click on the host role submodule$")
	public void I_click_on_the_host_role_submodule() throws InterruptedException {
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_role_subModule()).click();
	}

	@Then("^I logout the DCS host account$")
	public void I_logout_the_DCS_host_account() throws InterruptedException {
		driver.navigate().refresh();
		Thread.sleep(2000);
		driver.findElement(By.id("drop1")).click();
		Thread.sleep(2000);
		driver.findElement(By.xpath("(//ul[@class='dropdown-menu'])[1]/li[2]")).click();
		Thread.sleep(2000);
		System.out.println("rishi");
	}

	@Then("^I click on the Host Users module$")
	public void I_click_on_the_Host_Users_module() throws InterruptedException {
		Thread.sleep(2000);
		driver.findElement(By.xpath("//ul[@id='zkMenu']/li[3]/a")).click();

	}

	@Then("^I search the particular host user in the host users page$")
	public void I_search_the_particular_host_user_in_the_host_users_page() throws InterruptedException {
		List<WebElement> userIdName = driver
				.findElements(By.xpath("//tbody[@id='userListForm:hostListTable_data']/tr/td[1]"));
		String useridname11 = property.getProperty("useridname");
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,500)");
		for (int i = 0; i < userIdName.size(); i++) {
			String useridname1 = userIdName.get(i).getText();
			if (useridname1.contains(useridname11)) {
				System.out.println(useridname1);
				userIdName.get(i).click();
			}
		}
	}

	@Then("^I verify that user is able to view the set password length policy is reflecting in Host page$")
	public void I_verify_that_user_is_able_to_view_the_set_password_length_policy_is_reflecting_in_Host_page()
			throws InterruptedException {
		Thread.sleep(2000);
		driver.findElement(By.id("tenantinfo:userDetailsForm:password")).sendKeys(passwordLengthpwd);
		Thread.sleep(2000);
		driver.findElement(By.id("tenantinfo:userDetailsForm:confirmPassword")).sendKeys(passwordlengthconfirm);
		Thread.sleep(2000);
		driver.findElement(By.id("tenantinfo:userDetailsForm:SaveButton")).click();

		String msg = driver.findElement(By.xpath("(//div[@class='ui-growl-message'])[2]/span")).getText();
		System.out.println(msg);
		Thread.sleep(2000);
		I_click_on_the_Host_Users_module();
		Thread.sleep(2000);
		I_search_the_particular_host_user_in_the_host_users_page();
		Thread.sleep(2000);
		String invalidpwd = passwordLengthpwd;
		driver.findElement(By.id("tenantinfo:userDetailsForm:password")).sendKeys(invalidpwd + "Eww" + 1);
		Thread.sleep(2000);
		driver.findElement(By.id("tenantinfo:userDetailsForm:confirmPassword")).sendKeys(invalidpwd + "Eww" + 1);
		Thread.sleep(2000);
		driver.findElement(By.id("tenantinfo:userDetailsForm:SaveButton")).click();

		String msg1 = driver.findElement(By.xpath("(//div[@class='ui-growl-message'])[2]/span")).getText();
		System.out.println(msg1);

	}

	@Then("^I click on the Add New available pages$")
	public void I_click_on_the_Add_New_available_pages() throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		WebElement element = driver
				.findElement(By.xpath("//button[@id='hostRoleDefinition:availablePagesForm:j_id_29']/span"));
		((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView();", element);
		js.executeScript("arguments[0].click();", element);
		Thread.sleep(2000);

	}

	@Then("^I click on the Add hosts users btn$")
	public void I_click_on_the_Add_hosts_users_btn() throws InterruptedException {
		Thread.sleep(2000);
		driver.findElement(By.xpath("//form[@id='hostRoleDefinition:availableUsersForm']/div[1]/button/span")).click();
	}

	@Then("^I view the available page$")
	public void I_view_the_available_page() throws InterruptedException {
		Thread.sleep(2000);
		String name = driver.findElement(By.id("addhostPagesdlg_title")).getText();
		System.out.println(name);
		List<WebElement> names = driver
				.findElements(By.xpath("//div[@id='hostDlgForm:addavailableHostPages']/div[2]/table/tbody/tr/td[2]"));
		WebElement element = driver.findElement(
				By.xpath("//tbody[@id='hostDlgForm:addavailableHostPages_data']/tr[1]/td[1]/div/div[2]/span"));
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", element);

		for (int i = 0; i < names.size(); i++) {
			deletedpagesName = names.get(i).getText();
			System.out.println(deletedpagesName);
		}

		driver.findElement(By.xpath("//thead[@id='hostDlgForm:addavailableHostPages_head']/tr/th[1]/div")).click();
	}

	@Then("^I view the available users$")
	public void I_view_the_available_users() throws InterruptedException {
		Thread.sleep(2000);
		String name = driver.findElement(By.id("addhostUserdlg_title")).getText();
		System.out.println(name);
		List<WebElement> names = driver
				.findElements(By.xpath("(//div[@class='ui-datatable-scrollable-body'])[4]/table/tbody/tr/td[2]"));
		WebElement element = driver.findElement(
				By.xpath("//tbody[@id='hostUserDlgForm:addRoleToHostUserTable_data']/tr/td[1]/div/div[2]/span"));
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", element);

		for (int i = 0; i < names.size(); i++) {
			deleteduserName = names.get(i).getText();
			System.out.println(deleteduserName);
		}
	}

	@Then("^I verify that user is able to add the deleted page to the selected role$")
	public void I_verify_that_user_is_able_to_add_the_deleted_page_to_the_selected_role() throws InterruptedException {
		Thread.sleep(2000);
		List<WebElement> columns = driver.findElements(
				cirrusDCSPageObjects2.getsecurity_Audit_module_Host_role_Table_columns_namecolumns_list());
		for (int i = 0; i < columns.size(); i++) {
			String name = columns.get(i).getText();
			if (name.equals(deletedpagesName)) {
				System.out.println(deletedpagesName);
				System.out.println("user is able to add the deleted page to the selected role");
			}
//	    	else
//	    	{
//	    		System.out.println("user is not able to add the deleted page to the selected role");
//	    	}
		}
	}

	@Then("^I verify that user is able to add the deleted users to the selected role$")
	public void I_verify_that_user_is_able_to_add_the_deleted_users_to_the_selected_role() throws InterruptedException {
		Thread.sleep(2000);
		List<WebElement> columns = driver.findElements(
				By.xpath("//tbody[@id='hostRoleDefinition:availableUsersForm:availableUsers_data']/tr/td[1]"));
		for (int i = 0; i < columns.size(); i++) {
			String name = columns.get(i).getText();
			if (name.equals(deleteduserName)) {
				System.out.println(deleteduserName);
				System.out.println("user is able to add the deleted user to the selected role");
			} else {
				System.out.println("user is not able to add the deleted user to the selected role");
			}
		}
	}

	@Then("^I click on the Save btn which is avliable on the available users$")
	public void I_click_on_the_Save_btn_which_is_avliable_on_the_available_pages() throws InterruptedException {
		driver.findElement(By.id("hostUserDlgForm:addRoleToHostUserTable:SavePageButton")).click();
		Thread.sleep(2000);
	}

	@Then("^I click on the tenant role submodule$")
	public void I_click_on_the_tenant_role_submodule() throws InterruptedException {
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_tenant_role()).click();
	}

	@Then("^I click on the particular tenant which is available in the tenant user roles block$")
	public void I_click_on_the_particular_tenant_which_is_available_in_the_tenant_user_roles_block()
			throws InterruptedException {
		String tenantname = "ZKTK";
		JavascriptExecutor js = (JavascriptExecutor) driver;
		int b = 0;
		List<WebElement> TenantName = driver
				.findElements(By.xpath("//tbody[@id='tenantUserRolesForm:roleListTable_data']/tr"));

		for (int i = 0; i < TenantName.size(); i++) {

			((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView();", TenantName.get(i));
			// Thread.sleep(100);
			String namwe = TenantName.get(i).getText();
			b = b + 1;

			if (namwe.equals(tenantname)) {
				mim = i;
				System.out.println(namwe);
				WebElement ele = driver.findElement(By.xpath(
						"//tbody[@id='tenantUserRolesForm:roleListTable_data']/tr[@id='tenantUserRolesForm:roleListTable_node_"
								+ i + "']/td/span"));
				Thread.sleep(2000);
				JavascriptExecutor executor = (JavascriptExecutor) driver;
				executor.executeScript("arguments[0].click();", ele);
				break;
			}
			WebElement namm = driver
					.findElement(By.xpath("(//tbody[@id='tenantUserRolesForm:roleListTable_data']/tr)[64]/td[1]/span"));
//				    ((JavascriptExecutor) driver).executeScript(
//				            "arguments[0].scrollIntoView();", namm);
//				    String cc =namm.getText();
//				    System.out.println(b+" "+cc);
////					 WebElement ele= driver.findElement(By.xpath("(//tbody[@id='tenantUserRolesForm:roleListTable_data']/tr)[1]/td[1]/span"));
////					 js.executeScript("arguments[0].click();",ele);
////					 Thread.sleep(1000); 
////   WebElement btn = driver.findElement(By.xpath("//tbody[@id='tenantUserRolesForm:roleListTable_data']/tr[@id='tenantUserRolesForm:roleListTable_node_//"+b+//"_0']"));
////					 
////			 }
////			    
//		 }

		}

		WebElement element = driver.findElement(cirrusDCSPageObjects2
				.getsecurity_Audit_module_tenant_role_tenant_user_roles_particular_user_dropdown());
//		((JavascriptExecutor) driver).executeScript(
//	            "arguments[0].scrollIntoView();", element);
//		js.executeScript("arguments[0].click();", element);
//     	Thread.sleep(2000);
//
//    	System.out.println("User is click on the 'Adi' tenant");
//	    Thread.sleep(2000);	  
	}

	@Then("^I view the respected Accessible page under the respected tenant role$")
	public void I_view_the_respected_Accessible_page_under_the_respected_tenant_role() throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,50)");
		List<WebElement> Name = driver
				.findElements(By.xpath("//tbody[@id='availableTenantPagesForm:assignedTenantPages_data']/tr/td[2]"));
		for (int i = 0; i < Name.size(); i++) {
			String name1 = Name.get(i).getText();
			System.out.println(name1);
		}
		List<WebElement> Name1 = driver
				.findElements(By.xpath("//tbody[@id='availableTenantPagesForm:assignedTenantPages_data']/tr/td[5]"));

	}

	@Then("^I select the particular tenant's tenant role and click on the edit button$")
	public void I_select_the_particular_tenants_tenant_role_and_click_on_the_edit_button() throws InterruptedException {
		String Name = driver.findElement(By.xpath("//tr[@id='tenantUserRolesForm:roleListTable_node_63_0']/td[1]"))
				.getText();
		System.out.println(Name);
		WebElement button = driver
				.findElement(By.xpath("//tr[@id='tenantUserRolesForm:roleListTable_node_63_0']/td[2]/a[1]"));
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", button);
	}

	@Then("^I click on the Add new available page under the Accessible pages block$")
	public void I_click_on_the_Add_new_available_page_under_the_Accessible_pages_block() throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		WebElement button = driver.findElement(By.xpath("//button[@id='availableTenantPagesForm:j_id_3m']/span"));
		// js.executeScript("arguments[0].click();", element);
		((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", button);
		js.executeScript("arguments[0].click();", button);
		Thread.sleep(2000);
		String Name1 = driver.findElement(By.xpath("//span[@id='addtenantPagesdlg_title']")).getText();
		System.out.println(Name1);

	}

	@Then("^I add the new page under the particular tenant role$")
	public void I_add_the_new_page_under_the_particular_tenant_role() throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,-4500)");
		WebElement button = driver.findElement(By.xpath("//button[@id='availableTenantPagesForm:j_id_3m']"));
		js.executeScript("arguments[0].click();", button);
		Thread.sleep(2000);
		driver.findElement(
				By.xpath("(//div[@class='ui-datatable-scrollable-body'])[3]/table/tbody/tr/td[1]/div/div[2]")).click();
		pagename = driver
				.findElement(By.xpath("(//div[@class='ui-datatable-scrollable-body'])[3]/table/tbody/tr/td[2]"))
				.getText();
		Thread.sleep(1000);
		driver.findElement(
				By.xpath("(//div[@class='ui-dialog-content ui-widget-content'])[7]/form/div/div[4]/div/button[1]"))
				.click();

	}

	@Then("^I click on the edit button on the particular tenant role$")
	public void I_click_on_the_edit_button_on_the_particular_tenant_role() throws InterruptedException {
		((JavascriptExecutor) driver).executeScript("window.scrollTo(0, document.body.scrollHeight)");
		Thread.sleep(2000);
		System.out.println("User is click on the 'User' Role edit button");
		driver.findElement(By.xpath("//tr[@id='tenantUserRolesForm:roleListTable_node_" + mim + "_0']/td[2]/a[1]"))
				.click();
		Thread.sleep(2000);
	}

	@Then("^I click on the Add New available Wedget$")
	public void I_click_on_the_Add_New_available_Wedget() throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,50)");
		Thread.sleep(2000);
		WebElement element = driver.findElement(By.xpath("//form[@id='roleDashboardWidgetForm']/div[1]/button"));
		((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView();", element);
		Thread.sleep(2000);
		element.click();

	}

	@Then("^I verify that user is able to view the list of pages accessible for the particular tenant role$")
	public void I_verify_that_user_is_able_to_view_the_list_of_pages_accessible_for_the_particular_tenant_role()
			throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,-4500)");
		Thread.sleep(1000);
		List<WebElement> Pagelist = driver
				.findElements(By.xpath("//tbody[@id='availableTenantPagesForm:assignedTenantPages_data']/tr/td[2]"));
		List<String> list = new ArrayList<>();
		for (int m = 0; m < Pagelist.size(); m++) {
			((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView();", Pagelist.get(m));
			String page = Pagelist.get(m).getText();
			list.add(m, page);
			System.out.println(page);
		}
		for (int c = 0; c < list.size(); c++) {
			if (list.get(c).equals(pagename)) {
				System.out.println("user is able to add the page under the particular tenant role");
			}
		}

	}

	@Then("^I view the Assign dashboard wedget window and select the Name$")
	public void I_view_the_Assign_dashboard_wedget_window_and_select_the_Name() throws InterruptedException {
		String Name = driver.findElement(By.xpath("//div[@id='assignWidget']/div[1]/span")).getText();
		System.out.println(Name);
		driver.findElement(By.xpath("//div[@id='assignWidget']/div[2]/form/div/div[1]/div/table/thead/tr/th[1]"))
				.click();
		Thread.sleep(1000);
		driver.findElement(By.xpath("//div[@id='assignWidget']/div/form/div/div[4]/button")).click();
		String msg = driver.findElement(By.xpath(
				"//div[@class='ui-growl-item-container ui-state-highlight ui-corner-all ui-helper-hidden ui-shadow']/div/div[2]/span"))
				.getText();
		System.out.println(msg);
	}

	@Then("^I click on the Add new Tenant Role button$")
	public void I_click_on_the_Add_new_Tenant_Role_button() throws InterruptedException {
		((JavascriptExecutor) driver).executeScript("window.scrollTo(0, document.body.scrollHeight)");
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_tenant_role_Tenant_Add_New_Tenant_Role_btn())
				.click();
	}

	@Then("^I Verify that user is able to create new tenant role$")
	public void I_Verify_that_user_is_able_to_create_new_tenant_role() throws InterruptedException {
		WebElement msg = driver
				.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_tenant_role_tenant_role_create_msg());
		wait.until(ExpectedConditions.visibilityOf(msg));
		String msg1 = msg.getText();
		Assert.assertEquals("Successfully saved Tenant Role", msg1);

		// ((JavascriptExecutor) driver)
//	     .executeScript("window.scrollTo(0, document.body.scrollHeight)");
//		driver.findElement(By.xpath("(//tbody[@id='tenantUserRolesForm:roleListTable_data']/tr)[138]/td[1]/span")).click();
//		Thread.sleep(2000);
//		int k=0;
//		String locator ="//tr[@id='tenantUserRolesForm:roleListTable_node_137_'"+k+"]/td[1]";
//		for(int i=0;i<=12;i++)
//		{
//			WebElement name =driver.findElement(By.xpath(locator));
//			k=k+1;
//			if
//			
		// }
	}

	@Then("^I fill the all the fields in the Add new Tenant Role window$")
	public void I_fill_the_all_the_fields_in_the_Add_new_Tenant_Role_window() throws InterruptedException {
		Thread.sleep(2000);
		Name1 = RoleName;
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_tenant_role_Add_new_tenant_Role_Role_Name())
				.sendKeys(Name1);
		Thread.sleep(2000);
		driver.findElement(
				cirrusDCSPageObjects2.getsecurity_Audit_module_tenant_role_Add_new_tenant_Role_Role_Description())
				.sendKeys(Description);
		Thread.sleep(2000);
		driver.findElement(By.xpath("//div[@id='j_id_1o']/div[2]/form/div[3]/div/div[2]/div/div[3]")).click();
		Thread.sleep(1000);
		driver.findElement(
				cirrusDCSPageObjects2.getsecurity_Audit_module_tenant_role_Add_new_tenant_Role_Role_supervisor())
				.click();
		Thread.sleep(2000);
		driver.findElement(By.xpath("//div[@id='j_id_1o']/div[2]/form/div[4]/div/div[2]/div/div[3]")).click();
		Thread.sleep(2000);
		List<WebElement> clientsName = driver.findElements(cirrusDCSPageObjects2
				.getsecurity_Audit_module_tenant_role_Add_new_tenant_Role_Role_select_client_list());

		for (int i = 0; i < clientsName.size(); i++) {
			String Name = clientsName.get(i).getText();
			if (Name.contains("ZKTK")) {
				clientsName.get(i).click();
			}
		}

		Thread.sleep(2000);
		driver.findElement(
				cirrusDCSPageObjects2.getsecurity_Audit_module_tenant_role_Add_new_tenant_Role_Role_Save_btn()).click();
	}

	@Then("^I verify that user is able to view the all the available fields$")
	public void I_veirfy_that_user_is_able_to_view_the_all_the_available_fields() throws InterruptedException {
		String Name = driver
				.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_tenant_role_Tenant_Users_Roles()).getText();
		Assert.assertEquals(Name, "Tenant User Roles");
		String name2 = driver
				.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_tenant_role_User_ROle_setting()).getText();
		// Assert.assertEquals(name2.contains("User Role Settings"),"User Role
		// Settings");
		List<WebElement> manus = driver.findElements(
				cirrusDCSPageObjects2.getsecurity_Audit_module_tenant_role_User_ROle_setting_fields_list());
		for (int i = 0; i < manus.size(); i++) {
			System.out.println(manus.get(i).getText());
			Assert.assertEquals(manus.get(i).getText(), i);
		}
		List<WebElement> columnName = driver.findElements(
				cirrusDCSPageObjects2.getsecurity_Audit_module_tenant_role_Tenant_Users_Roles_columns_list());
		Assert.assertEquals(columnName.get(0).getText().trim(), "Role Name");
		Assert.assertEquals(columnName.get(1).getText(), "Action");
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,1000)");
		Assert.assertTrue(driver
				.findElement(
						cirrusDCSPageObjects2.getsecurity_Audit_module_tenant_role_Tenant_Add_New_Tenant_Role_btn())
				.isDisplayed());
	}

	@Then("^I verify that user is able to delete the user from the delete the User page$")
	public void I_verify_that_user_is_able_to_delete_the_user_from_the_delete_the_User_page()
			throws InterruptedException {

		List<WebElement> columns = driver.findElements(
				By.xpath("//tbody[@id='hostRoleDefinition:availableUsersForm:availableUsers_data']/tr/td[1]"));
		List<WebElement> columnAction = driver.findElements(
				By.xpath("//tbody[@id='hostRoleDefinition:availableUsersForm:availableUsers_data']/tr/td[2]/button"));
		System.out.println(columns.size());
		System.out.println(columnAction.size());
		for (int i = 0; i < columns.size(); i++) {
			JavascriptExecutor js = (JavascriptExecutor) driver;
			js.executeScript("window.scrollBy(0,1000)");
			String Name = columns.get(i).getText();
			if (Name.contains("sunil")) {
				System.out.println("deleted username is displayed in the list of Accessible pages");
				break;
			} else {
				System.out.println("deleted username is not displayed in the list of Accessible pages");
				break;
			}

		}

	}

	@Then("^I click on the Action btn which is under ListOf User btn$")
	public void I_click_on_the_Action_btn_which_is_under_ListOf_User() throws InterruptedException {
		List<WebElement> columns = driver.findElements(
				By.xpath("//tbody[@id='hostRoleDefinition:availableUsersForm:availableUsers_data']/tr/td[1]"));
		List<WebElement> columnAction = driver.findElements(
				By.xpath("//tbody[@id='hostRoleDefinition:availableUsersForm:availableUsers_data']/tr/td[2]/button"));
		System.out.println(columns.size());
		System.out.println(columnAction.size());
		for (int i = 0; i < columns.size(); i++) {
			JavascriptExecutor js = (JavascriptExecutor) driver;
			js.executeScript("window.scrollBy(0,1000)");
			String Name = columns.get(i).getText();
			if (Name.contains("sunil")) {
				columnAction.get(i).click();
			}
		}

		wait.until(ExpectedConditions.visibilityOf(driver
				.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_role_configurationPage_Yes_btn())));
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_role_configurationPage_Yes_btn())
				.click();
		wait.until(ExpectedConditions.visibilityOf(driver
				.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_role_configurationPage_popUpmsg())));
		String Msg = driver
				.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_role_configurationPage_popUpmsg())
				.getText();
		Assert.assertEquals(Msg, "User :'sunil' removed successfully from :host_user");
	}

	@Then("^I verify that deleted page is not reflecting in the List Of Accessible Pages for selected role user$")
	public void I_verify_that_deleted_page_is_not_reflecting_in_the_List_Of_Accessible_Pages_for_selected_role_user()
			throws InterruptedException {
		List<WebElement> columns = driver.findElements(
				cirrusDCSPageObjects2.getsecurity_Audit_module_Host_role_Table_columns_namecolumns_list());
		List<WebElement> columnAction = driver
				.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_role_Table_columns_Action_List());
		System.out.println(columns.size());
		System.out.println(columnAction.size());
		for (int i = 0; i < columns.size(); i++) {
			JavascriptExecutor js = (JavascriptExecutor) driver;
			js.executeScript("window.scrollBy(0,1000)");
			String Name = columns.get(i).getText();
			if (Name.contains("Swagger UI")) {
				System.out.println("deleted page is displayed in the list of Accessible pages");
				break;
			} else {
				System.out.println("deleted page is not displayed in the list of Accessible pages");
				break;
			}

		}

	}

	@Then("^I verify that User is able to Delete the page that is accessible for selected Role User$")
	public void I_verify_that_User_is_able_to_Delete_the_page_that_is_accessible_for_selected_Role_User()
			throws InterruptedException {
		List<WebElement> columns = driver.findElements(
				cirrusDCSPageObjects2.getsecurity_Audit_module_Host_role_Table_columns_namecolumns_list());
		List<WebElement> columnAction = driver
				.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_role_Table_columns_Action_List());
		System.out.println(columns.size());
		System.out.println(columnAction.size());
		for (int i = 0; i < columns.size(); i++) {
			JavascriptExecutor js = (JavascriptExecutor) driver;
			js.executeScript("window.scrollBy(0,1000)");
			String Name = columns.get(i).getText();
			if (Name.contains("Swagger UI")) {
				System.out.println(Name);
				Thread.sleep(2000);
				columnAction.get(i).click();
			}
		}
		wait.until(ExpectedConditions.visibilityOf(driver
				.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_role_configurationPage_Yes_btn())));
		driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_role_configurationPage_Yes_btn())
				.click();
		wait.until(ExpectedConditions.visibilityOf(driver
				.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_role_configurationPage_popUpmsg())));
		String Msg = driver
				.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_role_configurationPage_popUpmsg())
				.getText();
		Assert.assertEquals(Msg, "'Swagger UI' deleted from host_user");

	}

	@Then("^I verify that user is able to view the pages accessible for host_User/host_supre/host_admin Roles$")
	public void I_verify_that_user_is_able_to_view_the_pages_accessible_for_host_User_host_supre_host_admin_Roles()
			throws InterruptedException {
		int m = 0;
		Thread.sleep(2000);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,100)");
		List<WebElement> RolesName = driver
				.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_role_available_Roles_lists());

		List<WebElement> columns = driver.findElements(
				cirrusDCSPageObjects2.getsecurity_Audit_module_Host_role_Table_columns_namecolumns_list());
		Thread.sleep(2000);
		RolesName.get(0).click();
		for (int i = 0; i < columns.size(); i++) {
			m = m + 1;
			String Name = columns.get(i).getText();
			System.out.println(m + " " + Name);
		}
		m = 0;
		Thread.sleep(2000);
		columns.clear();
		js.executeScript("window.scrollBy(0,100)");
		System.out.println();
		Thread.sleep(2000);

		RolesName.get(1).click();
		Thread.sleep(2000);
		List<WebElement> columns1 = driver.findElements(
				cirrusDCSPageObjects2.getsecurity_Audit_module_Host_role_Table_columns_namecolumns_list());
		for (int i = 0; i < columns1.size(); i++) {
			m = m + 1;
			String Name = columns1.get(i).getText();
			System.out.println(m + " " + Name);
		}
		m = 0;
		Thread.sleep(2000);
		System.out.println();

		RolesName.get(2).click();
		js.executeScript("window.scrollBy(0,100)");
		List<WebElement> columns2 = driver.findElements(
				cirrusDCSPageObjects2.getsecurity_Audit_module_Host_role_Table_columns_namecolumns_list());
		for (int i = 0; i < columns2.size(); i++) {
			m = m + 1;
			String Name = columns2.get(i).getText();
			System.out.println(m + " " + Name);
		}
		Thread.sleep(2000);
		System.out.println();

	}

	@Then("^I verify that all the fields are available on the page$")
	public void I_verify_that_all_the_fields_are_available_on_the_page() throws InterruptedException {
		Assert.assertTrue(
				driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_role_HostUserRolesTxt())
						.isDisplayed());
		List<WebElement> RolesName = driver
				.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_role_available_Roles_lists());
		for (WebElement Role : RolesName) {
			String RoleName = Role.getText();
			switch (RoleName) {

			case "host_user":
				Assert.assertEquals(RoleName, "host_user");
				break;
			case "host_super":
				Assert.assertEquals(RoleName, "host_super");
				break;
			case "host_admin":
				Assert.assertEquals(RoleName, "host_admin");
				break;
			}
		}
		Assert.assertTrue(
				driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_role_Add_New_Host_Roles_btn())
						.isDisplayed());
		Assert.assertTrue(
				driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_role_HostRoleDefinationTxt())
						.isDisplayed());
		Assert.assertTrue(
				driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_role_ListOfAccessiblePages_btn())
						.isDisplayed());
		Assert.assertTrue(driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_role_ListofUsers_btn())
				.isDisplayed());
		Assert.assertTrue(
				driver.findElement(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_role_AddNewAvailablePages_btn())
						.isDisplayed());
		List<WebElement> columnName = driver
				.findElements(cirrusDCSPageObjects2.getsecurity_Audit_module_Host_role_Table_columns_name());
		for (WebElement columnName1 : columnName) {
			String Name = columnName1.getText();
			switch (Name) {

			case "Id":
				Assert.assertEquals(Name, "Id");
				break;
			case "Name":
				Assert.assertEquals(Name, "Name");
				break;
			case "URL":
				Assert.assertEquals(Name, "URL");
				break;
			case "Parent Id":
				Assert.assertEquals(Name, "Parent Id");
				break;
			case "Action":
				Assert.assertEquals(Name, "Action");
				break;
			}
		}
	}

	@Then("^I click on the Name file and modify in the Name field$")
	public void I_click_on_the_Name_file_and_modify_in_the_Name_field() throws InterruptedException {
		Client_Name1 = driver.findElement(CirrusDCSPageObjects.getBasic_Info_Client_Name()).getText();
		driver.findElement(CirrusDCSPageObjects.getBasic_Info_Client_Name()).click();
		driver.findElement(CirrusDCSPageObjects.getBasic_Info_Client_EditName()).clear();
		Client_Name2 = clientName;
		driver.findElement(CirrusDCSPageObjects.getBasic_Info_Client_EditName()).sendKeys(Client_Name2);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,document.body.scrollHeight)");
		driver.findElement(CirrusDCSPageObjects.getBasic_Info_save_bttn()).click();

	}

	@Then("^I verify that user is able to modify the tenant name$")
	public void I_verify_that_user_is_able_to_modify_the_tenant_name() throws InterruptedException {
		Assert.assertNotEquals(driver.findElement(CirrusDCSPageObjects.getBasic_Info_Client_Name()).getText(),
				Client_Name1);
	}

	@Then("^I click on the Type dropdown and verify that all the option is displayed$")
	public void I_click_on_the_Type_dropdown_and_verify_that_all_the_option_is_displayed() throws InterruptedException {
		Thread.sleep(2000);
		driver.findElement(CirrusDCSPageObjects.getBasic_Info_type_bttn()).click();
		driver.findElement(CirrusDCSPageObjects.getBasic_Info_Aftertype_bttn()).click();
		List<WebElement> selectType = driver.findElements(CirrusDCSPageObjects.getBasic_Info_All_type_obtions());
		for (WebElement Type1 : selectType) {
			String name = Type1.getText();
			switch (name) {

			case "Select":
				Assert.assertEquals(name, "Select");
				System.out.println(name);
				break;
			case "Workday customer":
				Assert.assertEquals(name, "Workday customer");
				System.out.println(name);
				break;
			case "Kronos":
				Assert.assertEquals(name, "Kronos");
				System.out.println(name);
				break;
			case "Synerion":
				Assert.assertEquals(name, "Synerion");
				System.out.println(name);
				break;
			case "Indeed Flex":
				Assert.assertEquals(name, "Indeed Flex");
				System.out.println(name);
				break;

			}
		}
	}

	@Then("^I click on the Type dropdown and select the workday from the dropdown$")
	public void I_click_on_the_Type_dropdown_and_select_the_workday_from_the_dropdown() throws InterruptedException {
		driver.findElement(CirrusDCSPageObjects.getBasic_Info_type_bttn()).click();
		driver.findElement(CirrusDCSPageObjects.getBasic_Info_Aftertype_bttn()).click();
		List<WebElement> selectType = driver.findElements(CirrusDCSPageObjects.getBasic_Info_All_type_obtions());
		selectType.get(1).click();
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,document.body.scrollHeight)");
		driver.findElement(CirrusDCSPageObjects.getBasic_Info_save_bttn()).click();
	}

	@Then("^I click on the Type dropdown and select the Synerion from the dropdown$")
	public void I_click_on_the_Type_dropdown_and_select_the_Synerion_from_the_dropdown() throws InterruptedException {
		driver.findElement(CirrusDCSPageObjects.getBasic_Info_type_bttn()).click();
		driver.findElement(CirrusDCSPageObjects.getBasic_Info_Aftertype_bttn()).click();
		List<WebElement> selectType = driver.findElements(CirrusDCSPageObjects.getBasic_Info_All_type_obtions());
		selectType.get(3).click();
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,document.body.scrollHeight)");
		driver.findElement(CirrusDCSPageObjects.getBasic_Info_save_bttn()).click();
	}

	@Then("^I click on the Type dropdown and select the Kronos from the dropdown$")
	public void I_click_on_the_Type_dropdown_and_select_the_Kronos_from_the_dropdown() throws InterruptedException {
		driver.findElement(CirrusDCSPageObjects.getBasic_Info_type_bttn()).click();
		driver.findElement(CirrusDCSPageObjects.getBasic_Info_Aftertype_bttn()).click();
		List<WebElement> selectType = driver.findElements(CirrusDCSPageObjects.getBasic_Info_All_type_obtions());
		selectType.get(2).click();
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,document.body.scrollHeight)");
		driver.findElement(CirrusDCSPageObjects.getBasic_Info_save_bttn()).click();
	}

	@Then("^I click on the Type dropdown and select the Indeed Flex from the dropdown$")
	public void I_click_on_the_Type_dropdown_and_select_the_Indeed_Flex_from_the_dropdown()
			throws InterruptedException {
		driver.findElement(CirrusDCSPageObjects.getBasic_Info_type_bttn()).click();
		driver.findElement(CirrusDCSPageObjects.getBasic_Info_Aftertype_bttn()).click();
		List<WebElement> selectType = driver.findElements(CirrusDCSPageObjects.getBasic_Info_All_type_obtions());
		selectType.get(4).click();
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,document.body.scrollHeight)");
		driver.findElement(CirrusDCSPageObjects.getBasic_Info_save_bttn()).click();
	}

	@Then("^I Verify that respected tenant has the workday type$")
	public void I_Verify_that_respected_tenant_has_the_workday_type() throws InterruptedException {
		String Type1 = driver.findElement(CirrusDCSPageObjects.getRespectedTenant_type()).getText();
		Assert.assertEquals(Type1, "WORKDAY");
	}

	@Then("^I Verify that respected tenant has the Synerion type$")
	public void I_Verify_that_respected_tenant_has_the_Synerion_type() throws InterruptedException {
		String Type1 = driver.findElement(CirrusDCSPageObjects.getRespectedTenant_type()).getText();
		Assert.assertEquals(Type1, "SYNERION");
	}

	@Then("^I Verify that respected tenant has the Kronos type$")
	public void I_Verify_that_respected_tenant_has_the_Kronos_type() throws InterruptedException {
		String Type1 = driver.findElement(CirrusDCSPageObjects.getRespectedTenant_type()).getText();
		System.out.println(Type1);
		Assert.assertEquals(Type1, "KRONOS");
	}

	@Then("^I Verify that respected tenant has the Indeed Flex type$")
	public void I_Verify_that_respected_tenant_has_the_Indeed_Flex_type() throws InterruptedException {
		String Type1 = driver.findElement(CirrusDCSPageObjects.getRespectedTenant_type()).getText();
		Assert.assertEquals(Type1, "INDEED");
	}

	@Then("^I Verify that user is able to view the all the options in the Date format and in the Time format$")
	public void I_Verify_that_user_is_able_to_view_the_all_the_options_in_the_Date_format_and_in_the_Time_format()
			throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,1000)");
		driver.findElement(CirrusDCSPageObjects.getBasic_info_Date_Format()).click();
		Thread.sleep(1000);
		driver.findElement(By.xpath("//label[@id='tenantinfo:tenantInfoForm:dateFormat_label']//parent::div/div[3]"))
				.click();
		Thread.sleep(1000);
		List<WebElement> item = driver
				.findElements(CirrusDCSPageObjects.getBasic_info_Preference_Date_Format_list_of_options());
		for (WebElement ss : item) {
			String dd = ss.getText();
			System.out.println(dd);
		}

		driver.findElement(CirrusDCSPageObjects.getBasic_info_Time_Format()).click();
		Thread.sleep(1000);
		driver.findElement(By.xpath("//label[@id='tenantinfo:tenantInfoForm:timeFormat_label']//parent::div/div[3]"))
				.click();
		Thread.sleep(1000);
		List<WebElement> Item = driver
				.findElements(CirrusDCSPageObjects.getBasic_info_Preference_Time_Format_list_of_options());
		for (WebElement ss : Item) {
			String dd = ss.getText();
			System.out.println(dd);
		}

	}

	@Then("^I Verify that user is able to view the all the options in the Clock Transaction row$")
	public void I_Verify_that_user_is_able_to_view_the_all_the_options_in_the_Clock_Transaction_row()
			throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,1000)");
		List<WebElement> item = driver
				.findElements(CirrusDCSPageObjects.getBasic_info_Clock_Transaction_Configuration_list_of_options());
		for (WebElement ss : item) {
			String option = ss.getText();
			switch (option) {

			case "Block HeartBeat:":
				Assert.assertEquals(option, "Block HeartBeat:");
				System.out.println(option);
				break;
			case "Block Init Push:":
				Assert.assertEquals(option, "Block Init Push:");
				System.out.println(option);
				break;
			case "Block Time Request:":
				Assert.assertEquals(option, "Block Time Request:");
				System.out.println(option);
				break;
			}
		}

	}

	@Then("^I Verify that user is able to generate the Api$")
	public void I_Verify_that_user_is_able_to_generate_the_Api() throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,1000)");
		driver.findElement(CirrusDCSPageObjects.getBasic_Info_API_Configuration_row_generate_API()).click();
		Thread.sleep(1000);
		String ApiKey = driver.findElement(CirrusDCSPageObjects.getBasic_Info_API_Configuration_row_generated_API())
				.getText();
		System.out.println(ApiKey);
	}

	@Then("^I click on the status dropdown and verify that all the status is displayed$")
	public void I_click_on_the_status_dropdown_and_verify_that_all_the_status_is_displayed()
			throws InterruptedException {
		driver.findElement(CirrusDCSPageObjects.getstatus_Pencil_Icon()).click();
		wait.until(ExpectedConditions
				.visibilityOf(driver.findElement(CirrusDCSPageObjects.getstatus_user_details_page())));
		driver.findElement(CirrusDCSPageObjects.getstatus_Active_To_DropDown()).click();
		List<WebElement> status = driver.findElements(CirrusDCSPageObjects.getstatus_List_of_all_status());
		for (WebElement Status : status) {
			String statusvalue = Status.getText();
			switch (statusvalue) {

			case "Pending":
				Assert.assertEquals(statusvalue, "Pending");
				System.out.println(statusvalue);
				break;
			case "Active":
				Assert.assertEquals(statusvalue, "Active");
				System.out.println(statusvalue);
				break;
			case "Suspend":
				Assert.assertEquals(statusvalue, "Suspend");
				System.out.println(statusvalue);
				break;
			case "Terminated":
				Assert.assertEquals(statusvalue, "Terminated");
				System.out.println(statusvalue);
				break;

			}
		}
	}

	@Then("^I Verify that use is able to view all the fields in the Address Information row in the Basic information page$")
	public void I_Verify_that_use_is_able_to_view_all_the_fields_in_the_Address_Information_row_in_the_Basic_information_page()
			throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,700)");
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getBasic_info_AddressInformation_Address1()).isDisplayed());
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getBasic_info_AddressInformation_Address2()).isDisplayed());
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getBasic_info_AddressInformation_Address3()).isDisplayed());
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getBasic_info_AddressInformation_City()).isDisplayed());
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getBasic_info_AddressInformation_State()).isDisplayed());
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getBasic_info_AddressInformation_Country()).isDisplayed());
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getBasic_info_AddressInformation_Zip_Code()).isDisplayed());
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getBasic_info_AddressInformation_phone()).isDisplayed());

	}

	@Then("^I click on the Basic info submodule$")
	public void I_click_on_the_Basic_info_submodule() throws InterruptedException {
		driver.findElement(CirrusDCSPageObjects.getTenant_Information_Basic_Info()).click();
	}

	@Then("^I take the screenshort of the respected tenant logo$")
	public void I_take_the_screenshort_of_the_respected_tenant_logo() throws InterruptedException, IOException {
		Thread.sleep(5000);
		Clientlogo = driver.findElement(By.xpath("//img[@id='tenantinfo:tenantInfoForm:clientLogo']"));

		Screenshot = new AShot().shootingStrategy(ShootingStrategies.viewportPasting(1000)).takeScreenshot(driver,
				Clientlogo);

		ImageIO.write(Screenshot.getImage(), "jpg",
				new File("D://1/Official Automation Work/Cirrus_DCS/CirrusDCS/src/test/clientlogo.png"));

	}

	@Then("^I Verfiy  all the rows are displayed under the Basic Info submodule$")
	public void I_Verfiy_all_the_rows_are_displayed_under_the_Basic_Info_submodule() throws InterruptedException {
		Assert.assertEquals(driver.findElement(CirrusDCSPageObjects.getBasic_Info_Basic_information_row()).getText(),
				"Basic Information");
		Assert.assertEquals(driver.findElement(CirrusDCSPageObjects.getBasic_Info_Address_Information_row()).getText(),
				"Address Information");
		Assert.assertEquals(driver.findElement(CirrusDCSPageObjects.getBasic_info_Preference_row()).getText(),
				"Preference");
		Assert.assertEquals(
				driver.findElement(CirrusDCSPageObjects.getBasic_Info_Clock_Transaction_Configuration_row()).getText(),
				"Clock Transaction Configuration");
		Assert.assertEquals(driver.findElement(CirrusDCSPageObjects.getBasic_Info_API_Configuration_row()).getText(),
				"API Configuration");
	}

	@Then("^I Verfiy all fields under Basic Information rows are displayed$")
	public void I_Verfiy_all_fields_under_Basic_Information_rows_are_displayed() throws InterruptedException {
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getBasic_Information_Client_logo()).isDisplayed());
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getBasic_Information_Client_code()).isDisplayed());
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getBasic_Information_Client_Name()).isDisplayed());
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getBasic_Information_Client_Type()).isDisplayed());
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.Basic_Information_Client_status()).isDisplayed());
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.Basic_Information_Client_display()).isDisplayed());
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.Basic_Information_Client_URL()).isDisplayed());
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.Basic_Information_Client_Supertenant_checkBox()).isDisplayed());

	}

	@Then("^I verify it is displaying the tenants according to the uploaded tenant's json file$")
	public void I_verify_it_is_displaying_the_tenants_according_to_uploaded_tenant_json_file()
			throws InterruptedException {

		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,-700)");
		// Thread.sleep(1000);
		driver.findElement(CirrusDCSPageObjects.getTenant_List_SearchBar()).clear();
		driver.findElement(CirrusDCSPageObjects.getTenant_List_SearchBar())
				.sendKeys(property.getProperty("uploadedtenantjsonfile"));
		driver.findElement(CirrusDCSPageObjects.getTenant_List_SearchBarsymbol()).click();

		Thread.sleep(2000);
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getTenant_List_Bar_ListofTenant_Name()).isDisplayed());
		driver.findElement(CirrusDCSPageObjects.getTenant_List_Bar_ListofTenant_Name()).click();
		Thread.sleep(2000);
		String Name = driver.findElement(CirrusDCSPageObjects.getRespected_tenant_code()).getText();
		System.out.println(Name);

	}

	@Then("^I verify pop up screen of Import New Tenant button displayed with the all the fields$")
	public void I_verify_pop_up_screen_of_Import_New_Tenant_button_displayed_with_the_all_the_fields()
			throws InterruptedException {
		wait.until(ExpectedConditions
				.visibilityOf(driver.findElement(CirrusDCSPageObjects.getImport_New_Tenant_TitleImport_Tenant())));

		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getImport_New_Tenant_TitleImport_Tenant()).isDisplayed());
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getImport_New_Tenant_cancelbtn()).isDisplayed());
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getImport_New_Tenant_Notes_Msg()).isDisplayed());
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getImport_New_Tenant_Choose_btn()).isDisplayed());
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getImport_New_Tenant_upload_btn()).isDisplayed());
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getImport_New_Tenant_cancel_btn()).isDisplayed());
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getImport_New_Tenant_close_btn()).isDisplayed());

	}

	@Then("^I click on the upload button which is available on the import Tenant pop up window$")
	public void I_click_on_the_upload_button_which_is_available_on_the_import_Tenant_pop_up_window()
			throws InterruptedException, AWTException {
		driver.findElement(CirrusDCSPageObjects.getImport_New_Tenant_upload_btn()).click();
		Thread.sleep(1000);
		driver.navigate().refresh();
	}

	@Then("^I click on the cancel button and verify that User is not able to view the client name in the tenant list$")
	public void I_click_on_the_cancel_button_and_verify_that_User_is_not_able_to_view_the_client_name_in_the_enant_list()
			throws InterruptedException, AWTException {
		driver.findElement(CirrusDCSPageObjects.getImport_New_Tenant_cancel_btn()).click();

	}

	@Then("^I verify User is able to import the new Tenant json file$")
	public void I_verify_User_is_able_to_import_the_new_Tenantand_its_display_into_the_tenant_List()
			throws InterruptedException, AWTException {

		driver.findElement(CirrusDCSPageObjects.getImport_New_Tenant_choose_button()).click();
		System.out.println("I clicked on Upload button");

		// control + c (copy)
		StringSelection sel = new StringSelection("C:\\Users\\rishikeshbm\\Downloads\\client_ZKTK.json");

		Toolkit.getDefaultToolkit().getSystemClipboard().setContents(sel, null);
		Thread.sleep(2000);

		// control + v and enter (paste)
		Robot rob = new Robot();
		rob.keyPress(KeyEvent.VK_CONTROL);
		rob.keyPress(KeyEvent.VK_V);
		rob.keyRelease(KeyEvent.VK_CONTROL);
		rob.keyRelease(KeyEvent.VK_V);
		Thread.sleep(2000);
		rob.keyPress(KeyEvent.VK_ENTER);
		rob.keyRelease(KeyEvent.VK_ENTER);

	}

//		WebElement element = driver.findElement(CirrusDCSPageObjects.getImport_New_Tenant_choose_button());
//		JavascriptExecutor executor = (JavascriptExecutor)driver;
//		executor.executeScript("arguments[0].click();", element);
//		
//		Robot r = new Robot();
//		r.setAutoDelay(2000);
//		StringSelection stringSelection = new StringSelection("C:\\Users\\rishikeshbm\\Downloads\\client_akkka.json");
//		Toolkit.getDefaultToolkit().getSystemClipboard().setContents(stringSelection, null);
//		r.setAutoDelay(1000);
//		
//		r.keyPress(KeyEvent.VK_CONTROL);
//		r.keyPress(KeyEvent.VK_V);
//		
//		r.keyRelease(KeyEvent.VK_CONTROL);
//		r.keyRelease(KeyEvent.VK_V);
//		
//		r.setAutoDelay(1000);
//		
//		
//		r.keyPress(KeyEvent.VK_ENTER);
//		r.keyRelease(KeyEvent.VK_ENTER);
//		
//		System.out.println("rishi");
//		Thread.sleep(5000);
//		
//		WebElement element1 = driver.findElement(By.xpath("(//button[@type='button'])[5]"));
//		JavascriptExecutor executor1 = (JavascriptExecutor)driver;
//		executor1.executeScript("arguments[0].click();", element1);
//		System.out.println("rishikesh");
//		Thread.sleep(5000);
//	

//		  
//	      r.keyPress(KeyEvent.VK_ENTER);
//	      r.keyRelease(KeyEvent.VK_ENTER);
//	      r.keyPress(KeyEvent.VK_CONTROL);
//	      r.keyPress(KeyEvent.VK_V);
//	      r.keyRelease(KeyEvent.VK_CONTROL);
//	      r.keyRelease(KeyEvent.VK_V);
//	      r.keyPress(KeyEvent.VK_ENTER);
//	      r.keyRelease(KeyEvent.VK_ENTER);		
//		

//		wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath("(//span[@class='ui-button ui-widget ui-state-default ui-corner-all ui-button-text-icon-left ui-fileupload-choose'])[2]"))));
//		WebElement sd =driver.findElement(By.xpath("(//span[@class='ui-button ui-widget ui-state-default ui-corner-all ui-button-text-icon-left ui-fileupload-choose'])[2]"));
//		Thread.sleep(4000);
//		sd.sendKeys("C:\\Users\\rishikeshbm\\Downloads\\client_CAN.json");
////		
//        System.out.println("Rishikesh");
////     	WebElement s = driver.findElement(CirrusDCSPageObjects.getImport_New_Tenant_uploadTenantJsonFile());
////        s.sendKeys("/CirrusDCS/src/test/resources/client_DO.json");
//		Thread.sleep(50000);
//		

	@Then("^I Click on the Close button and pop up window is getting disappeared$")
	public void I_Click_on_the_Close_button_and_pop_up_window_is_getting_disappeared() throws InterruptedException {

		driver.findElement(CirrusDCSPageObjects.getImport_New_Tenant_close_btn()).click();
		System.out.println("Pop up window is disappeared");
		Thread.sleep(1000);
		Assert.assertFalse(
				driver.findElement(CirrusDCSPageObjects.getImport_New_Tenant_TitleImport_Tenant()).isDisplayed());
	}

	@Then("^I Verify user is able to view that first tenant in the list is selected by default")
	public void I_Verify_user_is_able_to_view_that_first_tenant_in_the_list_is_selected_by_default()
			throws InterruptedException {

		String Tenant_Name_In_Tenant_List = driver
				.findElement(By.xpath("(//tbody[@id='clientListForm:tenantListTable_data']/tr/td[2])[1]")).getText();
		String Tenant_Name_In_Tenant_Information = driver
				.findElement(By.xpath("(//div[@class='col-md-5']/div/div[2])[1]")).getText();
		Assert.assertEquals(Tenant_Name_In_Tenant_List, Tenant_Name_In_Tenant_Information);
	}

	@Then("^I  Verify whether user is able to view that the Basic Info page is displaying by default in Tenant information page")
	public void I_Verify_whether_user_is_able_to_view_that_the_Basic_Info_page_is_displaying_by_default_in_Tenant_information_page()
			throws InterruptedException {

		String ss1 = driver.findElement(CirrusDCSPageObjects.getTenant_Information_Basic_Info()).getText();
		String ss = driver.findElement(CirrusDCSPageObjects.getTenant_Information_Basic_Info()).getAttribute("class");
		Assert.assertEquals(ss, property.getProperty("Basic_module_ClassAttribute"));
		System.out.println(ss1);

	}

	@Then("^I Verfiy whether is able to view the All the submanus under the Basic Info")
	public void I_Verfiy_whether_is_able_to_view_the_All_the_submanus_under_the_Basic_Info()
			throws InterruptedException {

		Assert.assertEquals(driver.findElement(CirrusDCSPageObjects.getBasic_info_basicInformation()).getText(),
				property.getProperty("Submenu1"));
		Assert.assertEquals(driver.findElement(CirrusDCSPageObjects.getBasic_info_AddressInformation()).getText(),
				property.getProperty("Submenu2"));
		Assert.assertEquals(driver.findElement(CirrusDCSPageObjects.getBasic_info_Preference_row()).getText(),
				property.getProperty("Submenu3"));
		Assert.assertEquals(
				driver.findElement(CirrusDCSPageObjects.getBasic_info_Clock_Transaction_Configuration()).getText(),
				property.getProperty("Submenu4"));
		Assert.assertEquals(driver.findElement(CirrusDCSPageObjects.getBasic_info_API_Configuration()).getText(),
				property.getProperty("Submenu5"));

		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getBasic_info_basicInformation_code()).isDisplayed());
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getBasic_info_basicInformation_Type()).isDisplayed());
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getBasic_info_basicInformation_status()).isDisplayed());
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getBasic_info_basicInformation_name()).isDisplayed());
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getBasic_info_basicInformation_URL()).isDisplayed());
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getBasic_info_basicInformation_superTenant()).isDisplayed());

		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getBasic_info_AddressInformation_Address1()).isDisplayed());
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getBasic_info_AddressInformation_Address2()).isDisplayed());
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getBasic_info_AddressInformation_Address3()).isDisplayed());
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getBasic_info_AddressInformation_City()).isDisplayed());
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getBasic_info_AddressInformation_State()).isDisplayed());
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getBasic_info_AddressInformation_Country()).isDisplayed());
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getBasic_info_AddressInformation_Zip_Code()).isDisplayed());
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getBasic_info_AddressInformation_phone()).isDisplayed());

		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getBasic_info_Preference_Date_Format()).isDisplayed());
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getBasic_info_Preference_Time_Format()).isDisplayed());

		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getBasic_info_Clock_Transaction_Configuration_Block_Init_Push())
						.isDisplayed());
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getBasic_info_Clock_Transaction_Configuration_BlockHeartBeat())
						.isDisplayed());
		Assert.assertTrue(driver
				.findElement(CirrusDCSPageObjects.getBasic_info_Clock_Transaction_Configuration_Block_Time_Request())
				.isDisplayed());

		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getBasic_info_API_Configuration_Api_Key()).isDisplayed());
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getBasic_info_API_Configuration_Generate_Api_key())
				.isDisplayed());
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getBasic_info_API_Save()).isDisplayed());
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getBasic_info_API_Cancel()).isDisplayed());

	}

	@Then("^I Click on the Export submenu")
	public void I_Click_on_the_Export_submenu() {
		driver.findElement(CirrusDCSPageObjects.getExportMenu()).click();
	}

	@Then("^I verify user is able to download the tenant json file")
	public void I_verify_user_is_able_to_download_the_tenant_json_file() throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();",
				driver.findElement(CirrusDCSPageObjects.getExportMenu_Client_As_Json()));

//	   ChromeOptions options = new ChromeOptions();  
//	   Map<String, Object> prefs = new HashMap<String, Object>();
//       prefs.put("download.prompt_for_download", true);
//       options.setExperimentalOption("prefs", prefs);
//       driver = new ChromeDriver(options);
//       driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
//       System.out.println("Tenant file download succesfully");
//       Thread.sleep(2000);
//       driver.quit();  

		String filename = "client_ZKTK.json";
		String downloadPath = "C:\\Users\\rishikeshbm\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;
		for (int i = 0; i < len; i++) {
			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}

	@Then("^I Click on the Module menu and verify all the webelement")
	public void I_Click_on_the_Module_menu_and_verify_all_the_webelement() throws InterruptedException {

		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getTenant_Module()).isDisplayed());
		driver.findElement(CirrusDCSPageObjects.getTenant_Module()).click();
		wait.until(ExpectedConditions
				.visibilityOf(driver.findElement(CirrusDCSPageObjects.getTenant_Module_ModuleName())));
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_ModuleName()).isDisplayed();
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getTenant_Module_Action()).isDisplayed());
		List<WebElement> List_of_Module = driver
				.findElements(CirrusDCSPageObjects.getTenant_Module_List_Of_modulesName());
		for (WebElement moduleName : List_of_Module) {

			wait.until(ExpectedConditions.visibilityOf(moduleName));
			String moduleName1 = moduleName.getText();

			switch (moduleName1) {

			case "Agency":
				Assert.assertEquals(moduleName1, "Agency");
				System.out.println(moduleName1);
				break;
			case "Rounding Rules":
				Assert.assertEquals(moduleName1, "Rounding Rules");
				System.out.println(moduleName1);
				break;
			case "Shift Schedule":
				Assert.assertEquals(moduleName1, "Shift Schedule");
				System.out.println(moduleName1);
				break;
			case "Visitor":
				Assert.assertEquals(moduleName1, "Visitor");
				System.out.println(moduleName1);
				break;

			}
		}
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getTenant_Module_List_Of_modulesName_Select_Btn())
				.isDisplayed());
		List<WebElement> s = driver
				.findElements(CirrusDCSPageObjects.getTenant_Module_List_Of_modulesName_Select_Btn());
		for (WebElement ds : s) {
			System.out.println(ds.isEnabled());
		}
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getTenant_Module_Save()).isDisplayed());
	}

	@Then("^I Click on the module btn")
	public void I_Click_on_the_module_btn() throws InterruptedException {
		driver.findElement(CirrusDCSPageObjects.getTenant_Module()).click();

	}

	@Then("^I Select actions column for tenant module")
	public void I_Select_actions_column_for_tenant_module() throws InterruptedException {
		List<WebElement> ModulesName = driver
				.findElements(By.xpath("//form[@id='tenantinfo:tenantModulesForm']/table/tbody/tr/td[2]/div/div[2]"));
		for (int i = 0; i < ModulesName.size(); i++) {
			ModulesName.get(i).click();
			Thread.sleep(1000);
		}
		for (int i = 0; i < ModulesName.size(); i++) {
			className2 = ModulesName.get(i).getAttribute("class");
		}

	}

	@Then("^I click on the save btn which is available on the Module page")
	public void I_click_on_the_save_btn_which_is_available_on_the_Module_page() throws InterruptedException {
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(CirrusDCSPageObjects.getTenant_Module_Save())));
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Save()).click();
	}

	@Then("^I verify confirmation pop up window  and all the webelement is displayed")
	public void I_verify_confirmation_pop_up_window_and_all_the_webelement_is_displayed() throws InterruptedException {
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getTenant_Module_Save_confirmation()).isDisplayed());
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getTenant_Module_Save_confirmation_cross()).isDisplayed());
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getTenant_Module_Save_confirmation_Yes()).isDisplayed());
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getTenant_Module_Save_confirmation_No()).isDisplayed());
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getTenant_Module_Save_confirmation_Areyousureyouwanttosave())
						.isDisplayed());
	}

	@Then("^I click on the yes btn which is available on the confirmation pop up window")
	public void I_click_on_the_yes_btn_which_is_available_on_the_confirmation_pop_up_window()
			throws InterruptedException {
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getTenant_Module_Save_confirmation()).isDisplayed());
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Save_confirmation_Yes()).click();
		String msg = driver.findElement(By.xpath("//div[@class='ui-growl-message']")).getText();
		System.out.println(msg);
	}

	@Then("^I verify after the clicking on the yes btn and successful msg is displayed")
	public void I_verify_after_the_clicking_on_the_yes_btn_and_successful_msg_is_displayed()
			throws InterruptedException {
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Save_confirmation_Yes()).click();
		wait.until(ExpectedConditions.visibilityOf(
				driver.findElement(CirrusDCSPageObjects.getTenant_Module_Save_confirmation_Yes_successfulMsg())));
		String msg = driver.findElement(CirrusDCSPageObjects.getTenant_Module_Save_confirmation_Yes_successfulMsg())
				.getText();
		System.out.println(msg);
	}

	@Then("^I verify after the clicking on the No btn and Confirmation page is disappeared from the screen")
	public void I_verify_after_the_clicking_on_the_No_btn_and_Confirmation_page_is_disappeared_from_the_screen()
			throws InterruptedException {
		wait.until(ExpectedConditions
				.visibilityOf(driver.findElement(CirrusDCSPageObjects.getTenant_Module_Save_confirmation_No())));
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Save_confirmation_No()).click();
		Thread.sleep(1000);
		System.out.println(driver.findElement(CirrusDCSPageObjects.getTenant_Module_Save_confirmation()).isDisplayed());
		Assert.assertFalse(driver.findElement(CirrusDCSPageObjects.getTenant_Module_Save_confirmation()).isDisplayed());
	}

	@Then("^I verify after the clicking on the job menu and all the present columns are displayed")
	public void I_verify_after_the_clicking_on_the_job_menu_and_all_the_present_columns_are_displayed()
			throws InterruptedException {
		wait.until(
				ExpectedConditions.visibilityOf(driver.findElement(CirrusDCSPageObjects.getTenant_Information_Jobs())));
		driver.findElement(CirrusDCSPageObjects.getTenant_Information_Jobs()).click();
		List<WebElement> List_of_columns = driver
				.findElements(CirrusDCSPageObjects.getTenant_Module_Jobs_ListOF_columns());

		for (int i = 0; i < List_of_columns.size(); i++) {
			WebElement columns = List_of_columns.get(i);
			String columnsName = columns.getText();
			switch (columnsName) {

			case " Job ID":
				Assert.assertEquals(columnsName, " Job ID");
				break;
			case " Role Key":
				Assert.assertEquals(columnsName, " Role Key");
				break;
			case " Parameter":
				Assert.assertEquals(columnsName, " Parameter");
				break;
			case " Time Schedule":
				Assert.assertEquals(columnsName, " Time Schedule");
				break;
			case " Status":
				Assert.assertEquals(columnsName, " Status");
				break;
			case "Actions":
				Assert.assertEquals(columnsName, "Actions");
				break;

			}
		}
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_Create_Default_Jobs()).isDisplayed());
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_New_Job()).isDisplayed());
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_Pagination_btn()).isDisplayed());
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_fast_backword_btn()).isDisplayed());
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_normal_backword_btn()).isDisplayed());
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_normal_forward_btn()).isDisplayed());
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_fast_forward_btn()).isDisplayed());

		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_Actions_Edit_btn()).isDisplayed());
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_Actions_cancel_btn()).isDisplayed());
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_Actions_logs_btn()).isDisplayed());
	}

	@Then("^I click on the Edit icon which is present on the Actions columns")
	public void I_click_on_the_Edit_icon_which_is_present_on_the_Actions_columns() throws InterruptedException {
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_Actions_Edit_btn()).click();
	}

	@Then("^I search the respected jobs and click on the delete icon")
	public void I_search_the_respected_jobs_and_click_on_the_delete_icon() throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,1000)");

		List<WebElement> btn = driver.findElements(By.xpath(
				"//div[@id='tenantinfo:cronJobListForm:cronJobListTable_paginator_bottom']/span[@class='ui-paginator-pages']/span"));
		for (int i = 1; i < btn.size(); i++) {
			btn.get(i).click();
			Thread.sleep(2000);
			List<WebElement> jobs = driver
					.findElements(By.xpath("//tbody[@id='tenantinfo:cronJobListForm:cronJobListTable_data']/tr/td[1]"));

			List<WebElement> del = driver.findElements(
					By.xpath("//tbody[@id='tenantinfo:cronJobListForm:cronJobListTable_data']/tr/td/a[2]"));

			for (int j = 0; j < jobs.size(); j++) {
				String jonName1 = jobs.get(j).getText();
				System.out.println(jonName1);
				if (jonName1.equals("x xvcx")) {
					del.get(j).click();

				}
			}
			jobs.clear();

		}
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath("//span[text()='Confirmation']"))));
		Thread.sleep(2000);
		driver.findElement(By.xpath("(//button[@type='button'])[3]")).click();
		wait.until(ExpectedConditions
				.visibilityOf(driver.findElement(By.xpath("(//span[text()='Job Deleted Successfully'])[2]"))));
		Assert.assertEquals(driver.findElement(By.xpath("(//span[text()='Job Deleted Successfully'])[2]")).getText(),
				"Job Deleted Successfully");
	}

	@Then("^I click on the logs icon")
	public void I_click_on_the_logs_icon() throws InterruptedException {
		driver.findElement(By.xpath("//tbody[@id='tenantinfo:cronJobListForm:cronJobListTable_data']/tr[1]/td/a[3]"))
				.click();
		Thread.sleep(1000);
		// wait.until(ExpectedConditions.invisibilityOf(driver.findElement(By.xpath("
		// //(//div[@class='ui-dialog-content ui-widget-content'])[1]"))));

	}

	@Then("^I select the end date from the End Time drop down and data is displayed based on the date")
	public void I_select_the_end_date_from_the_End_Time_drop_down_and_data_is_displayed_based_on_the_date()
			throws InterruptedException {
		Thread.sleep(3000);
		wait.until(ExpectedConditions
				.visibilityOf(driver.findElement(By.xpath("//span[@id='tenantinfo:cronLogDetails_title']"))));
		driver.findElement(By.xpath("//label[@id='tenantinfo:cronLogDetailsForm:j_id_fl_label']")).click();
		List<WebElement> dates = driver
				.findElements(By.xpath("//ul[@id='tenantinfo:cronLogDetailsForm:j_id_fl_items']/li"));
		dates.get(0).click();

		Assert.assertTrue(driver.findElement(By.xpath("//tbody[@id='tenantinfo:cronLogDetailsForm:logTable_data']"))
				.isDisplayed());

	}

	@Then("^I verify all the fields are displayed in the view job logs page")
	public void I_verify_all_the_fields_are_displayed_in_the_view_job_logs_page() throws InterruptedException {
		wait.until(ExpectedConditions
				.visibilityOf(driver.findElement(By.xpath("//span[@id='tenantinfo:cronLogDetails_title']"))));
		List<WebElement> fields = driver
				.findElements(By.xpath("//table[@id='tenantinfo:cronLogDetailsForm:display']/tbody/tr/td"));
		Thread.sleep(5000);
		for (int i = 0; i < fields.size(); i++) {
			String fieldname = fields.get(i).getText();
			System.out.println(fieldname);
			j++;
		}
		List<WebElement> Name = driver
				.findElements(By.xpath("//table[@id='tenantinfo:cronLogDetailsForm:display']/tfoot/tr/td/label"));
		for (WebElement na : Name) {
			String name1 = na.getText();
			switch (name1) {
			case "Summary:":
				Assert.assertEquals(name1, "Summary:");
				System.out.println(name1);
				break;
			case "COMPLETED":
				Assert.assertEquals(name1, "COMPLETED");
				System.out.println(name1);
				break;

			}
		}
		Assert.assertTrue(
				driver.findElement(By.xpath("//input[@id='tenantinfo:cronLogDetailsForm:logTable:globalFilter']"))
						.isDisplayed());
		List<WebElement> colunmName = driver
				.findElements(By.xpath("//thead[@id='tenantinfo:cronLogDetailsForm:logTable_head']/tr/th"));
		for (WebElement column : colunmName) {
			String colum = column.getText();
			switch (colum) {
			case "Log Time":
				Assert.assertEquals(colum, "Log Time");
				System.out.println(colum);
				break;
			case "Log Message":
				Assert.assertEquals(colum, "Log Message");
				System.out.println(colum);
				break;
			case "Employee Number":
				Assert.assertEquals(colum, "Employee Number");
				System.out.println(colum);
				break;
			}
		}
		WebElement backbtn = driver
				.findElement(By.xpath("//div[@id='tenantinfo:cronLogDetailsForm:logTable_paginator_bottom']/span[2]"));
		Assert.assertTrue(backbtn.isDisplayed());
		WebElement forwordbtn = driver
				.findElement(By.xpath("//div[@id='tenantinfo:cronLogDetailsForm:logTable_paginator_bottom']/span[4]"));
		Assert.assertTrue(forwordbtn.isDisplayed());
		System.out.println("Rishikesh");
	}

	@Then("^I verify that edit window displayed with its respected fields")
	public void I_verify_that_edit_window_displayed_with_its_respected_fields() throws InterruptedException {
		Thread.sleep(5000);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,1000)");

		List<WebElement> fields = driver.findElements(CirrusDCSPageObjects.Tenant_Module_Jobs_Edit_fields());
		for (WebElement field : fields) {
			System.out.println(field.getText());
			Assert.assertTrue(field.isDisplayed());
		}
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_New_Job_SAVE_Job_btn()).isDisplayed());
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_New_Job_Cancel_btn()).isDisplayed());

	}

	@Then("^I visit job menu page")
	public void I_visit_job_menu_page() throws InterruptedException {
		wait.until(
				ExpectedConditions.visibilityOf(driver.findElement(CirrusDCSPageObjects.getTenant_Information_Jobs())));
		driver.findElement(CirrusDCSPageObjects.getTenant_Information_Jobs()).click();
	}

	@Then("^I Verify that user is able to change the job status")
	public void I_Verify_that_user_is_able_to_change_the_job_status() throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,1000)");

		List<WebElement> btn = driver.findElements(By.xpath(
				"//div[@id='tenantinfo:cronJobListForm:cronJobListTable_paginator_bottom']/span[@class='ui-paginator-pages']/span"));
		for (int i = 1; i < btn.size(); i++) {
			btn.get(i).click();
			Thread.sleep(2000);
			List<WebElement> jobs1 = driver
					.findElements(By.xpath("//tbody[@id='tenantinfo:cronJobListForm:cronJobListTable_data']/tr/td[1]"));

			List<WebElement> status1 = driver.findElements(
					By.xpath("//tbody[@id='tenantinfo:cronJobListForm:cronJobListTable_data']/tr/td[5]/a/span"));

			for (int j = 1; j < jobs1.size(); j++) {
				String jonName1 = jobs1.get(j).getText();
				if (jonName1.equals("Rishi_ZKTK")) {
					Afterchange_statusName = status1.get(i).getText();
					System.out.println(Afterchange_statusName);
				}
			}
			jobs1.clear();
			Thread.sleep(2000);

		}
		Assert.assertNotEquals(statusName, Afterchange_statusName);

	}

	@Then("^I click on the perticular jobs")
	public void I_click_on_the_perticular_jobs() throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,1000)");

		List<WebElement> btn = driver
				.findElements(CirrusDCSPageObjects.getTenant_Module_Jobs_menu_pagination_btn_list());
		for (int i = 1; i < btn.size(); i++) {
			btn.get(i).click();
			Thread.sleep(2000);
			List<WebElement> jobs = driver.findElements(CirrusDCSPageObjects.getTenant_Module_Jobs_job_ID_list());

			List<WebElement> status = driver
					.findElements(CirrusDCSPageObjects.getTenant_Module_Jobs_job_ID_Status_list());
			for (int j = 1; j < jobs.size(); j++) {
				String jonName1 = jobs.get(j).getText();
				System.out.println(jonName1);
				if (jonName1.equals("Rishi_ZKTK")) {
					statusName = status.get(i).getText();
					System.out.println(statusName);
					Thread.sleep(2000);
					status.get(j).click();
					// wait.until(ExpectedConditions.invisibilityOf(driver.findElement(By.xpath("//(//div[@class='ui-dialog-content
					// ui-widget-content'])[1]"))));
					Thread.sleep(1000);
					String statusName1 = status.get(i).getText();
					System.out.println(statusName1);
				}
			}
			jobs.clear();
			Thread.sleep(2000);

		}
		driver.navigate().refresh();
	}

	@Then("^I verify after the clicking on the jobs log and logs page is displayed")
	public void I_verify_after_the_clicking_on_the_jobs_log_and_logs_page_is_displayed() throws InterruptedException {
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_Actions_logs_btn()).click();
		wait.until(ExpectedConditions.visibilityOf(
				driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_Actions_logs_btn_logsPage())));
		String s = driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_Actions_logs_btn_logsPage()).getText();
		System.out.println(s);
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_Actions_logs_btn_logsPage())
				.isDisplayed());
	}

	@Then("^I click on the New Job button and Verify that all the fields are displayed")
	public void I_click_on_the_New_Job_button_and_Verify_that_all_the_fields_are_displayed()
			throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,1000)");
		wait.until(ExpectedConditions
				.visibilityOf(driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_New_Job())));
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_New_Job()).click();

		wait.until(ExpectedConditions
				.visibilityOf(driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_New_Job_New_job_txt())));

		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_New_Job_New_job_txt()).isDisplayed());
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_New_Job_Job_Name_field()).isDisplayed());
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_New_Job_Parameter_field()).isDisplayed());
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_New_Job_Role_Key_field()).isDisplayed());
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_New_Job_Processor_Role_Key_field())
						.isDisplayed());
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_New_Job_Schedule_Type_field())
				.isDisplayed());
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_New_Job_Run_ON_field()).isDisplayed());
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_New_Job_Active_field()).isDisplayed());
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_New_Job_SAVE_Job_btn()).isDisplayed());
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_New_Job_Cancel_btn()).isDisplayed());

	}

	@Then("^I double click on the logo pic")
	public void I_double_click_on_the_logo_pic() throws InterruptedException {
		Actions act = new Actions(driver);
		WebElement ele = driver.findElement(CirrusDCSPageObjects.getBasic_Information_Client_logo());
		act.doubleClick(ele).perform();
	}

	@Then("^Upload logo window is displayed")
	public void Upload_logo_window_is_displayed() throws InterruptedException {
		String msg = driver.findElement(CirrusDCSPageObjects.getBasic_Info_Client_logo_upload_title_name()).getText();
		System.out.println(msg);
	}

	@Then("^I click on the upload button which is available on the upload logo wiondow")
	public void I_click_on_the_upload_button_which_is_available_on_the_upload_logo_wiondow()
			throws InterruptedException, AWTException {
		driver.findElement(CirrusDCSPageObjects.getBasic_Info_Client_logo_upload_upload_btn()).click();
		System.out.println("Rishikesh");
	}

	@Then("^I click on the choose button which is available on the upload logo window")
	public void I_click_on_the_choose_button_which_is_available_on_the_upload_logo_window()
			throws InterruptedException, AWTException {
		driver.findElement(CirrusDCSPageObjects.getBasic_Info_Client_logo_upload_choose_btn()).click();
		System.out.println("I clicked on Upload button");

		// control + c (copy)
		StringSelection sel = new StringSelection("C:\\Users\\rishikeshbm\\Downloads\\DCBT-1384(d).png");

		Toolkit.getDefaultToolkit().getSystemClipboard().setContents(sel, null);
		Thread.sleep(2000);

		// control + v and enter (paste)
		Robot rob = new Robot();
		rob.keyPress(KeyEvent.VK_CONTROL);
		rob.keyPress(KeyEvent.VK_V);
		rob.keyRelease(KeyEvent.VK_CONTROL);
		rob.keyRelease(KeyEvent.VK_V);
		Thread.sleep(2000);
		rob.keyPress(KeyEvent.VK_ENTER);
		rob.keyRelease(KeyEvent.VK_ENTER);
	}

	@Then("^I Verify user is able to click on the choose button and select valid file")
	public void I_Verify_user_is_able_to_click_on_the_choose_button_and_select_valid_file()
			throws InterruptedException {

	}

	@Then("^I Verify that user is able to check logo is displayed")
	public void I_Verify_that_user_is_able_to_check_logo_is_displayed() throws InterruptedException {

		WebElement i = driver.findElement(By.id("tenantinfo:tenantInfoForm:clientLogo"));
		// Javascript executor to check image
		Boolean p = (Boolean) ((JavascriptExecutor) driver).executeScript("return arguments[0].complete "
				+ "&& typeof arguments[0].naturalWidth != \"undefined\" " + "&& arguments[0].naturalWidth > 0", i);

		// verify if status is true
		if (p) {
			System.out.println("Logo display");
		} else {
			System.out.println("Logo not present");
		}

	}

	@Then("^I click on the cancel btn in the client logo window")
	public void I_click_on_the_cancel_btn_in_the_client_logo_window() throws InterruptedException {
		driver.findElement(CirrusDCSPageObjects.getBasic_Info_Client_logo_upload_logo_cancel_btn()).click();
		Thread.sleep(1000);
		Assert.assertFalse(
				driver.findElement(CirrusDCSPageObjects.getBasic_Info_Client_logo_upload_logo()).isDisplayed());
	}

	@Then("^I verify that respected logo is not displayed")
	public void I_verify_that_respected_logo_is_not_displayed() throws InterruptedException {

	}

	@Then("^I Login to the Tenant account")
	public void I_Login_to_the_Tenant_account() throws InterruptedException {

	}

	@Then("^I Click on the Account")
	public void I_Click_on_the_Account() throws InterruptedException {
		driver.findElement(By.xpath("//ul[@id='zkMenu']/li[9]/a")).click();
	}

	@Then("^I click on the Account setup Page")
	public void I_click_on_the_Account_setup_Page() throws InterruptedException {
		driver.findElement(By.xpath("//ul[@id='zkMenu']/li[9]/ul/li[1]/a")).click();
		Thread.sleep(2000);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,document.body.scrollHeight)");
		Thread.sleep(2000);
		actualClientlogo = driver.findElement(By.xpath("//img[@id='tenantinfo:j_id_16:clientLogo']"));
		Screenshot1 = new AShot().takeScreenshot(driver, actualClientlogo);
	}

	@Then("^I verify User is able to view the same logo in the resepected tenant Account setup page")
	public void I_verify_User_is_able_to_view_the_same_logo_in_the_resepected_tenant_Account_setup_page()
			throws InterruptedException, IOException {
		Thread.sleep(2000);
		BufferedImage expectedImage = ImageIO
				.read(new File("D://1//Official Automation Work//Cirrus_DCS//CirrusDCS//src//test/clientlogo.jpg"));

		BufferedImage actualImage = Screenshot1.getImage();

		ImageDiffer imgDiff = new ImageDiffer();
		ImageDiff diff = imgDiff.makeDiff(actualImage, expectedImage);

		if (diff.hasDiff() == true) {
			System.out.println("Images are same");

		} else {
			System.out.println("Images are different");
		}
		Thread.sleep(2000);
		System.out.println("Rishikesh");
	}

	@Then("^I Verify all the fields in the logo pic window is displayed")
	public void I_Verify_all_the_fields_in_the_logo_pic_window_is_displayed() throws InterruptedException {
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getBasic_Info_Client_logo_upload_logo()).isDisplayed());
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getBasic_Info_Client_logo_upload_logo_Instruction_txt())
						.isDisplayed());
		String ssd = driver.findElement(CirrusDCSPageObjects.getBasic_Info_Client_logo_upload_logo_Instruction_txt())
				.getText();
		System.out.println(ssd);
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getBasic_Info_Client_logo_upload_logo_choose_btn())
				.isDisplayed());
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getBasic_Info_Client_logo_upload_logo_upload_btn())
				.isDisplayed());
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getBasic_Info_Client_logo_upload_logo_cancel_btn())
				.isDisplayed());
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getBasic_Info_Client_logo_upload_logo_close_btn())
				.isDisplayed());
	}

	@Then("^I Click on the close btn and upload logo page is disappeared")
	public void I_Click_on_the_close_btn_and_upload_logo_page_is_disappeared() throws InterruptedException {
		driver.findElement(CirrusDCSPageObjects.getBasic_Info_Client_logo_upload_logo_close_btn()).click();
		wait.until(ExpectedConditions
				.invisibilityOf(driver.findElement(CirrusDCSPageObjects.getBasic_Info_Client_logo_upload_logo())));
		Assert.assertFalse(
				driver.findElement(CirrusDCSPageObjects.getBasic_Info_Client_logo_upload_logo()).isDisplayed());

	}

	@Then("^I click on the client code and verify that code is not editable")
	public void I_click_on_the_client_code_and_verify_that_code_is_not_editable() throws InterruptedException {
		driver.findElement(CirrusDCSPageObjects.getBasic_Information_Client_code()).click();
		Thread.sleep(1000);
		WebElement code = driver.findElement(CirrusDCSPageObjects.getBasic_Info_Client_code_status());
		code.click();
		String ds = code.getAttribute("class");
		if (ds.contains("disabled")) {
			System.out.println("use can not be edit the code");
		} else {
			System.out.println("code is editable");
		}

	}

	@Then("^I click on the create default jobs button and Verify that default jobs are updated successfully")
	public void I_click_on_the_create_default_jobs_button_and_Verify_that_default_jobs_are_updated_successfully()
			throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,1000)");
		wait.until(ExpectedConditions
				.visibilityOf(driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_Create_Default_Jobs())));
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_Create_Default_Jobs()).click();
		wait.until(ExpectedConditions.visibilityOf(
				driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_Create_Default_Jobs_Yes_btn())));
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_Create_Default_Jobs_Yes_btn()).click();

		wait.until(ExpectedConditions.visibilityOf(
				driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_Create_Default_Jobs_successfulmsg())));
		String msg = driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_Create_Default_Jobs_successfulmsg())
				.getText();
		System.out.println(msg);

	}

	@Then("^I verify the Export Client As Json button is displaying")
	public void I_verify_the_Export_Client_As_Json_button_is_displaying() throws InterruptedException {
		String btnName = driver.findElement(CirrusDCSPageObjects.getExportMenu_Client_As_Json()).getText();
		Assert.assertEquals(btnName, "Export Client As Json");
		System.out.println(btnName);
	}

	@Then("^I click on the New Job button and fill all the required fields and jobs create successfully")
	public void I_click_on_the_New_Job_button_and_fill_all_the_required_fields_and_jobs_create_successfully()
			throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,2000)");
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_New_Job()).click();

		Thread.sleep(3000);
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_New_Job_Job_Name_field())
				.sendKeys(SignUpFirstName);

		wait.until(ExpectedConditions
				.visibilityOf(driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_New_Job_Role_Key_field())));
		Thread.sleep(1000);
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_New_Job_Role_Key_field())
				.sendKeys(SignUpFirstName);
		Thread.sleep(1000);
		JavascriptExecutor js1 = (JavascriptExecutor) driver;
		js1.executeScript("window.scrollBy(0,2000)");

		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_New_Job_Active_field()).click();
		Thread.sleep(1000);

		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_New_Job_SAVE_Job_btn()).click();

		wait.until(ExpectedConditions.visibilityOf(
				driver.findElement(CirrusDCSPageObjects.Tenant_Module_Jobs_New_Job_job_creation_successfully_msg())));
		String msg = driver.findElement(CirrusDCSPageObjects.Tenant_Module_Jobs_New_Job_job_creation_successfully_msg())
				.getText();
		System.out.println(msg);

	}

	@Then("^I click on the New Job button and click on the save btn without fill all the required fields")
	public void I_click_on_the_New_Job_button_and_click_on_the_save_btn_without_fill_all_the_required_fields()
			throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,10000)");
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_New_Job()).click();
		Thread.sleep(3000);

		JavascriptExecutor js1 = (JavascriptExecutor) driver;
		js1.executeScript("window.scrollBy(0,10000)");
		WebElement savebtn = driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_New_Job_SAVE_Job_btn());
		savebtn.click();

	}

	@Then("^I verify that alert msg is displayed")
	public void I_verify_that_alert_msg_is_displayed() throws InterruptedException {
		Thread.sleep(2000);
		String roleNamemsg = driver
				.findElement(CirrusDCSPageObjects.Tenant_Module_Jobs_New_Job_job_creation_Job_name_alert_msg())
				.getText();
		Assert.assertEquals(roleNamemsg, "Job Name is Required");
		String rolekeymsg = driver
				.findElement(CirrusDCSPageObjects.Tenant_Module_Jobs_New_Job_job_creation_Role_Key_alert_msg())
				.getText();
		Assert.assertEquals(rolekeymsg, "Role Key is Required");
		System.out.println(roleNamemsg);
		System.out.println(rolekeymsg);
	}

	@Then("^I click on the New Job button and click on the Schedule Type field")
	public void I_click_on_the_New_Job_button_and_click_on_the_Schedule_Type_field() throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		// js.executeScript("window.scrollBy(0,10000)");
		js.executeScript("window.scrollTo(0, document.body.scrollHeight)");
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_New_Job()).click();
		Thread.sleep(3000);

	}

	@Then("^I verify that all the schedule types options are displayed")
	public void I_verify_that_all_the_schedule_types_options_are_displayed() throws InterruptedException {
		Thread.sleep(1000);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,1000)");
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_New_Job_Schedule_Type_field()).click();
		List<WebElement> list = driver
				.findElements(CirrusDCSPageObjects.getTenant_Module_Jobs_New_Job_Schedule_Type_field_dropdown());
		for (WebElement l : list) {
			String scheduleoption = l.getText();
			switch (scheduleoption) {

			case "Minutes":
				Assert.assertEquals(scheduleoption, "Minutes");
				System.out.println(scheduleoption);
				break;
			case "Hours":
				Assert.assertEquals(scheduleoption, "Hours");
				System.out.println(scheduleoption);
				break;
			case "Manual":
				Assert.assertEquals(scheduleoption, "Manual");
				System.out.println(scheduleoption);
				break;
			}
		}
	}

	@Then("^I verify that all the Run on options for Minute schedule type is displaayed")
	public void I_verify_that_all_the_Run_on_options_for_Minute_schedule_type_is_displaayed()
			throws InterruptedException {
		Thread.sleep(1000);
		JavascriptExecutor js1 = (JavascriptExecutor) driver;
		js1.executeScript("window.scrollBy(0,1000)");
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_New_Job_Run_ON_field()).click();
		List<WebElement> minuteoptins = driver.findElements(By.xpath("//li[contains(text(),'Minute')]"));

		for (WebElement minuteoptin : minuteoptins) {
			JavascriptExecutor js = (JavascriptExecutor) driver;
			js.executeScript("arguments[0].scrollIntoView();", minuteoptin);
			String minuteOption = minuteoptin.getText();
			System.out.println(minuteOption);
		}
	}

	@Then("^I verify that all the Run on options for hours schedule type is displaayed")
	public void I_verify_that_all_the_Run_on_options_for_hours_schedule_type_is_displaayed()
			throws InterruptedException {
		Thread.sleep(1000);
		JavascriptExecutor js2 = (JavascriptExecutor) driver;
		js2.executeScript("window.scrollBy(0,1000)");
		driver.findElement(By.xpath("//label[text()='Minutes']")).click();
		Thread.sleep(1000);

		List<WebElement> list = driver
				.findElements(CirrusDCSPageObjects.getTenant_Module_Jobs_New_Job_Schedule_Type_field_dropdown());
		WebElement hr = list.get(1);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].scrollIntoView();", hr);
		hr.click();
		Thread.sleep(1000);

		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_New_Job_Run_ON_field()).click();
		List<WebElement> houroptins = driver.findElements(By.xpath("//li[contains(text(),'Hour')]"));

		Thread.sleep(1000);
		for (WebElement hroptin : houroptins) {
			JavascriptExecutor js1 = (JavascriptExecutor) driver;
			js1.executeScript("arguments[0].scrollIntoView();", hroptin);
			String HROptin = hroptin.getText();
			System.out.println(HROptin);
		}
	}

	@Then("^I click on the active field$")
	public void I_click_on_the_active_field() throws InterruptedException {
		Thread.sleep(1000);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,1000)");
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Jobs_New_Job_Active_field()).click();
		Thread.sleep(5000);
	}

	@Then("^I click on the Security submodule$")
	public void I_click_on_the_Security_submodule() throws InterruptedException {
		driver.findElement(CirrusDCSPageObjects.getTenant_Information_Security()).click();
	}

	@Then("^I verify all the fields in the security submodule is displayed$")
	public void I_verify_all_the_fields_in_the_security_submodule_is_displayed() throws InterruptedException {
		for (int j = 1; j <= 2; j++) {
			List<WebElement> item = driver.findElements(
					By.xpath("//div[@id='tenantinfo:tenantInfoSecurity:j_id_78_content']/div[" + j + "]/div"));
			for (WebElement itemName : item) {
				Assert.assertTrue(itemName.isDisplayed());
				String Name = itemName.getText();
				// System.out.println(Name);
			}

		}
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getSecurity_Save_btn()).isDisplayed());
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getSecurity_Cancel_btn()).isDisplayed());

	}

	@Then("^I click on the password strength and select all the dropdown value$")
	public void I_click_on_the_password_strength_and_select_all_the_dropdown_value() throws InterruptedException {
		driver.findElement(CirrusDCSPageObjects.getSecurity_Password_strength_options()).click();
		Thread.sleep(1000);
		driver.findElement(
				By.xpath("//label[@id='tenantinfo:tenantInfoSecurity:passwordStrength_label']//parent::div/div[3]"))
				.click();
		Thread.sleep(1000);
		List<WebElement> item = driver
				.findElements(CirrusDCSPageObjects.getTenant_Information_Security_list_password_option());
		for (WebElement Item : item) {
			String pwd = Item.getText();
			switch (pwd) {

			case "Normal":
				Assert.assertEquals(pwd, "Normal");
				break;
			case "Medium":
				Assert.assertEquals(pwd, "Medium");
				break;
			case "Strong":
				Assert.assertEquals(pwd, "Strong");
				break;

			}
		}
		item.get(2).click();
		Thread.sleep(1000);
		driver.findElement(CirrusDCSPageObjects.getTenant_Information_Security_Save()).click();
		wait.until(ExpectedConditions.visibilityOf(
				driver.findElement(CirrusDCSPageObjects.getTenant_Information_Security_successful_msg())));
		String ds = driver.findElement(CirrusDCSPageObjects.getTenant_Information_Security_successful_msg()).getText();
		System.out.println(ds);

	}

	@Then("^I click on the set password life span and select all the dropdown value$")
	public void I_click_on_the_set_password_life_span_and_select_all_the_dropdown_value() throws InterruptedException {
		String num = property.getProperty("PasswordLifeSpanDays");
		int number = Integer.parseInt(num);

		String no = driver.findElement(CirrusDCSPageObjects.getTenant_Information_Security_Password_life_span_day())
				.getText();
		int number1 = Integer.parseInt(no);

		driver.findElement(CirrusDCSPageObjects.getTenant_Information_Security_Password_Life_Span_Days_value()).click();
		if (number1 < number) {
			for (int i = number1; i < number; i++) {
				driver.findElement(By.xpath("//span[@id='tenantinfo:tenantInfoSecurity:passwordExpiry']/a[1]")).click();
			}
		} else if (number1 > number) {
			for (int i = number1; i > number; i--) {
				driver.findElement(By.xpath("//span[@id='tenantinfo:tenantInfoSecurity:passwordExpiry']/a[2]")).click();
			}
		} else {

		}
		driver.findElement(CirrusDCSPageObjects.getTenant_Information_Security_Password_save_btn()).click();
		Thread.sleep(2000);
		String no1 = driver
				.findElement(CirrusDCSPageObjects.getTenant_Information_Security_Password_Life_Span_Days_value())
				.getText();
		System.out.println(no1);
		Assert.assertEquals(no1, num);

	}

	@Then("^I click on the Track Interval and  set the value and validate it$")
	public void I_click_on_the_Track_Interval_and_set_the_value_and_validate_it() throws InterruptedException {
		String num = property.getProperty("TrackIntervalSecond");
		int number = Integer.parseInt(num);
		System.out.println(number);

		String no = driver.findElement(CirrusDCSPageObjects.getTenant_Information_Security_Track_interval_value())
				.getText();
		int number1 = Integer.parseInt(no);
		System.out.println("display " + number1);
		driver.findElement(By.xpath("//span[@id='tenantinfo:tenantInfoSecurity:j_id_85_display']")).click();

		if (number1 < number) {
			for (int i = number1; i < number; i++) {
				driver.findElement(By.xpath("//span[@id='tenantinfo:tenantInfoSecurity:j_id_85_content']/span/a[1]"))
						.click();
			}
		} else if (number1 > number) {
			for (int i = number1; i > number; i--) {
				driver.findElement(By.xpath("//span[@id='tenantinfo:tenantInfoSecurity:j_id_85_content']/span/a[2]"))
						.click();
			}
		} else {

		}
		driver.findElement(CirrusDCSPageObjects.getTenant_Information_Security_Password_save_btn()).click();
		Thread.sleep(2000);
		String no1 = driver.findElement(CirrusDCSPageObjects.getTenant_Information_Security_Track_interval_value())
				.getText();
		System.out.println(no1);
		Assert.assertEquals(no1, num);
	}

	@Then("^I click on the password length. and  set the value and validate it$")
	public void I_click_on_the_password_length_and_set_the_value_and_validate_it() throws InterruptedException {
		String num = property.getProperty("PasswordLength");
		int number = Integer.parseInt(num);
		System.out.println(number);

		String no = driver.findElement(CirrusDCSPageObjects.getTenant_Information_Security_Password_length()).getText();
		int number1 = Integer.parseInt(no);
		// System.out.println(number1);
		Thread.sleep(2000);
		driver.findElement(CirrusDCSPageObjects.getTenant_Information_Security_Password_length()).click();
		if (number1 < number) {
			for (int i = number1; i < number; i++) {
				driver.findElement(By.xpath("//span[@id='tenantinfo:tenantInfoSecurity:passwordLength']/a[1]")).click();
			}
		} else if (number1 > number) {
			for (int i = number1; i > number; i--) {
				driver.findElement(By.xpath("//span[@id='tenantinfo:tenantInfoSecurity:passwordLength']/a[2]")).click();
			}
		} else {

		}
		driver.findElement(CirrusDCSPageObjects.getTenant_Information_Security_Password_save_btn()).click();
		Thread.sleep(2000);
		String no1 = driver.findElement(CirrusDCSPageObjects.getTenant_Information_Security_Password_length())
				.getText();
		System.out.println(no1);
		Assert.assertEquals(no1, num);

	}

	@Then("^I click on the password Tacking and  set the value and validate it$")
	public void I_click_on_the_password_Tacking_and_set_the_value_and_validate_it() throws InterruptedException {
		String num = property.getProperty("PasswordTracking");
		int number = Integer.parseInt(num);
		System.out.println(number);

		String no = driver.findElement(CirrusDCSPageObjects.getTenant_Information_Security_Password_tracking_value())
				.getText();
		int number1 = Integer.parseInt(no);
		// System.out.println(number1);
		Thread.sleep(2000);
		driver.findElement(CirrusDCSPageObjects.getTenant_Information_Security_Password_tracking_value()).click();
		if (number1 < number) {
			for (int i = number1; i < number; i++) {
				driver.findElement(By.xpath("//span[@id='tenantinfo:tenantInfoSecurity:passwordHistory']/a[1]"))
						.click();
			}
		} else if (number1 > number) {
			for (int i = number1; i > number; i--) {
				driver.findElement(By.xpath("//span[@id='tenantinfo:tenantInfoSecurity:passwordHistory']/a[2]"))
						.click();
			}
		} else {

		}
		driver.findElement(CirrusDCSPageObjects.getTenant_Information_Security_Password_save_btn()).click();
		Thread.sleep(2000);
		String no1 = driver.findElement(CirrusDCSPageObjects.getTenant_Information_Security_Password_tracking_value())
				.getText();
		System.out.println(no1);
		Assert.assertEquals(no1, num);

	}

	@Then("^I click on the Max login trial attempt and set the value and validate it$")
	public void I_click_on_the_Max_login_trial_attempt_and_set_the_value_and_validate_it() throws InterruptedException {
		String num = property.getProperty("Maxlogintrialattempt");
		int number = Integer.parseInt(num);

		String no = driver
				.findElement(CirrusDCSPageObjects.getTenant_Information_Security_Max_login_trial_attempt_value())
				.getText();
		int number1 = Integer.parseInt(no);

		Thread.sleep(2000);
		driver.findElement(CirrusDCSPageObjects.getTenant_Information_Security_Max_login_trial_attempt_value()).click();
		if (number1 < number) {
			for (int i = number1; i < number; i++) {
				driver.findElement(By.xpath("//span[@id='tenantinfo:tenantInfoSecurity:loginTrial']/a[1]")).click();
				Thread.sleep(2000);
			}
		} else if (number1 > number) {
			for (int i = number1; i > number; i--) {
				driver.findElement(By.xpath("//span[@id='tenantinfo:tenantInfoSecurity:loginTrial']/a[2]")).click();
				Thread.sleep(2000);
			}
		} else {

		}
		driver.findElement(CirrusDCSPageObjects.getTenant_Information_Security_Password_save_btn()).click();
		Thread.sleep(2000);
		String no1 = driver
				.findElement(CirrusDCSPageObjects.getTenant_Information_Security_Max_login_trial_attempt_value())
				.getText();
		Assert.assertEquals(no1, num);
	}

	@Then("^I click on the Send Email when lockout and validate it in the tenant login page$")
	public void I_click_on_the_Send_Email_when_lockout_and_validate_it_in_the_tenant_login_page()
			throws InterruptedException {
		WebElement checkbox = driver.findElement(CirrusDCSPageObjects6
				.getTenantPage_Account_AccountSetup_Password_Polity_sendemailwhenlockedcheckbox_Field());
		checkbox.click();
		String classvalue = checkbox.getAttribute("class");
		Thread.sleep(2000);
		if (classvalue.contains("active")) {
			System.out.println("check box is enable");
		} else {
			System.out.println("check box is not enable");
		}
		Thread.sleep(2000);
		driver.findElement(CirrusDCSPageObjects.getTenant_Information_Security_Password_save_btn()).click();

	}

	@Then("^I click on the Send Email when lockout and validate it$")
	public void I_click_on_the_Send_Email_when_lockout_and_validate_it() throws InterruptedException {
		WebElement checkbox = driver
				.findElement(CirrusDCSPageObjects.getTenaant_Security_Send_Email_when_lockout_checkbox());
		checkbox.click();
		String classvalue = checkbox.getAttribute("class");
		Thread.sleep(2000);
		if (classvalue.contains("active")) {
			System.out.println("check box is enable");
		} else {
			System.out.println("check box is not enable");
		}
		Thread.sleep(2000);
		driver.findElement(CirrusDCSPageObjects.getTenant_Information_Security_Password_save_btn()).click();

	}

	@Then("^I click on the Lockout Interval and set the value and validate it$")
	public void I_click_on_the_Lockout_Interval_and_set_the_value_and_validate_it() throws InterruptedException {
		String num = property.getProperty("LockoutInterval");
		int number = Integer.parseInt(num);

		String no = driver.findElement(CirrusDCSPageObjects.getTenant_Information_Security_Lockout_Interval_Hrs_value())
				.getText();
		int number1 = Integer.parseInt(no);
		Thread.sleep(2000);
		driver.findElement(CirrusDCSPageObjects.getTenant_Information_Security_Lockout_Interval_Hrs_value()).click();
		if (number1 < number) {
			for (int i = number1; i < number; i++) {
				driver.findElement(By.xpath("//span[@id='tenantinfo:tenantInfoSecurity:lockoutInterval']/a[1]"))
						.click();
				Thread.sleep(2000);
			}
		} else if (number1 > number) {
			for (int i = number1; i > number; i--) {
				driver.findElement(By.xpath("//span[@id='tenantinfo:tenantInfoSecurity:lockoutInterval']/a[2]"))
						.click();
				Thread.sleep(2000);
			}
		} else {

		}
		driver.findElement(CirrusDCSPageObjects.getTenant_Information_Security_Password_save_btn()).click();
		Thread.sleep(2000);
		String no1 = driver
				.findElement(CirrusDCSPageObjects.getTenant_Information_Security_Lockout_Interval_Hrs_value())
				.getText();
		Assert.assertEquals(no1, num);
	}

	@Then("^I open the respected tenant account and check that validation$")
	public void I_open_the_respected_tenant_account_and_check_that_validation() throws InterruptedException {

		((JavascriptExecutor) driver).executeScript("window.open()");
		ArrayList<String> tabs = new ArrayList<>(driver.getWindowHandles());
		driver.switchTo().window(tabs.get(0));
		driver.close();
		driver.switchTo().window(tabs.get(1));
		String tenantUrl = property.getProperty("TenantLoginUrl");
		System.out.println(tenantUrl);
		driver.get(tenantUrl);
		String Wrongpassword = property.getProperty("TenantPassword") + 'a';
		String num = property.getProperty("Maxlogintrialattempt");
		int number = Integer.parseInt(num);
		for (int i = 0; i <= number; i++) {
			driver.findElement(CirrusDCSPageObjects.getTenant_account_userName())
					.sendKeys(property.getProperty("TenatUserName"));
			driver.findElement(CirrusDCSPageObjects.getTenant_account_Password()).sendKeys(Wrongpassword);
			driver.findElement(CirrusDCSPageObjects.getTenant_account_SignIn()).click();
			Thread.sleep(4000);
		}
		String msg = driver.findElement(CirrusDCSPageObjects.getTenant_account_msg()).getText();
		String lockedmsg = "Account is Locked";
		System.out.println(msg);
		Assert.assertEquals(msg, lockedmsg);

	}

	@Then("^I login to the tenant login with invalid credentials$")
	public void I_login_to_the_tenant_login_with_invalid_credentials() throws InterruptedException, AWTException {
		Robot robot = new Robot();
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_T);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		robot.keyRelease(KeyEvent.VK_T);
		ArrayList<String> tabs = new ArrayList<String>(driver.getWindowHandles());
		driver.switchTo().window(tabs.get(0));
		String tenantUrl = property.getProperty("TenantLoginUrl");
		driver.get(tenantUrl);
		Thread.sleep(2000);
		driver.findElement(By.xpath("(//input[@placeholder='Username'])[1]")).sendKeys(userId);
		driver.findElement(By.xpath("(//input[@placeholder='Password'])[1]")).sendKeys(password + 1);
		driver.findElement(By.xpath("(//button[@type='submit'])[1]")).click();
		Thread.sleep(4000);
	}

	@Then("^I login to the tenant login with valid credentials$")
	public void I_login_to_the_tenant_login_with_valid_credentials() throws InterruptedException, AWTException {

		Robot robot = new Robot();
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_T);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		robot.keyRelease(KeyEvent.VK_T);
		ArrayList<String> tabs = new ArrayList<String>(driver.getWindowHandles());
		driver.switchTo().window(tabs.get(0));
		String tenantUrl = property.getProperty("TenantLoginUrl");
		driver.get(tenantUrl);
		Thread.sleep(2000);
		driver.findElement(By.xpath("(//input[@placeholder='Username'])[1]")).sendKeys(userId);
		driver.findElement(By.xpath("(//input[@placeholder='Password'])[1]")).sendKeys(password);
		driver.findElement(By.xpath("(//button[@type='submit'])[1]")).click();
		Thread.sleep(4000);
	}

//	((JavascriptExecutor)driver).executeScript("window.open()");
//	ArrayList<String> tabs = new ArrayList<>(driver.getWindowHandles());
//	driver.switchTo().window(tabs.get(0));
//	driver.close();
//	driver.switchTo().window(tabs.get(1));
//    
//    	
//}
	@Then("^I verify that all the selected pages are enable or disable$")
	public void I_verify_that_all_the_selected_pages_are_enable_or_disable() throws InterruptedException, AWTException {

		if (className2.contains("active")) {
			driver.findElement(By.xpath("//ul[@id='zkMenu']/li[2]/a")).click();
			Thread.sleep(2000);
			driver.findElement(By.xpath("(//ul[@class='dropdown-menu'])[2]/li[7]/a")).click();
			String Name = driver.findElement(By.xpath("//span[text()='Rounding Rule List']")).getText();
			System.out.println(Name);
			Thread.sleep(2000);

			driver.findElement(By.xpath("//ul[@id='zkMenu']/li[2]/a")).click();
			Thread.sleep(2000);
			driver.findElement(By.xpath("(//ul[@class='dropdown-menu'])[2]/li[8]/a")).click();
			String Name1 = driver.findElement(By.xpath("//span[text()='Agency List']")).getText();
			System.out.println(Name1);
			Thread.sleep(2000);

			driver.findElement(By.xpath("//ul[@id='zkMenu']/li[5]/a")).click();
			Thread.sleep(2000);
			driver.findElement(By.xpath("(//ul[@class='dropdown-menu'])[5]/li[2]/a")).click();
			String Name2 = driver.findElement(By.xpath("//div[text()='Visitor Log Criteria']")).getText();
			System.out.println(Name2);
			Thread.sleep(2000);
		} else {
			driver.findElement(By.xpath("//ul[@id='zkMenu']/li[2]/a")).click();
			Thread.sleep(2000);
			driver.findElement(By.xpath("(//ul[@class='dropdown-menu'])[2]/li[7]/a")).click();
			String msq1 = driver.findElement(By.xpath("//div[@class='appTitle']")).getText();
			System.out.println(msq1);

			driver.findElement(By.xpath("//ul[@id='zkMenu']/li[2]/a")).click();
			Thread.sleep(2000);
			driver.findElement(By.xpath("(//ul[@class='dropdown-menu'])[2]/li[8]/a")).click();
			String msq2 = driver.findElement(By.xpath("//div[@class='appTitle']")).getText();
			System.out.println(msq2);

			driver.findElement(By.xpath("//ul[@id='zkMenu']/li[5]/a")).click();
			Thread.sleep(2000);
			driver.findElement(By.xpath("(//ul[@class='dropdown-menu'])[5]/li[2]/a")).click();
			String msq3 = driver.findElement(By.xpath("//div[@class='appTitle']")).getText();
			System.out.println(msq3);

		}
	}

	@Then("^I login to the particular tenant login with valid credentials$")
	public void I_login_to_the_particular_tenant_login_with_valid_credentials()
			throws InterruptedException, AWTException {
		Robot robot = new Robot();
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_T);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		robot.keyRelease(KeyEvent.VK_T);
		ArrayList<String> tabs = new ArrayList<String>(driver.getWindowHandles());
		driver.switchTo().window(tabs.get(0));
		String tenantUrl = property.getProperty("TenantLoginUrl");
		driver.get(tenantUrl);
		Thread.sleep(2000);
		driver.findElement(By.xpath("(//input[@placeholder='Username'])[1]"))
				.sendKeys(property.getProperty("TenatUserName"));
		driver.findElement(By.xpath("(//input[@placeholder='Password'])[1]"))
				.sendKeys(property.getProperty("TenantPassword"));
		driver.findElement(By.xpath("(//button[@type='submit'])[1]")).click();
		Thread.sleep(2000);
	}

	@Then("^I verify user is not able to login to the account$")
	public void I_verify_user_is_not_able_to_login_to_the_account() throws InterruptedException {
		String Msg = driver.findElement(By.xpath("//span[@class='zk_errorMessage']")).getText();
		System.out.println(Msg);
		Assert.assertEquals(Msg, "Invalid User");
	}

	@Then("^I verify user is able to login to the account$")
	public void I_verify_user_is__able_to_login_to_the_account() throws InterruptedException {
		Thread.sleep(2000);
		String Name = driver.findElement(By.xpath("//div[@class='loggedUsername']/span")).getText();
		System.out.println(Name);
		Assert.assertEquals(UserName, Name);
	}

	@Then("^I click on the Primay Contacts submodule$")
	public void I_click_on_the_Primay_Contacts_submodule() {
		driver.findElement(CirrusDCSPageObjects.getTenant_Information_Primary_Contacts_page()).click();
	}

	@Then("^Verify the all the buttons in Primary Contacts submodule$")
	public void Verify_the_all_the_buttons_in_Primary_Contacts_submodule() {
		List<WebElement> listOfBtn = driver
				.findElements(CirrusDCSPageObjects.getTenant_Information_Primary_Contacts_page_pagination_btn());
		for (WebElement btn : listOfBtn) {
			Assert.assertTrue(btn.isDisplayed());
		}

		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getTenant_Information_Primary_Contacts_page_addNew_btn())
						.isDisplayed());
	}

	@Then("^Verify the all the columns which is present in the primary Contacts page$")
	public void Verify_the_all_the_columns_which_is_present_in_the_primary_Contacts_page() {
		List<WebElement> columnsNames = driver
				.findElements(CirrusDCSPageObjects.getTenant_Information_Primary_Contacts_page_list_of_columns());

		for (WebElement columnsName : columnsNames) {
			String columnsName1 = columnsName.getText();
			switch (columnsName1) {

			case "Login ID":
				Assert.assertEquals(columnsName1, "Login ID");
				System.out.println(columnsName1);
				break;
			case "First Name":
				Assert.assertEquals(columnsName1, "First Name");
				System.out.println(columnsName1);
				break;
			case "Last Name":
				Assert.assertEquals(columnsName1, "Last Name");
				System.out.println(columnsName1);
				break;
			case "Email":
				Assert.assertEquals(columnsName1, "Email");
				System.out.println(columnsName1);
				break;
			case "Phone":
				Assert.assertEquals(columnsName1, "Phone");
				System.out.println(columnsName1);
				break;
			case "Primary":
				Assert.assertEquals(columnsName1, "Primary");
				System.out.println(columnsName1);
				break;
			case "Action":
				Assert.assertEquals(columnsName1, "Action");
				System.out.println(columnsName1);
				break;
			}
		}
	}

	@Then("^I click on the edit button in the Primary contacts submodule$")
	public void I_click_on_the_edit_button_in_the_Primary_contacts_submodule() {
		driver.findElement(CirrusDCSPageObjects.getTenant_Information_Primary_Contacts_page_edit_icon()).click();
	}

	@Then("^Verify the all the field after the clicking the Add button$")
	public void Verify_the_all_the_field_after_the_clicking_the_Add_button() throws InterruptedException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,1000)");
		Thread.sleep(1000);
		List<WebElement> fields = driver
				.findElements(CirrusDCSPageObjects.getTenant_Information_Primary_Contacts_page_present_fields());
		for (int i = 0; i < fields.size(); i++) {
			String field = fields.get(i).getText();
			System.out.println(field);
			switch (field) {

			case "User Id:*":
				Assert.assertEquals(field, "User Id:*");
				System.out.println(field);
				break;
			case "Client:":
				Assert.assertEquals(field, "Client:");
				System.out.println(field);
				break;
			case "ZKTK":
				Assert.assertEquals(field, "ZKTK");
				System.out.println(field);
				break;
			case "Login Id":
				Assert.assertEquals(field, "Login Id");
				System.out.println(field);
				break;
			case "(Login ID- auto created ID":
				Assert.assertEquals(field, "(Login ID- auto created ID");
				System.out.println(field);
				break;
			case "for user Interface Login)":
				Assert.assertEquals(field, "for user Interface Login)");
				System.out.println(field);
				break;
			case "First Name*":
				Assert.assertEquals(field, "First Name*");
				System.out.println(field);
				break;

			case "Last Name*":
				Assert.assertEquals(field, "Last Name*");
				System.out.println(field);
				break;
			case "Phone Number*":
				Assert.assertEquals(field, "Phone Number*");
				System.out.println(field);
				break;
			case "Email:*":
				Assert.assertEquals(field, "Email:*");
				System.out.println(field);
				break;
			case "Password:":
				Assert.assertEquals(field, "Password:");
				System.out.println(field);
				break;
			case "Confirm Password:":
				Assert.assertEquals(field, "Confirm Password:");
				System.out.println(field);
				break;
			case "Status:":
				Assert.assertEquals(field, "Status:");
				System.out.println(field);
				break;
			case "Active":
				Assert.assertEquals(field, "Active");
				System.out.println(field);
				break;
			case "Inactive":
				Assert.assertEquals(field, "Inactive");
				System.out.println(field);
				break;

			case "Account Non Expired :":
				Assert.assertEquals(field, "Account Non Expired :");
				System.out.println(field);
				break;
			case "Yes":
				Assert.assertEquals(field, "Yes");
				System.out.println(field);
				break;
			case "No":
				Assert.assertEquals(field, "No");
				System.out.println(field);
				break;
			case "Create Random Password":
				Assert.assertEquals(field, "Create Random Password");
				System.out.println(field);
				break;

			case "Send password over email":
				Assert.assertEquals(field, "Send password over email");
				System.out.println(field);
				break;
			case "Primary Contact User":
				Assert.assertEquals(field, "Primary Contact User");
				System.out.println(field);
				break;
			case "API USER":
				Assert.assertEquals(field, "API USER");
				System.out.println(field);
				break;
			case "Save":
				Assert.assertEquals(field, "Save");
				System.out.println(field);
				break;
			case "Cancel":
				Assert.assertEquals(field, "Cancel");
				System.out.println(field);
				break;
			}
		}

	}

	@Then("^Verify the all the field after the clicking the edit button$")
	public void Verify_the_all_the_field_after_the_clicking_the_edit_button() throws InterruptedException {
		Thread.sleep(1000);
		List<WebElement> fields = driver
				.findElements(CirrusDCSPageObjects.getTenant_Information_Primary_Contacts_page_present_fields());
		for (int i = 0; i < fields.size(); i++) {
			String field = fields.get(i).getText();
			System.out.println(field);
			switch (field) {

			case "User Id:*":
				Assert.assertEquals(field, "User Id:*");
				System.out.println(field);
				break;
			case "Client:":
				Assert.assertEquals(field, "Client:");
				System.out.println(field);
				break;
			case "ZKTK":
				Assert.assertEquals(field, "ZKTK");
				System.out.println(field);
				break;
			case "Login Id":
				Assert.assertEquals(field, "Login Id");
				System.out.println(field);
				break;
			case "(Login ID- auto created ID":
				Assert.assertEquals(field, "(Login ID- auto created ID");
				System.out.println(field);
				break;
			case "for user Interface Login)":
				Assert.assertEquals(field, "for user Interface Login)");
				System.out.println(field);
				break;
			case "First Name*":
				Assert.assertEquals(field, "First Name*");
				System.out.println(field);
				break;

			case "Last Name*":
				Assert.assertEquals(field, "Last Name*");
				System.out.println(field);
				break;
			case "Phone Number*":
				Assert.assertEquals(field, "Phone Number*");
				System.out.println(field);
				break;
			case "Email:*":
				Assert.assertEquals(field, "Email:*");
				System.out.println(field);
				break;
			case "Password:":
				Assert.assertEquals(field, "Password:");
				System.out.println(field);
				break;
			case "Confirm Password:":
				Assert.assertEquals(field, "Confirm Password:");
				System.out.println(field);
				break;
			case "Status:":
				Assert.assertEquals(field, "Status:");
				System.out.println(field);
				break;
			case "Active":
				Assert.assertEquals(field, "Active");
				System.out.println(field);
				break;
			case "Inactive":
				Assert.assertEquals(field, "Inactive");
				System.out.println(field);
				break;

			case "Account Non Expired :":
				Assert.assertEquals(field, "Account Non Expired :");
				System.out.println(field);
				break;
			case "Yes":
				Assert.assertEquals(field, "Yes");
				System.out.println(field);
				break;
			case "No":
				Assert.assertEquals(field, "No");
				System.out.println(field);
				break;
			case "Create Random Password":
				Assert.assertEquals(field, "Create Random Password");
				System.out.println(field);
				break;

			case "Send password over email":
				Assert.assertEquals(field, "Send password over email");
				System.out.println(field);
				break;
			case "Primary Contact User":
				Assert.assertEquals(field, "Primary Contact User");
				System.out.println(field);
				break;
			case "API USER":
				Assert.assertEquals(field, "API USER");
				System.out.println(field);
				break;
			case "Delete User":
				Assert.assertEquals(field, "Delete User");
				System.out.println(field);
				break;

			case "Save":
				Assert.assertEquals(field, "Save");
				System.out.println(field);
				break;

			case "Cancel":
				Assert.assertEquals(field, "Cancel");
				System.out.println(field);
				break;
			}
		}

	}

	@Then("^I create new primary contact$")
	public void I_create_new_primary_contact() throws InterruptedException {
		Thread.sleep(3000);
		((JavascriptExecutor) driver).executeScript("window.scrollTo(0, document.body.scrollHeight)");
		driver.findElement(By.xpath("//input[@id='tenantinfo:newContactForm:username']")).sendKeys(UserID);
		firstName12 = SignUpFirstName;

		WebElement ele1 = driver.findElement(By.xpath("//input[@id='tenantinfo:newContactForm:userFirstName']"));
		((JavascriptExecutor) driver).executeScript("arguments[0].value='" + firstName12 + "'", ele1);

		WebElement ele2 = driver.findElement(By.xpath("//input[@id='tenantinfo:newContactForm:lastName']"));
		((JavascriptExecutor) driver).executeScript("arguments[0].value='" + SignUpLastName + "'", ele2);

		WebElement ele3 = driver.findElement(By.xpath("//input[@id='tenantinfo:newContactForm:phone']"));
		((JavascriptExecutor) driver).executeScript("arguments[0].value='" + SignUpContact + "'", ele3);

		WebElement ele4 = driver.findElement(By.xpath("//input[@id='tenantinfo:newContactForm:email']"));
		((JavascriptExecutor) driver).executeScript("arguments[0].value='" + SignUpEmail + "'", ele4);

		WebElement ele5 = driver.findElement(By.xpath("//input[@id='tenantinfo:newContactForm:password']"));
		((JavascriptExecutor) driver).executeScript("arguments[0].value='" + SignUpPassword + "'", ele5);

		password = SignUpConfirmPassword;
		System.out.println("pass " + password);
		WebElement ele6 = driver.findElement(By.xpath("//input[@id='tenantinfo:newContactForm:confirmPassword']"));
		((JavascriptExecutor) driver).executeScript("arguments[0].value='" + SignUpConfirmPassword + "'", ele6);

		driver.findElement(CirrusDCSPageObjects
				.getTenant_Information_Primary_Contacts_page_present_fields_Primary_Contact_Information_Save_btn())
				.click();

		Thread.sleep(3000);

	}

	@Then("^I verify that primary contact is created in the primary contact page$")
	public void I_verify_that_primary_contact_is_created_in_the_primary_contact_page() throws InterruptedException {
		Thread.sleep(2000);

		// I_click_on_the_Primay_Contacts_submodule();
		List<WebElement> ele = driver
				.findElements(CirrusDCSPageObjects.getTenant_Information_Primary_Contacts_page_first_Name_list());
		System.out.println(firstName12);
		for (WebElement element : ele) {
			String FirstName = element.getText();
			System.out.println(FirstName);
			if (FirstName.equals(firstName12)) {
				Assert.assertEquals(FirstName, firstName12);
			}
		}
		List<WebElement> loginId = driver
				.findElements(CirrusDCSPageObjects.getTenant_Information_Primary_Contacts_page_login_Id_list());
		userId = loginId.get(loginId.size() - 1).getText();
		System.out.println(userId);

		List<WebElement> lastName = driver
				.findElements(CirrusDCSPageObjects.getTenant_Information_Primary_Contacts_page_Last_name_list());
		LastName = lastName.get(loginId.size() - 1).getText();
		System.out.println(LastName);
		UserName = firstName12 + " " + LastName;

	}

	@Then("^I click on the addNew button in the Primary contacts submodule$")
	public void I_click_on_the_addNew_button_in_the_Primary_contacts_submodule() {
		driver.findElement(CirrusDCSPageObjects.getTenant_Information_Primary_Contacts_page_addNew_btn()).click();
	}

	@Then("^I click on the Configurations submodule$")
	public void I_click_on_the_Configurations_submodule() {
		driver.findElement(CirrusDCSPageObjects.getTenant_Information_Configurations()).click();
	}

	@Then("^I search the property in the configuration page$")
	public void I_search_the_property_in_the_configuration_page() throws InterruptedException {
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Configurations_search_field())
				.sendKeys(property.getProperty("Propety_key"));
		Thread.sleep(2000);
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Configurations_search_field_search_icon()).click();

	}

	@Then("^I Verify all the fields in the configurations submodule$")
	public void I_Verify_all_the_fields_in_the_configurations_submodule() {
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getTenant_Module_Configurations_searchBar_field())
				.isDisplayed());
		List<WebElement> ListOfcolumns = driver
				.findElements(CirrusDCSPageObjects.getTenant_Module_Configurations_listOf_Columns());
		for (WebElement columnName : ListOfcolumns) {

			String columnName1 = columnName.getText();
			switch (columnName1) {

			case "Property Key":
				Assert.assertEquals(columnName1, "Property Key");
				break;
			case "Property Value":
				Assert.assertEquals(columnName1, "Property Value");
				break;
			case "Data Type":
				Assert.assertEquals(columnName1, "Data Type");
				break;
			case "Control Level":
				Assert.assertEquals(columnName1, "Control Level");
				break;
			case "Edit":
				Assert.assertEquals(columnName1, "Edit");
				break;
			}

		}
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,1000)");
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getTenant_Module_Configurations_Export_btn()).isDisplayed());
		Assert.assertTrue(
				driver.findElement(CirrusDCSPageObjects.getTenant_Module_Configurations_newsync_btn()).isDisplayed());
		Assert.assertTrue(driver.findElement(CirrusDCSPageObjects.getTenant_Module_Configurations_copyDefalut_btn())
				.isDisplayed());
	}

	@Then("^I Verify all the property which are present on the Configurations page$")
	public void I_Verify_all_the_property_which_are_present_on_the_Configurations_page()
			throws InterruptedException, IOException {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,1000)");
		List<String> total_property1 = new ArrayList<String>();
		Properties p = new Properties();
		p.load(new FileInputStream(
				"D:\\1\\Official Automation Work\\Cirrus_DCS\\CirrusDCS\\src\\test\\resources\\ListOfConfigurationPageProperties.properties"));

		List<WebElement> btn = driver.findElements(By.xpath("(//span[@class='ui-paginator-pages'])[3]/span"));
		for (int i = 0; i < btn.size(); i++) {
			List<WebElement> Properties = driver
					.findElements(CirrusDCSPageObjects.getTenant_Module_Configurations_list_of_propety_key());

			for (int b = 0; b < Properties.size(); b++) {
				WebElement Properties1 = Properties.get(b);
				String PropertiesName = Properties1.getText();
				total_property1.add(b, PropertiesName);
				System.out.println(total_property1.get(b));
			}
			Properties.clear();
			WebElement element = driver.findElement(By.xpath("(//span[@class='ui-icon ui-icon-seek-next'])[3]"));
			JavascriptExecutor executor = (JavascriptExecutor) driver;
			executor.executeScript("arguments[0].click();", element);
			Thread.sleep(3000);
		}
		int j = 0;
		for (int k = 0; k < total_property1.size(); k++) {
			String propertyNameKey = "Property_[" + j + "]";
			String propertyNameValue = total_property1.get(k);
			FileWriter file = new FileWriter(
					"D:\\1\\Official Automation Work\\Cirrus_DCS\\CirrusDCS\\src\\test\\resources\\ListOfConfigurationPageProperties.properties");

			p.setProperty(propertyNameKey, propertyNameValue);
			p.store(file, "List of the properties");
			j++;
		}
		for (int l = 0; l < 16; l++) {
			String ds = "Property_[" + l + "]";
			String aa = property.getProperty(ds);
			Assert.assertEquals(total_property1.get(l), aa);
		}

	}

	@Then("^I click on the Edit button which is presented on the configurations page$")
	public void I_click_on_the_Edit_button_which_is_presented_on_the_configurations_page() throws InterruptedException {
		Thread.sleep(2000);
		WebElement value1 = driver
				.findElement(By.xpath("//div[@id='tenantinfo:propertiesForm:propertiesListTable:0:j_id_c9']"));
		value2 = value1.getText();
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Configurations_edit_icon()).click();
		Control_level = driver
				.findElement(By.xpath("//div[@id='tenantinfo:propertiesForm:propertiesListTable:0:j_id_ch']"))
				.getText();

	}

	@Then("^I Click on the Save button which is present on the edit Property window$")
	public void I_Click_on_the_Save_button_which_is_present_on_the_edit_Property_window() throws InterruptedException {
		Thread.sleep(2000);
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Configurations_EditProperty_Save()).click();
		Thread.sleep(2000);
	}

	@Then("^User is able to edit the property value in the Configurations page$")
	public void User_is_able_to_edit_the_property_value_in_the_Configurations_page() throws InterruptedException {
		Thread.sleep(2000);
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Configurations_Property_value()).clear();
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Configurations_Property_value()).sendKeys(UserID);
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Configurations_EditProperty_reason())
				.sendKeys("testing");
	}

	@Then("^I verify user is able to change the property value$")
	public void I_verify_user_is_able_to_change_the_property_value() throws InterruptedException {
		String value3 = driver
				.findElement(By.xpath("//div[@id='tenantinfo:propertiesForm:propertiesListTable:0:j_id_c9']"))
				.getText();
		System.out.println(value3);
		Assert.assertNotEquals(value2, value3);
	}

	@Then("^I change the control level which is present on the edit Property window$")
	public void I_change_the_control_level_which_is_present_on_the_edit_Property_window() throws InterruptedException {
		Thread.sleep(3000);
		List<WebElement> buttons = driver.findElements(
				CirrusDCSPageObjects.getTenant_Module_Configurations_EditProperty_control_level_radio_btn());
		for (int i = 0; i < buttons.size(); i++) {

			String buttonClass = buttons.get(i).getAttribute("class");
			if (buttonClass.endsWith("active")) {
				System.out.println("element active");
			} else {
				buttons.get(i).click();
				break;

			}
		}
		Thread.sleep(6000);
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Configurations_EditProperty_reason())
				.sendKeys("testing");

	}

	@Then("^I verify user is able to change the control level$")
	public void I_verify_user_is_able_to_change_the_control_level() {
		String Contro_level_2 = driver
				.findElement(By.xpath("//div[@id='tenantinfo:propertiesForm:propertiesListTable:0:j_id_ch']"))
				.getText();
		Assert.assertNotEquals(Control_level, Contro_level_2);
	}

	@Then("^I click on the Export button and verify user is able to download all the configuration list$")
	public void I_click_on_the_Export_button_and_verify_user_is_able_to_download_all_the_configuration_list() {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,1000)");
		WebElement exportbtn = driver.findElement(CirrusDCSPageObjects.getTenant_Module_Configurations_Export_btn());
		exportbtn.click();

		String filename = "Configurations_ZKTK1.csv";
		String downloadPath = "C:\\Users\\rishikeshbm\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;
		for (int i = 0; i < len; i++) {
			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}

	}

	@Then("^I verify that after click on the copy default btn default value should be restore$")
	public void I_verify_that_after_click_on_the_copy_default_btn_default_value_should_be_restore() {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,1000)");
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Configurations_copyDefalut_btn()).click();
		wait.until(ExpectedConditions.visibilityOf(
				driver.findElement(CirrusDCSPageObjects.getTenant_Module_Configuration_copy_defaults_yesbtn())));
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Configuration_copy_defaults_yesbtn()).click();
		wait.until(ExpectedConditions.visibilityOf(
				driver.findElement(CirrusDCSPageObjects.getTenant_Module_Configuration_copy_defaults_PopUpmsgs())));
		String msg = driver.findElement(CirrusDCSPageObjects.getTenant_Module_Configuration_copy_defaults_PopUpmsgs())
				.getText();
		System.out.println(msg);
		Assert.assertEquals("Copied: 176 properties, Failed: 0, Success: 176", msg);

	}

	@Then("^I click on the new/syn btn$")
	public void I_click_on_the_newsyn_btn() {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,1000)");
		driver.findElement(CirrusDCSPageObjects.getTenant_Module_Configurations_newsync_btn()).click();

	}

	@Then("^I view the Property details page and select the new property and click on the syn btn$")
	public void I_view_the_Property_details_page_and_select_the_new_property_and_click_on_the_syn_btn()
			throws InterruptedException {
		wait.until(ExpectedConditions.visibilityOf(driver
				.findElement(CirrusDCSPageObjects.getTenant_Module_Configuration_newsyn_btn_Property_DetailsPage())));
		driver.findElement(
				CirrusDCSPageObjects.getTenant_Module_Configuration_newsyn_btn_Property_DetailsPage_checkBox()).click();
		Thread.sleep(5000);
		boolean ss = driver
				.findElement(
						CirrusDCSPageObjects.getTenant_Module_Configuration_newsyn_btn_Property_DetailsPage_checkBox())
				.isEnabled();
		System.out.println(ss);

		if (ss == true) {
			driver.findElement(
					CirrusDCSPageObjects.getTenant_Module_Configuration_newsyn_btn_Property_DetailsPage_sync_btn())
					.click();

		}
	}

	@Then("^I verify that new property should be syn in the configurations page$")
	public void I_verify_that_ne_property_should_be_syn_in_the_configurations_page() {
		String msg = driver.findElement(CirrusDCSPageObjects.getTenant_Module_Configuration_copy_defaults_PopUpmsgs())
				.getText();
		System.out.println(msg);
	}
// vishwas Bhai

//	@Then("^I verify user navigation to HostAdmin Login page$")
//	public void I_verify_user_navigation_to_HostAdmin_Login_page() {
//		// wait.until(ExpectedConditions.urlContains(property.getProperty("DCSHostURL")));
//		if (driver.getCurrentUrl().equals(property.getProperty("DCSHostURL"))) {
//
//			System.out.println("User navigated to HostAdmin login successfully");
//		}
//
//	}

//	@Then("^I validate all the components in HostAdmin login page$")
//	public void I_validate_all_the_components_in_HostAdmin_login_page() {
//		Assert.assertTrue(driver.findElement(cirrusDCSPageObjectst.getLoginScreenUi()).isDisplayed());
//		Assert.assertTrue(driver.findElement(cirrusDCSPageObjectst.getUserName()).isDisplayed());
//		Assert.assertTrue(driver.findElement(cirrusDCSPageObjectst.getPassword()).isDisplayed());
//		Assert.assertTrue(driver.findElement(cirrusDCSPageObjectst.getSignInbtn()).isDisplayed());
//		Assert.assertTrue(driver.findElement(cirrusDCSPageObjectst.getZktecologo()).isDisplayed());
//		Assert.assertTrue(driver.findElement(cirrusDCSPageObjectst.getTermsofUSe()).isDisplayed());
//		Assert.assertTrue(driver.findElement(cirrusDCSPageObjectst.getPrivacypolicy()).isDisplayed());
//		Assert.assertTrue(driver.findElement(cirrusDCSPageObjectst.getDCSVersion()).isDisplayed());
//		Assert.assertTrue(driver.findElement(cirrusDCSPageObjectst.getForgotpassword()).isDisplayed());
//		Assert.assertTrue(driver.findElement(cirrusDCSPageObjectst.getCopyrightstext()).isDisplayed());
//	}

//	@Then("^I verify user navigation to terms of use page$")
//	public void I_verify_user_navigation_to_terms_of_use_page() {
//		driver.findElement(cirrusDCSPageObjectst.getTermsofUSe()).click();
//		Assert.assertEquals(driver.getCurrentUrl(), property.getProperty("DCShosttermsofuseURL"));
//
//	}

//	@Then("^I verify the data present in the terms of use text area field$")
//	public void I_verify_the_terms_of_use_text_box() {
//		Assert.assertTrue(driver.findElement(cirrusDCSPageObjectst.getTermsofusewindow()).isDisplayed());
//
//		String Actual = driver.findElement(cirrusDCSPageObjectst.getTermsofusewindow()).getText();
//
//		String Expected = driver.findElement(cirrusDCSPageObjectst.getTermsofusewindow()).getText();
//
//		Assert.assertEquals(Actual, Expected);
//	}

	@When("^I Click on back to login link$")
	public void I_Click_on_back_to_login_link() {
		driver.findElement(cirrusDCSPageObjectst.getBacktologinlink()).click();
	}

	@Then("^I verify user navigation to privacy policy page$")
	public void I_verify_user_navigation_to_privacy_policy_page() {
		driver.findElement(cirrusDCSPageObjectst.getPrivacypolicy()).click();

		Assert.assertEquals(driver.getCurrentUrl(), property.getProperty("DCShostprivacypolicyURL"));

	}

	@When("^I Click on forgot password link$")
	public void I_Click_on_forgot_password_link() {

		driver.findElement(cirrusDCSPageObjectst.getForgotpassword()).click();

	}

	@Then("^I validate user navigation to forgotpassword page$")
	public void I_validate_user_navigation_to_forgotpassword_page() {
		wait.until(ExpectedConditions.textToBePresentInElement(
				driver.findElement(cirrusDCSPageObjectst.getForgotpasswordtext()),
				property.getProperty("Forgotpasswordtext")));
		System.out.println(driver.findElement(cirrusDCSPageObjectst.getForgotpasswordtext()).getText());
		Assert.assertEquals(driver.findElement(cirrusDCSPageObjectst.getForgotpasswordtext()).getText(),
				property.getProperty("Forgotpasswordtext"));
	}

	@Then("^I validate the tabs present in the forgot password page$")
	public void I_validate_the_tabs_present_in_the_forgot_password_page() {
		
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(cirrusDCSPageObjectst.getForgotUserIdtab())));
		Assert.assertTrue(driver.findElement(cirrusDCSPageObjectst.getForgotUserIdtab()).isDisplayed());
		Assert.assertTrue(driver.findElement(cirrusDCSPageObjectst.getForgotpasswordtab()).isDisplayed());
	}

	@Then("^I validate the elements present in the Forgot User Id tab$")
	public void I_validate_the_elements_present_in_the_Forgot_User_Id_tab() {

		driver.findElement(cirrusDCSPageObjectst.getForgotUserIdtab()).click();

		Assert.assertTrue(driver.findElement(cirrusDCSPageObjectst.getForgotuseridEmail()).isDisplayed());
		Assert.assertTrue(driver.findElement(cirrusDCSPageObjectst.getForgotuseridRegisteredPhone()).isDisplayed());
		Assert.assertTrue(driver.findElement(cirrusDCSPageObjectst.getForgotuseridRecoverpasswordbtn()).isDisplayed());
	}

	@Then("^I validate the elements present in the Forgotpassword tab$")
	public void I_validate_the_elements_present_in_the_Forgotpassword_tab() {
		driver.findElement(cirrusDCSPageObjectst.getForgotpasswordtab()).click();
		Assert.assertTrue(driver.findElement(cirrusDCSPageObjectst.getForgotpasswordusername()).isDisplayed());
		Assert.assertTrue(driver.findElement(cirrusDCSPageObjectst.getForgotpasswordemail()).isDisplayed());
		Assert.assertTrue(driver.findElement(cirrusDCSPageObjectst.getForgotpasswordregisteredphone()).isDisplayed());
		Assert.assertTrue(driver.findElement(cirrusDCSPageObjectst.getforgotpwdRecoverpasswordbtn()).isDisplayed());
	}

	@Then("^I enter all valid details in required fields$")
	public void I_enter_all_valid_details_in_required_fields() {
		driver.findElement(cirrusDCSPageObjectst.getForgotuseridEmail())
				.sendKeys(property.getProperty("ForgotUseridEmail"));
		driver.findElement(cirrusDCSPageObjectst.getForgotuseridRegisteredPhone())
				.sendKeys(property.getProperty("ForgotUseridphone"));
		driver.findElement(cirrusDCSPageObjectst.getForgotuseridRecoverpasswordbtn()).click();
	}

	@Then("^I validate the results$")
	public void I_validate_the_results() {
		System.out.println(driver.findElement(cirrusDCSPageObjectst.getLoginsuccessfulmessage()).getText());
		Assert.assertEquals(driver.findElement(cirrusDCSPageObjectst.getLoginsuccessfulmessage()).getText(),
				property.getProperty("loginsuccessfulmessage"));
	}

	@Then("^I enter invalid details in forgot user id tab$")
	public void I_enter_invalid_details_in_forgot_user_id_tab() {
		driver.findElement(cirrusDCSPageObjectst.getForgotuseridEmail())
				.sendKeys(property.getProperty("InvalidForgotUseridEmail"));
		driver.findElement(cirrusDCSPageObjectst.getForgotuseridRegisteredPhone())
				.sendKeys(property.getProperty("InvalidForgotUseridEmail"));
		driver.findElement(cirrusDCSPageObjectst.getForgotuseridRecoverpasswordbtn()).click();
	}

	@Then("^I validate the error message$")
	public void I_validate_the_error_message() {
		System.out.println(driver.findElement(cirrusDCSPageObjectst.getLoginerrormessage()).getText().toLowerCase());

        Assert.assertEquals(driver.findElement(cirrusDCSPageObjectst.getLoginerrormessage()).getText().toLowerCase(),
				property.getProperty("forgotpassworderrormessage").toLowerCase());
    }
    @Then("^I validate the new error message$")
    public void I_validate_the_new_error_message() {
        System.out.println(driver.findElement(cirrusDCSPageObjectst.getLoginerrormessage()).getText().toLowerCase());

        Assert.assertEquals(driver.findElement(cirrusDCSPageObjectst.getLoginerrormessage()).getText().toLowerCase(),
                property.getProperty("forgotmessage").toLowerCase());
    }

	@Then("^I enter all valid details in forgot password required fields$")
	public void I_enter_all_valid_details_in_forgot_password_required_fields() {
		driver.findElement(cirrusDCSPageObjectst.getForgotpasswordtab()).click();
		driver.findElement(cirrusDCSPageObjectst.getForgotpasswordusername())
				.sendKeys(property.getProperty("ForgotpasswordUsername"));
		driver.findElement(cirrusDCSPageObjectst.getForgotpasswordemail())
				.sendKeys(property.getProperty("ForgotUseridEmail"));
		driver.findElement(cirrusDCSPageObjectst.getForgotpasswordregisteredphone())
				.sendKeys(property.getProperty("ForgotUseridphone"));
		wait.until(ExpectedConditions
				.visibilityOf(driver.findElement(cirrusDCSPageObjectst.getforgotpwdRecoverpasswordbtn())));
		driver.findElement(cirrusDCSPageObjectst.getforgotpwdRecoverpasswordbtn()).click();
	}

	@Then("^I validate the message for forgotpassword$")
	public void I_validate_the_message_for_forgotpassword() {
		System.out.println(driver.findElement(cirrusDCSPageObjectst.getLoginsuccessfulmessage()).getText());
		Assert.assertEquals(driver.findElement(cirrusDCSPageObjectst.getLoginsuccessfulmessage()).getText(),
				property.getProperty("forgotpasswordsuccessfulmessage"));
	}

	@Then("^I enter invalid details in forgot password tab$")
	public void I_enter_invalid_details_in_forgot_password_tab() {
		driver.findElement(cirrusDCSPageObjectst.getForgotpasswordtab()).click();
		driver.findElement(cirrusDCSPageObjectst.getForgotpasswordusername())
				.sendKeys(property.getProperty("ForgotpasswordUsername"));
		driver.findElement(cirrusDCSPageObjectst.getForgotpasswordemail())
				.sendKeys(property.getProperty("ForgotUseridEmail"));
		driver.findElement(cirrusDCSPageObjectst.getForgotpasswordregisteredphone())
				.sendKeys(property.getProperty("InvalidForgotUseridphone"));
		wait.until(ExpectedConditions
				.visibilityOf(driver.findElement(cirrusDCSPageObjectst.getforgotpwdRecoverpasswordbtn())));
		driver.findElement(cirrusDCSPageObjectst.getforgotpwdRecoverpasswordbtn()).click();
	}

	@When("^I Click on Login button$")
	public void I_Click_on_Login_button() {
		driver.findElement(cirrusDCSPageObjectst.getSignInbtn()).click();
	}

	@Then("^I validate the error message for mandatory fields$")
	public void I_validate_the_error_message_for_mandatory_fields() {
		System.out.println(driver.findElement(cirrusDCSPageObjectst.getLoginerrormessage()).getText());
		Assert.assertEquals(driver.findElement(cirrusDCSPageObjectst.getLoginerrormessage()).getText(),
				property.getProperty("Loginmandatoryfieldserrormessage"));

	}

	@Given("^I Enter valid credentails in login screen$")
	public void I_Enter_valid_credentails_in_login_screen() {
		driver.findElement(cirrusDCSPageObjectst.getUserName()).sendKeys(property.getProperty("HostUsername"));
		driver.findElement(cirrusDCSPageObjectst.getPassword()).sendKeys(property.getProperty("HostPassword"));
	}

	@Then("^I validate the user navigation to home screen with valid credentials$")
	public void I_validate_the_user_navigation_to_home_screen_with_valid_credentials() {
		if (driver.getCurrentUrl().equals(property.getProperty("HostHomePageURL"))) {
			System.out.println("user navigated to Hostadmin home page successfully");
			Assert.assertEquals(driver.getCurrentUrl(), property.getProperty("HostHomePageURL"));

		}
	}
	
	@Given("^I Enter valid credentials of supertenant login$")
	public void I_Enter_valid_credentials_of_supertenant_login()
	{
		driver.findElement(cirrusDCSPageObjectst.getUserName()).sendKeys(property.getProperty("SuperTenantUsername"));
		driver.findElement(cirrusDCSPageObjectst.getPassword()).sendKeys(property.getProperty("SuperTenantPassword"));
	}

	@Given("^I Enter Invalid credentails in login screen$")
	public void I_Enter_Invalid_credentails_in_login_screen() {

		driver.findElement(cirrusDCSPageObjectst.getUserName()).sendKeys(property.getProperty("InvalidUsername"));
		driver.findElement(cirrusDCSPageObjectst.getPassword()).sendKeys(property.getProperty("InvalidPassword"));

	}
	
	
	
	@Given("^I am in SuperTenant host view home page$")
	public void I_am_in_SuperTenant_home_page() {

		I_Enter_valid_credentials_of_supertenant_login();

		I_Click_on_Login_button();
		
		I_Navigate_to_Host_view_homepage();

	}
	
	
	@Given("^I am in SuperTenant customer view home page$")
	public void I_am_in_SuperTenant_customer_view_home_page() throws InterruptedException {

		I_Enter_valid_credentials_of_supertenant_login();

		I_Click_on_Login_button();
		
		I_Navigate_to_customer_view_homepage();

	}
	
	@Given("^I am in HostAdmin home page$")
	public void I_am_in_HostAmdin_home_page() {

		I_Enter_valid_credentails_in_login_screen();

		I_Click_on_Login_button();

	}

	@When("^I click on Host Users$")
	public void I_click_on_Host_Users() throws InterruptedException {
		
		util.click(driver.findElement(cirrusDCSPageObjectst.getHostusersmodule()));

	}

	@Then("^I validate the user navigation to Hostusers page$")
	public void I_validate_the_user_navigation_to_Hostusers_page() {

		if (driver.getTitle().equals(property.getProperty("HostUserstitlename"))) {
			System.out.println(driver.getTitle());
			Assert.assertEquals(driver.getTitle(), property.getProperty("HostUserstitlename"));
		}
	}

	@Then("^I validate the user list block in host page$")
	public void I_validate_the_user_list_block_in_host_page() {
		Assert.assertTrue(driver.findElement(cirrusDCSPageObjectst.getUserListblock()).isDisplayed());

	}

	
	@Then("^I Navigate to Host view homepage$")
	public void I_Navigate_to_Host_view_homepage()
	{
		util.click(deviceoperationspageobjects.getButtons("Go To Dashboard"));
	
	}

	@Then("^I Navigate to customer view homepage$")
	public void I_Navigate_to_customer_view_homepage() throws InterruptedException
	{
		
		util.click(supertenantpageobjects.getCustomerViewRadioButton());
		
		Thread.sleep(2000);
		
		util.click(supertenantpageobjects.getCustomerViewDropdown());
		
		List<WebElement> options = supertenantpageobjects.getCustomerViewDropdownOptions();
		
		for(WebElement ele:options)
		{
		if(ele.getText().equals(property.getProperty("customer")))
		{
			util.click(ele);
			
		}
		}
		
		util.click(deviceoperationspageobjects.getButtons("Go To Dashboard"));
	}
	
	
@Then("^I Click on the Last Forward Btn andLast Page is displayed$")
public void I_Click_on_the_Last_Forward_Btn_andLast_Page_is_displayed() throws InterruptedException 
{
	
WebElement ele = driver.findElement(cirrusDCSPageObjectst.getFastforwardbtn());

js=(JavascriptExecutor)driver;

js.executeScript("arguments[0].click();", ele);
	
Thread.sleep(2000);
List<WebElement> Pagebtn = driver.findElements(cirrusDCSPageObjectst.getAllPaginationbtnone_By_One());
for(int i=0;i<Pagebtn.size();i++)
{
	WebElement Pagebtn1= Pagebtn.get(i);
	String Name2 = Pagebtn1.getText();
	String Name = Pagebtn1.getAttribute("class");
	//System.out.println(Name);
	//System.out.println(Name2);
	if(Name.equals(property.getProperty("pageactiveclass")))
	{
		Assert.assertEquals(Name, property.getProperty("pageactiveclass"));
	}
	
	 	 
}	
}

@Then("^I Click on the firstPage backward Btn and first Page is displayed$")
public void I_Click_on_the_firstPage_backward_Btn_and_first_Page_is_displayed() throws InterruptedException 
{
	js=(JavascriptExecutor)driver;
	
	js.executeScript("arguments[0].click();", driver.findElement(cirrusDCSPageObjectst.getFastforwardbtn()));
	
	Thread.sleep(1000);
	
	wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(cirrusDCSPageObjectst.getFirstbackwardbtn())));
	
	js.executeScript("arguments[0].click();",driver.findElement(cirrusDCSPageObjectst.getFirstbackwardbtn()));
	
	Thread.sleep(2000);
	List<WebElement> s1ssd = driver.findElements(cirrusDCSPageObjectst.getAllPaginationbtnone_By_One());
	for(int i=0;i<s1ssd.size();i++)
	{
		WebElement ds= s1ssd.get(i);
		String Name2 = ds.getText();
		 String Name = ds.getAttribute("class");
		 if(Name.equals(property.getProperty("pageactiveclass")))
		 {
			 System.out.println(Name);
			 System.out.println(Name2);
			 Assert.assertEquals(Name2, property.getProperty("firstPageNO"));
		 }	 
}
	}

@Then("^I Click on the forward btn and pages displaying accordingly$")
public void I_Click_on_the_forward_btn_and_pages_displaying_accordingly() throws InterruptedException  {
	
	List<WebElement> s1ssd = driver.findElements(cirrusDCSPageObjectst.getAllPaginationbtnone_By_One());
	for(int j=0;j<s1ssd.size()-1;j++)
	{
		js=(JavascriptExecutor)driver;
		js.executeScript("arguments[0].click();",driver.findElement(cirrusDCSPageObjectst.getNormalnextbutton()));
		Thread.sleep(2000);
		List<WebElement> s2ssd = driver.findElements(cirrusDCSPageObjectst.getAllPaginationbtnone_By_One());
		for(int i=0;i<s2ssd.size();i++)
		{
			WebElement ds= s2ssd.get(i);
			String Name2 = ds.getText();
			 String Name = ds.getAttribute("class");
			 if(Name.equals(property.getProperty("pageactiveclass")))
			 {
				 Assert.assertEquals(Name, property.getProperty("pageactiveclass"));
				 System.out.println(Name2);
			 }
		}
}	
}

@Then("^I Click on the backword btn and pages displaying accordingly$")
public void I_Click_on_the_backword_btn_and_pages_displaying_accordingly() throws InterruptedException  
{
	wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(cirrusDCSPageObjectst.getNormalbackwardbtn())));
	js=(JavascriptExecutor)driver;
	js.executeScript("arguments[0].click();",driver.findElement(cirrusDCSPageObjectst.getNormalbackwardbtn()));
	
	Thread.sleep(2000);
	for(int j=0;j<11;j++)
		{
			js.executeScript("arguments[0].click();",driver.findElement(cirrusDCSPageObjectst.getAllPaginationbtnone_By_One()));
			Thread.sleep(2000);
			List<WebElement> s1ssd = driver.findElements(cirrusDCSPageObjectst.getAllPaginationbtnone_By_One());
			for(int i=s1ssd.size()-1;i>=0;i--)
			{
				WebElement ds= s1ssd.get(i);
				String Name2 = ds.getText();
				 String Name = ds.getAttribute("class");
				 if(Name.equals("ui-paginator-page ui-state-default ui-corner-all ui-state-active"))
				 {
					 Assert.assertEquals(Name, property.getProperty("ClassAttribute"));
					 System.out.println(Name2);
				 }
           }
		}
}

@Then("^I select the pages from pagedropdown and list of tenant display accordingly$")
public void I_select_the_pages_from_pagedropdown_and_list_of_tenant_display_accordingly() throws InterruptedException  
{   
	
	Select objselect = new Select(driver.findElement(cirrusDCSPageObjectst.getPagecountdropdownbtn()));
	
	
	List<WebElement> options = objselect.getOptions();
	for(int i=0;i<options.size();i++)
	{
		js= (JavascriptExecutor)driver;
        
        js.executeScript("arguments[0].scrollIntoView(true);", driver.findElement(cirrusDCSPageObjectst.getPagecountdropdownbtn()));
		
		WebElement optionsval = options.get(i);
		String ss =optionsval.getText();
		
		objselect.selectByIndex(i);
	
		Thread.sleep(2000);
		List<WebElement> listTenant = driver.findElements(cirrusDCSPageObjectst.getTabledata());
		Thread.sleep(2000);
		int no =listTenant.size();
		String b = String.valueOf(no);
		if(no>=50) 
		{
			
			Assert.assertEquals(ss, b);
			//System.out.println(no);	
		}
	
		
		
	}
	
}

	@Then("^I click on Security & Audit$")
	public void i_click_on_security_audit() throws Throwable {
		driver.findElement(cirrusDCSPageObjectst.getSecurityandAudit()).click();

		wait.until(ExpectedConditions.visibilityOf(driver.findElement(cirrusDCSPageObjectst.getHostRoletable())));

	}

	@Then("^I click on Host Role$")
	public void i_click_on_host_role() throws Throwable {

		driver.findElement(cirrusDCSPageObjectst.getHostRole()).click();

	}

	@Then("^I click on Tenant Role$")
	public void i_click_on_tenant_role() throws Throwable {
		driver.findElement(cirrusDCSPageObjectst.getTenantRole()).click();
	}

	@Then("^I click on  host_user Role in Available Roles list$")
	public void i_click_on_hostuser_role_in_available_roles_list() throws Throwable {
		Thread.sleep(2000);
		// driver.findElement(cirrusDCSPageObjects.getHostUser()).click();
		// Thread.sleep(2000);
	}

	@Then("^I verify the Dashboard$")
	public void i_verify_the_host_role_definition_page() throws Throwable {

		Assert.assertEquals(driver.findElement(cirrusDCSPageObjectst.getDashboard()).getText(), "Dashboard");

	}

	@Then("^I click on  host_super Role in Available Roles list$")
	public void i_verify_the_i_click_on_hostsuper_role_in_available_roles_list() throws Throwable {
		driver.findElement(cirrusDCSPageObjectst.getHostSuper()).click();

	}

	@Then("^I click on  host_admin Role in Available Roles list$")
	public void i_verify_the_i_click_on_hostadmin_role_in_available_roles_list() throws Throwable {
		driver.findElement(cirrusDCSPageObjectst.getHostAdminTable()).click();

	}

	@Then("^I click on delete action button$")
	public void click_on_delete_action_button() throws Throwable {
		driver.findElement(cirrusDCSPageObjectst.getDeleteButton()).click();
		Thread.sleep(2000);

	}

	@Then("^I navigate to confirmation screen$")
	public void i_navigate_to_confirmation_screen() throws Throwable {
		driver.findElement(cirrusDCSPageObjectst.getConfirmPage()).click();
		Thread.sleep(2000);
	}

//	@Then("^I click on Yes button$")
//	public void i_click_on_yes_button() throws Throwable {
//		driver.findElement(cirrusDCSPageObjectst.getYesButton()).click();
//		Thread.sleep(2000);
//	}

	@Then("^I click on Add New Available Pages$")
	public void i_click_on_add_new_available_pages() throws Throwable {
		driver.findElement(cirrusDCSPageObjectst.getAddNewAvailablepages()).click();
		Thread.sleep(1000);

	}

	@Then("^I navigate to pop up page$")
	public void i_navigate_to_pop_up_page() throws Throwable {
		driver.findElement(cirrusDCSPageObjectst.getNavigateToPopup()).isDisplayed();
		Thread.sleep(2000);
	}

	@Then("^I click on check box of required page$")
	public void i_click_on_check_box_of_required_page() throws Throwable {

		wait.until(ExpectedConditions.visibilityOf(driver.findElement(cirrusDCSPageObjectst.getCheckbox())));
		driver.findElement(cirrusDCSPageObjectst.getCheckbox()).click();
	}

//	@Then("^I click on Save button$")
//	public void i_click_on_save_button() throws Throwable {
//		driver.findElement(cirrusDCSPageObjectst.getSaveButton()).click();
//	}

	@Then("^I click on delete button in action column$")
	public void i_click_on_delete_button_in_action_column() throws Throwable {

		List<WebElement> del = driver.findElements(cirrusDCSPageObjectst.getDelete());

		List<WebElement> cell = driver.findElements(cirrusDCSPageObjectst.getRolecellvalue());

		for (int i = 0; i < cell.size(); i++) {
			if (cell.get(i).getText().equals("Active Login Users")) {
				js = (JavascriptExecutor) driver;

				js.executeScript("arguments[0].click();", del.get(i));

			}
		}

////driver.findElement(cirrusDCSPageObjects.getDelete()).click();
//Thread.sleep(2000);
//
	}

	@Then("^I click on profile icon$")
	public void i_click_on_profile_icon() throws Throwable {
		js = (JavascriptExecutor) driver;

		js.executeScript("arguments[0].click();", driver.findElement(cirrusDCSPageObjectst.getProfileIcon()));
//wait.until(ExpectedConditions.visibilityOf(driver.findElement(cirrusDCSPageObjects.getMenuTable())));
//driver.findElement(cirrusDCSPageObjects.getProfileIcon()).click();

	}

	@Then("^I click on Logout$")
	public void i_click_on_logout() throws Throwable {
		Thread.sleep(2000);

		js = (JavascriptExecutor) driver;

		js.executeScript("arguments[0].click();", driver.findElement(cirrusDCSPageObjectst.getLogout()));

//wait.until(ExpectedConditions.visibilityOf(driver.findElement(cirrusDCSPageObjects.getProfileTable())));
//driver.findElement(cirrusDCSPageObjects.getLogout()).click();
	}

	@Then("^I verify the deleted page$")
	public void i_verify_the_deleted_page() throws Throwable {

		wait.until(ExpectedConditions.visibilityOf(driver.findElement(cirrusDCSPageObjectst.getTable2())));

		if (driver.findElements(cirrusDCSPageObjectst.getActiveLoginUsers()).size() == 0) {

			System.out.println("page removed from role successully");
		}
	}

	@Given("^login in to the tenant page$")
	public void login_in_to_the_tenant_page() throws Throwable {
		driver.get("https://cirrusdev1.workdayclocks.com/iclock/jsp/login.jsp");
		Thread.sleep(2000);

	}

	@Then("^I enter the credentials$")
	public void I_enter_the_credentials() throws Throwable {
		driver.findElement(dashboardpageobject.getTenantUsername()).sendKeys(property.getProperty("TenantUserName"));
		driver.findElement(dashboardpageobject.getTenantPassword()).sendKeys(property.getProperty("TenantPassword"));
		driver.findElement(dashboardpageobject.getLoginbutton()).click();
	}

	@Then("^I Click on Dashboardbutton$")
	public void i_click_on_dashboard() throws Throwable {
		driver.findElement(dashboardpageobject.getDashboardbutton()).click();
	}

	@Then("^I Verify the pages displaying$")
	public void i_verify_the_pages_displaying() throws Throwable {
		Assert.assertEquals(driver.findElement(dashboardpageobject.getUpdatedEmployeeFromWORKDAY()).getText(),
				"Updated Employee From WORKDAY");
		Assert.assertEquals(driver.findElement(dashboardpageobject.getTimeData()).getText(), "Time Data");
		Assert.assertEquals(driver.findElement(dashboardpageobject.getOfflineClocks()).getText(), "Offline Clocks");
		Assert.assertEquals(driver.findElement(dashboardpageobject.getPunchDetails()).getText(), "Punch Details");
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,1000)");
		Assert.assertEquals(driver.findElement(dashboardpageobject.getClockUsageAlertList()).getText(),
				"Clock Usage Alert List");
		Assert.assertEquals(driver.findElement(dashboardpageobject.getClockAssignedtoMultipleSites()).getText(),
				"Clock Assigned to Multiple Sites");
		
		
	}
	
	@Then("^I check all checkboxes of dashboard widgets$")
	public void I_check_all_checkboxes_of_dashboard_widgets() throws InterruptedException
	{
		
		List<WebElement> check = supertenantpageobjects.getcheckboxeswidgets();
		
		for(WebElement ele:check)
		{
			actions.doubleClick(ele).perform();

		}
		
	}

	@Then("^I Verify the pages displaying in supertenant host view dashboard$")
	public void I_Verify_the_pages_displaying_in_supertenant_host_view_dashboard() throws Throwable
	{
		i_click_on_setting_icon();
		
		I_check_all_checkboxes_of_dashboard_widgets();
		
		
		driver.findElement(dashboardpageobject.getClockUsageSave()).click();
		
		Assert.assertEquals(driver.findElement(dashboardpageobject.getUEW()).getText(),
				"Updated Employee From SYNERION");
		Assert.assertEquals(driver.findElement(dashboardpageobject.getTimeData()).getText(), "Time Data");
		
		Thread.sleep(2000);
		
		Assert.assertEquals(driver.findElement(dashboardpageobject.getPunchDetails()).getText(), "Punch Details");
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,1000)");
		
		Assert.assertEquals(driver.findElement(dashboardpageobject.getClockAssignedtoMultipleSites()).getText(),
				"Clock Assigned to Multiple Sites");
	}
	

	@Then("^I click on setting icon$")
	public void i_click_on_setting_icon() throws Throwable {
		
		util.click(driver.findElement(dashboardpageobject.getSetting()));
		Thread.sleep(2000);
	}

	@Then("^I verify the pop up screen$")
	public void i_verify_the_pop_up_screen() throws Throwable {
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(dashboardpageobject.getPopup())));
		// Assert.assertEquals(driver.findElement(dashboardpageobject.getDBPanel()).getText(),
		// property.getProperty("dashboard"));

	}

	@Then("^I click on the Check box$")
	public void i_click_on_the_check_box() throws Throwable {
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(dashboardpageobject.getClockUsage())));
		driver.findElement(dashboardpageobject.getClockUsageCheckBox()).click();

	}

	@Then("^I click on the Save button$")
	public void i_click_on_the_save_hutton() throws Throwable {
		driver.findElement(dashboardpageobject.getClockUsageSave()).click();
	}

	@Then("^I visit Update Employee From Workday$")
	public void i_visit_update_employee_from_workday() throws Throwable {
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(dashboardpageobject.getUEW())));
		Assert.assertEquals(driver.findElement(dashboardpageobject.getUEWFrom()).getText(), "From");
		Assert.assertEquals(driver.findElement(dashboardpageobject.getUEWTo()).getText(), "To");
		Assert.assertEquals(driver.findElement(dashboardpageobject.getUEWGo()).getText(), "Go");
		Assert.assertEquals(driver.findElement(dashboardpageobject.getUEWHireEmp()).getText(), "Hire Employee");
		Assert.assertEquals(driver.findElement(dashboardpageobject.getUEWChangeLegalName()).getText(),
				"Change Legal Name");
		Assert.assertEquals(
				driver.findElement(dashboardpageobject.getUEWChangeOrganizationAssignmentsforWorker()).getText(),
				"Change Organization Assignments for Worker");
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,1000)");
		Assert.assertEquals(driver.findElement(dashboardpageobject.getUEWTransferEmployee()).getText(),
				"Transfer Employee");
		Assert.assertEquals(driver.findElement(dashboardpageobject.getUEWTerminateEmployee()).getText(),
				"Terminate Employee");
		Assert.assertEquals(driver.findElement(dashboardpageobject.getUEWEditOtherIDsforWorker()).getText(),
				"Edit Other IDs for Worker");
		Assert.assertEquals(driver.findElement(dashboardpageobject.getUEWContractContingentWorker()).getText(),
				"Contract Contingent Worker");
		Assert.assertEquals(driver.findElement(dashboardpageobject.getUEWEndContingentWorkerContract()).getText(),
				"End Contingent Worker Contract");
		js.executeScript("window.scrollBy(0,10)");
	}

	@Then("^I visit Update Employee from Synerion$")
	public void i_visit_update_employee_from_synerion() throws Throwable {
		
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(dashboardpageobject.getUEW())));
		Assert.assertEquals(driver.findElement(dashboardpageobject.getUEWFrom()).getText(), "From");
		Assert.assertEquals(driver.findElement(dashboardpageobject.getUEWTo()).getText(), "To");
		Assert.assertEquals(driver.findElement(dashboardpageobject.getUEWGo()).getText(), "Go");
		
	}
	
	@Then("^I Click on From Field in Update Employee From Workday$")
	public void i_click_on_from_field() throws Throwable {
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(dashboardpageobject.getUEW())));
		Thread.sleep(1000);
		driver.findElement(dashboardpageobject.getUEWFromDate()).click();
		Thread.sleep(1000);
		driver.findElement(dashboardpageobject.getCalender()).isDisplayed();

	}

	@Then("^I Click on To Field in Update Employee From Workday$")
	public void i_click_on_to_field() throws Throwable {
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(dashboardpageobject.getUEW())));
		Thread.sleep(2000);

		driver.findElement(dashboardpageobject.getUEWToDate()).click();
		Thread.sleep(2000);
		driver.findElement(dashboardpageobject.getCalender()).isDisplayed();
	}

	@Then("^I verify the Calender components$")
	public void i_verify_the_calender_components() throws Throwable {
		Thread.sleep(3000);
		driver.findElement(dashboardpageobject.getCalender()).isDisplayed();
		Assert.assertTrue(driver.findElement(dashboardpageobject.getForwardButton()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getBackwardButton()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getTimefield()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getHour()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getMinute()).isDisplayed());
	}

	@Then("^I Click on backwardbutton$")
	public void i_click_on_backwardbutton() throws Throwable {
		driver.findElement(dashboardpageobject.getBackwardButton()).click();
	}

	@Then("^I verify the Month$")
	public void i_verify_the_month() throws Throwable {

		Assert.assertTrue(driver.findElement(dashboardpageobject.getMonth()).isDisplayed());
	}

	@Then("^I verify the click of Gobutton$")
	public void i_click_on_gobutton() throws Throwable {
		driver.findElement(dashboardpageobject.getUEWGo()).click();
	}

	@Then("^I click on the process type one by one$")
	public void i_click_on_the_process_type_one_by_one() throws Throwable {
		
		driver.findElement(dashboardpageobject.getUEWHireEmp()).click();
	}

	@Then("^I verify the pop up$")
	public void i_observe_the_pop_up() throws Throwable {
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(dashboardpageobject.getWDPop())));
	}

	@Then("^I verify the components in the pop up$")
	public void i_verify_the_components_in_the_pop_up() throws Throwable {
		Assert.assertTrue(driver.findElement(dashboardpageobject.getCSV()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getExcel()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getClose()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getEmpno()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getName()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getWorkType()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getOrganization()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getPosition()).isDisplayed());
	}
//@CirrusDCS_TC_026

	@Then("^I Click on the CSV button$")
	public void i_click_on_the_csv_button() throws Throwable {
		driver.findElement(dashboardpageobject.getCSV()).click();
		Thread.sleep(5000);
	}

	@Then("^I verify the file Downloaded$")
	public void i_verify_the_file_downloaded() throws Throwable {
		String filename = "Hire Employee.CSV";
		String downloadPath = "C:\\Users\\Vishwasgowda\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;

		for (int i = 0; i < len; i++) {

			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}

//@CirrusDCS_TC_027

	@Then("^I Click on the Excel button$")
	public void i_click_on_the_excel_button() throws Throwable {
		driver.findElement(dashboardpageobject.getExcel()).click();
		Thread.sleep(5000);
	}

	@Then("^I verify the Excel file Downloaded$")
	public void i_verify_the_excel_file_downloaded() throws Throwable {
		String filename = "Hire Employee.XLS";
		String downloadPath = "C:\\Users\\Vishwasgowda\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;

		for (int i = 0; i < len; i++) {

			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}
	// @CirrusDCS_TC_029

	@Then("^I verify the Total Emp Count$")
	public void i_verify_the_total_emp_count() throws Throwable {
		driver.findElement(dashboardpageobject.getTotalEmpCount()).isDisplayed();
	}

	

	// @CirrusDCS_TC_030

	@Then("^I verify the click of Close button$")
	public void i_verify_the_click_of_close_button() throws Throwable {
		driver.findElement(dashboardpageobject.getClose()).click();
		Thread.sleep(2000);
		if (driver.findElements(dashboardpageobject.getWDPop()).size() == 0) {

			System.out.println("Pop up closed sucessfully");
		}

	}

// @CirrusDCS_TC_031
	@Then("^I visit the Offline Clocks$")
	public void i_visit_the_offline_clocks() throws Throwable {
		driver.findElement(dashboardpageobject.getOfflineClocksTable()).isDisplayed();
	}

	@Then("^I verify the components$")
	public void i_verify_the_components() throws Throwable {
		Assert.assertTrue(driver.findElement(dashboardpageobject.getDeviceName()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getDeviceNo()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getLocation()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getLastOneTime()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getTotalEmpCount()).isDisplayed());
	}

// @CirrusDCS_TC_033      
	@Then("^I click on the Excel icon$")
	public void i_click_on_the_excel_icon() throws Throwable {
		driver.findElement(dashboardpageobject.getOCExcel()).click();
		Thread.sleep(2000);
	}

	@Then("^I verify that the Offline Excel file is downloaded$")
	public void i_verify_that_the_excel_file_is_downloaded() throws Throwable {
		
		
		String username = System.getProperty("user.name");
		System.out.println(username);
		String filename = "offlineClocks.XLS";
		String downloadPath = "C:\\Users\\"+username+"\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;

		for (int i = 0; i < len; i++) {

			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}

	}

// @CirrusDCS_TC_034      
	@Then("^I click on the CSV icon$")
	public void i_click_on_the_csv_icon() throws Throwable {
		driver.findElement(dashboardpageobject.getOCCSV()).click();
		Thread.sleep(2000);
	}

	@Then("^I verify that the CSV file is downloaded$")
	public void i_verify_that_the_csv_file_is_downloaded() throws Throwable {
		
		String username = System.getProperty("user.name");
		System.out.println(username);
		String filename = "offlineClocks.CSV";
		String downloadPath = "C:\\Users\\"+username+"\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;

		for (int i = 0; i < len; i++) {

			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}

	}

	// @CirrusDCS_TC_035

	@Then("^I verify the Total field$")
	public void i_verify_the_total_field() throws Throwable {
		
		Thread.sleep(1000);
		Assert.assertTrue(driver.findElement(dashboardpageobject.getTotalEmpCount()).isDisplayed());

	}

// @CirrusDCS_TC_036
	@Then("^I verify the Punch details$")
	public void i_verify_the_punch_details() throws Throwable {
		Assert.assertEquals(driver.findElement(dashboardpageobject.getPunchDetails()).getText(), "Punch Details");
		Assert.assertTrue(driver.findElement(dashboardpageobject.getPDFrom()).isDisplayed());
		Thread.sleep(1000);
		Assert.assertTrue(driver.findElement(dashboardpageobject.getPDTo()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getPDGo()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getInValid()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getValid()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getTotalPunches()).isDisplayed());
	}

	@Then("^I visit punch details$")
	public void i_visit_punch_details() throws Throwable {
		driver.findElement(dashboardpageobject.getPunchDetails()).isDisplayed();
	}

	@Then("^I click on From field$")
	public void i_verify_the_from_field() throws Throwable {
		driver.findElement(dashboardpageobject.getPDFrom()).click();
	}

	@Then("^I verify that click is successfull$")
	public void i_verify_that_click_is_successfull() throws Throwable {
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(dashboardpageobject.getCalender())));
	}

	

	@Then("^I click on To field$")
	public void i_verify_the_to_field() throws Throwable {
		driver.findElement(dashboardpageobject.getPDTo()).click();
	}

	@Then("^I verify the Go button$")
	public void i_verify_the_go_button() throws Throwable {
		
		util.click(driver.findElement(dashboardpageobject.getPDGo()));
	}

	@Then("^I visit the Invalid punches$")
	public void i_visit_the_invalid_punches() throws Throwable {
		
		Thread.sleep(2000);
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(dashboardpageobject.getInValid())));
	}

	@Then("^I verify the Count$")
	public void i_verify_the_count() throws Throwable {
		
		driver.findElement(dashboardpageobject.getInvalidCount()).isDisplayed();
	}

	@Then("^I click on Invalid punches$")
	public void i_click_on_invalid_punches() throws Throwable {
		driver.findElement(dashboardpageobject.getInValid()).click();
	}

	@Then("^I verify the View Punches Pop up$")
	public void i_verify_the_view_punches_pop_up() throws Throwable {
		Thread.sleep(2000);
		driver.findElement(dashboardpageobject.getViewPunchPopUp()).isDisplayed();
	}

	@Then("^I verify the components in pop up$")
	public void i_verify_the_components_in_pop_up() throws Throwable {
		
		Assert.assertTrue(driver.findElement(dashboardpageobject.getVPEmpno()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getVPDeviceSn()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getVPPunchDate()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getVPEventCode()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getVPInvalidReason()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getVPFirst()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getVPPrevious()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getVPNext()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getVPLast()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getVPPageDrop()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getVPClose()).isDisplayed());
	}

	@Then("^I verify the click of Close Button in pop up$")
	public void i_verify_the_click_of_close_button_in_pop_up() throws Throwable {
		driver.findElement(dashboardpageobject.getVPClose()).click();
		if (driver.findElement(dashboardpageobject.getVPClose()).isDisplayed()) {
			System.out.println("Page  still displaying");
		} else {

			System.out.println("page  closed");
		}
	}

	@Then("^I verify the click on valid punches$")
	public void i_click_on_valid_punches() throws Throwable {
		driver.findElement(dashboardpageobject.getValid()).click();
	}

	@Then("^I verify the click on Total punches$")
	public void i_verify_the_click_on_total_punches() throws Throwable {
		driver.findElement(dashboardpageobject.getTotalPunches()).click();
	}

	@Then("^I visit the Time data$")
	public void i_visit_the_time_data() throws Throwable {
		driver.findElement(dashboardpageobject.getTimeData()).isDisplayed();
	}

	@Then("^I verify the Time data components$")
	public void i_verify_the_time_data_components() throws Throwable {
		
		Thread.sleep(2000);
		Assert.assertTrue(driver.findElement(dashboardpageobject.getTDClock()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getTDEmpSN()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getTDFrom()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getTDTo()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getTDSubmit()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getTDCSV()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getTDExcel()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getTDEmpN0()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getTDEmpName()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getTDPunchClock()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getTDPunchTime()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getTDPunchState()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getTDCostCentre()).isDisplayed());

	}

	@Then("^I verify the Clock field$")
	public void i_verify_the_clock_field() throws Throwable {
		
		Thread.sleep(2000);
		driver.findElement(dashboardpageobject.getTDClock()).click();
		driver.findElement(dashboardpageobject.getTDClock()).sendKeys(property.getProperty("Clock"));

	}

	@Then("^I verify the Employee field$")
	public void i_verify_the_employee_field() throws Throwable {
		driver.findElement(dashboardpageobject.getTDEmpSN()).click();
		Thread.sleep(2000);
		driver.findElement(dashboardpageobject.getTDEmpSN()).sendKeys(property.getProperty("Employee"));

	}

	@Then("^I verify the From field$")
	public void i_verify_the_tdfrom_field() throws Throwable {

		Thread.sleep(2000);
		driver.findElement(dashboardpageobject.getTDFrom()).click();

		List<WebElement> Calender = driver.findElements(dashboardpageobject.getCalenderDate());
		for (int i = 0; i < Calender.size(); i++) {

			String date = Calender.get(i).getText();

			if (date.equals("18")) {
				Calender.get(i).click();
				;

				break;

			}
		}

	}

	@Then("^I verify the To field$")
	public void i_verify_the_tdto_field() throws Throwable {
		Thread.sleep(2000);
		driver.findElement(dashboardpageobject.getTDTo()).click();
		List<WebElement> Calender = driver.findElements(dashboardpageobject.getCalenderDate());
		for (int i = 0; i < Calender.size(); i++) {

			String date = Calender.get(i).getText();

			if (date.equals("18")) {
				Calender.get(i).click();
				;

				break;

			}
		}

		WebElement scroll = dashboardpageobject.gettimescrollelement(1);

		driver.findElement(dashboardpageobject.getCalenderHourSlider()).click();

		for (int i = 0; i <= 12; i++) {
			scroll.sendKeys(Keys.ARROW_RIGHT);

		}

		driver.findElement(dashboardpageobject.getCalenderMinSlider()).click();

		WebElement scroll1 = dashboardpageobject.gettimescrollelement(2);

		scroll1.click();

		driver.findElement(dashboardpageobject.getCalenderMinSlider()).click();

		for (int j = 0; j <= 12; j++) {

			Robot r = new Robot();

			r.keyPress(KeyEvent.VK_END);

			r.keyRelease(KeyEvent.VK_END);
		}

	}

	@Then("^I verify the Submit button$")
	public void i_verify_the_submit_button() throws Throwable {
		driver.findElement(dashboardpageobject.getTDSubmit()).click();
	}

	@Then("^I verify the Hour and Min scroll bar$")
	public void i_verify_the_hour_and_min_scroll_bar() throws Throwable {
		WebElement scroll = dashboardpageobject.gettimescrollelement(1);

		driver.findElement(dashboardpageobject.getCalenderHourSlider()).click();

		for (int i = 0; i <= 12; i++) {
			scroll.sendKeys(Keys.ARROW_RIGHT);

		}

		driver.findElement(dashboardpageobject.getCalenderMinSlider()).click();

		WebElement scroll1 = dashboardpageobject.gettimescrollelement(2);

		scroll1.click();

		driver.findElement(dashboardpageobject.getCalenderMinSlider()).click();

		for (int j = 0; j <= 12; j++) {

			Robot r = new Robot();

			r.keyPress(KeyEvent.VK_END);

			r.keyRelease(KeyEvent.VK_END);
		}

	}

	@Then("^I verify the Time$")
	public void i_verify_the_time() throws Throwable {
		Thread.sleep(2000);
		driver.findElement(dashboardpageobject.getUEWVerifiedTime()).isDisplayed();
	}

	@Then("^I enter the Date and Time$")
	public void i_enter_the_date_and_time() throws Throwable {
		List<WebElement> Calender = driver.findElements(dashboardpageobject.getCalenderDate());
		for (int i = 0; i < Calender.size(); i++) {

			String date = Calender.get(i).getText();

			if (date.equals("18")) {
				Calender.get(i).click();
				;

				break;

			}
		}
	}

	@Then("^I Verify the links$")
	public void i_verify_the_links() throws Throwable {
		driver.findElement(dashboardpageobject.getUEWHireEmp()).click();
		driver.findElement(dashboardpageobject.getViewPunchPopUp()).isDisplayed();
		Thread.sleep(2000);
		driver.findElement(dashboardpageobject.getClose()).click();
		driver.findElement(dashboardpageobject.getUEWChangeLegalName()).click();
		driver.findElement(dashboardpageobject.getViewPunchPopUp()).isDisplayed();
		Thread.sleep(2000);
		driver.findElement(dashboardpageobject.getClose()).click();
		driver.findElement(dashboardpageobject.getUEWChangeOrganizationAssignmentsforWorker()).click();
		driver.findElement(dashboardpageobject.getViewPunchPopUp()).isDisplayed();
		Thread.sleep(2000);
		driver.findElement(dashboardpageobject.getClose()).click();
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,10)");
		driver.findElement(dashboardpageobject.getUEWTransferEmployee()).click();
		driver.findElement(dashboardpageobject.getViewPunchPopUp()).isDisplayed();
		driver.findElement(dashboardpageobject.getClose()).click();
		Thread.sleep(2000);
		driver.findElement(dashboardpageobject.getUEWTerminateEmployee()).click();
		driver.findElement(dashboardpageobject.getViewPunchPopUp()).isDisplayed();
		driver.findElement(dashboardpageobject.getClose()).click();
		Thread.sleep(2000);
		driver.findElement(dashboardpageobject.getUEWEditOtherIDsforWorker()).click();
		driver.findElement(dashboardpageobject.getViewPunchPopUp()).isDisplayed();
		driver.findElement(dashboardpageobject.getClose()).click();
		Thread.sleep(2000);
		driver.findElement(dashboardpageobject.getUEWContractContingentWorker()).click();
		driver.findElement(dashboardpageobject.getViewPunchPopUp()).isDisplayed();
		driver.findElement(dashboardpageobject.getClose()).click();
		Thread.sleep(2000);
		driver.findElement(dashboardpageobject.getUEWEndContingentWorkerContract()).click();
		driver.findElement(dashboardpageobject.getViewPunchPopUp()).isDisplayed();
		Thread.sleep(2000);
		driver.findElement(dashboardpageobject.getClose()).click();
		js.executeScript("window.scrollBy(0,10)");
	}

	@Then("^I click on Excel icon$")
	public void i_click_on_excel_icon() throws Throwable {
		driver.findElement(dashboardpageobject.getTDExcel()).click();
	}

	@Then("^I verify that the Time data Excel file is downloaded$")
	public void i_verify_that_the_time_data_excel_file_is_downloaded() throws Throwable {
		
		String username = System.getProperty("user.name");
		System.out.println(username);
		String filename = "timeData.XLS";
		String downloadPath = "C:\\Users\\"+username+"\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;

		for (int i = 0; i < len; i++) {

			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}

	@Then("^I click on CSV icon$")
	public void i_click_on_csv_icon() throws Throwable {
		driver.findElement(dashboardpageobject.getTDCSV()).click();
	}

	@Then("^I verify that the Time data CSV file is downloaded$")
	public void i_verify_that_the_time_data_csv_file_is_downloaded() throws Throwable {
		
		String username = System.getProperty("user.name");
		System.out.println(username);
		String filename = "timeData.CSV";
		String downloadPath = "C:\\Users\\"+username+"\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;

		for (int i = 0; i < len; i++) {

			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}

	@Then("^I verify the Astrix symbol$")
	public void i_verify_the_astrix_symbol() throws Throwable {
		
		Thread.sleep(2000);
		driver.findElement(dashboardpageobject.getFromAstrix()).isDisplayed();
		driver.findElement(dashboardpageobject.getToAstrix()).isDisplayed();
	}

	@Then("^I visit the Clock Usage Alert List$")
	public void i_visit_the_clock_usage_alert_list() throws Throwable {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,600)");
		driver.findElement(dashboardpageobject.getClockUsageAlertList()).isDisplayed();
	}

	@Then("^I verify the Components of Clock Usage Alert List$")
	public void i_verify_the_components_of_clock_usage_alert_list() throws Throwable {
		Assert.assertTrue(driver.findElement(dashboardpageobject.getCUClockName()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getCUClockSN()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getCUEmpGrp()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getCUUsers()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getCUFingerprints()).isDisplayed());
		Thread.sleep(1000);
		Assert.assertTrue(driver.findElement(dashboardpageobject.getCUDiskUsage()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getCUFace()).isDisplayed());
		Thread.sleep(1000);
		Assert.assertTrue(driver.findElement(dashboardpageobject.getCUPunch()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getCUExcel()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getCUCSV()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getCUTotal()).isDisplayed());

	}
	
	@Then("^I verify the Components of Clock Usage Alert List in supertenant$")
	public void i_verify_the_components_of_clock_usage_alert_list_in_supertenant() throws Throwable {
		
		Thread.sleep(1000);
		Assert.assertTrue(driver.findElement(dashboardpageobject.getCUClockName()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getCUClockSN()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getCUUsers()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getCUFingerprints()).isDisplayed());
		Thread.sleep(1000);
		Assert.assertTrue(driver.findElement(dashboardpageobject.getCUDiskUsage()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getCUFace()).isDisplayed());
		Thread.sleep(1000);
		Assert.assertTrue(driver.findElement(dashboardpageobject.getCUPunch()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getCUExcel()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getCUCSV()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getCUTotal()).isDisplayed());

	}

	@Then("^I verify the Clock Usage Total field$")
	public void i_verify_the_clock_usage_total_field() throws Throwable {
		
		Thread.sleep(2000);
		driver.findElement(dashboardpageobject.getCUTotal()).isDisplayed();
	}

	@Then("^I verify the Clock Usage List field$")
	public void i_verify_the_clock_usage_list_field() throws Throwable {
		
		Thread.sleep(2000);
		driver.findElement(dashboardpageobject.getCUList()).isDisplayed();
	}

	@Then("^I click on Clock usage Excel icon$")
	public void i_click_on_clock_usage_excel_icon() throws Throwable {
		driver.findElement(dashboardpageobject.getCUExcel()).click();
	}

	@Then("^I verify that the Clock usage Excel file is downloaded$")
	public void i_verify_that_the_clock_usage_excel_file_is_downloaded() throws Throwable {
		
		String username = System.getProperty("user.name");
		System.out.println(username);
		String filename = "ClockLimit.XLS";
		String downloadPath = "C:\\Users\\"+username+"\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;

		for (int i = 0; i < len; i++) {

			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}

	@Then("^I click on Clock usage CSV icon$")
	public void i_click_on_clock_usage_csv_icon() throws Throwable {
		driver.findElement(dashboardpageobject.getCUCSV()).click();
		Thread.sleep(2000);
	}

	@Then("^I verify that the Clock usage CSV file is downloaded$")
	public void i_verify_that_the_clock_usage_csv_file_is_downloaded() throws Throwable {
		
		String username = System.getProperty("user.name");
		System.out.println(username);
		String filename = "ClockLimit.CSV";
		String downloadPath = "C:\\Users\\"+username+"\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;

		for (int i = 0; i < len; i++) {

			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}

	@Then("^I visit the Clock Assigned to Multiple Sites$")
	public void i_visit_the_clock_assigned_to_multiple_sites() throws Throwable {
		driver.findElement(dashboardpageobject.getClockAssignedtoMultipleSites()).isDisplayed();
	}

	@Then("^I verify the Components of Clock Assigned to Multiple Sites$")
	public void i_verify_the_components_of_clock_assigned_to_multiple_sites() throws Throwable {
		
		Assert.assertTrue(driver.findElement(dashboardpageobject.getCAMClockName()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getCAMClockSn()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getCAMEmpGrp()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getCAMExcel()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getCAMCSV()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getCAMTotal()).isDisplayed());
	}
	
	@Then("^I verify the Components of Clock Assigned to Multiple Sites in supertenant$")
	public void i_verify_the_components_of_clock_assigned_to_multiple_sites_in_supertenant() throws Throwable {
		
		Assert.assertTrue(driver.findElement(dashboardpageobject.getCAMClockName()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getCAMClockSn()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getCAMExcel()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getCAMCSV()).isDisplayed());
		Assert.assertTrue(driver.findElement(dashboardpageobject.getCAMTotal()).isDisplayed());
	}

	@Then("^I verify the Total Clock Assigned to Multiple Sites$")
	public void i_verify_the_total_clock_assigned_to_multiple_sites() throws Throwable {
		driver.findElement(dashboardpageobject.getCAMTotal()).isDisplayed();
	}

	@Then("^I verify the Clock Assigned to Multiple Sites$")
	public void i_verify_the_clock_assigned_to_multiple_sites() throws Throwable {
		driver.findElement(dashboardpageobject.getCAMList()).isDisplayed();
	}

	@Then("^I click on Clock Assigned to Multiple Sites Excel icon$")
	public void i_click_on_clock_assigned_to_multiple_sites_excel_icon() throws Throwable {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,600)");
		driver.findElement(dashboardpageobject.getCAMExcel()).click();
	}

	@Then("^I verify that the Clock Assigned to Multiple Sites Excel file is downloaded$")
	public void i_verify_that_the_clock_assigned_to_multiple_sites_excel_file_is_downloaded() throws Throwable {


		String username = System.getProperty("user.name");
		System.out.println(username);
		String filename = "MultipleAssignment.XLS";
		String downloadPath = "C:\\Users\\"+username+"\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;

		for (int i = 0; i < len; i++) {

			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}

	@Then("^I click on Clock Assigned to Multiple Sites CSV icon$")
	public void i_click_on_clock_assigned_to_multiple_sites_csv_icon() throws Throwable {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,600)");
		driver.findElement(dashboardpageobject.getCAMCSV()).click();
	}

	@Then("^I verify that the Clock Assigned to Multiple Sites CSV file is downloaded$")
	public void i_verify_that_the_clock_assigned_to_multiple_sites_csv_file_is_downloaded() throws Throwable {
		
		String username = System.getProperty("user.name");
		System.out.println(username);
		String filename = "MultipleAssignment.CSV";
		String downloadPath = "C:\\Users\\"+username+"\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;

		for (int i = 0; i < len; i++) {

			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}

	@Then("^I verify that Home icon is visible$")
	public void i_verify_that_home_icon_is_visible() throws Throwable {
		driver.findElement(dashboardpageobject.getHeader()).isDisplayed();
		driver.findElement(dashboardpageobject.getHomeIcon()).isDisplayed();
	}

	@Then("^I verify that Home icon is Accessable$")
	public void i_verify_that_home_icon_is_accessable() throws Throwable {
		driver.findElement(dashboardpageobject.getHomeIcon()).click();
		driver.findElement(dashboardpageobject.getDashboardbutton()).isEnabled();
	}

	@Then("^I verify that message events is visible$")
	public void i_verify_that_message_events_is_visible() throws Throwable {
		driver.findElement(dashboardpageobject.getHeader()).isDisplayed();
		driver.findElement(dashboardpageobject.getMessageEvents()).isDisplayed();
	}

	@Then("^I verify that message events is Accessable$")
	public void i_verify_that_message_events_is_accessable() throws Throwable {
		driver.findElement(dashboardpageobject.getMessageEvents()).click();
		driver.findElement(dashboardpageobject.getAccount()).isEnabled();
	}

	@Then("^I verify that Profile icon is visible$")
	public void i_verify_that_profile_icon_is_visible() throws Throwable {
		driver.findElement(dashboardpageobject.getHeader()).isDisplayed();
		driver.findElement(dashboardpageobject.getProfileIcon()).isDisplayed();
	}

	@Then("^I verify that Profile icon is Accessable$")
	public void i_verify_that_profile_icon_is_accessable() throws Throwable {
		driver.findElement(dashboardpageobject.getProfileIcon()).click();
		driver.findElement(dashboardpageobject.getProfileDrop()).isDisplayed();
	}

	@Then("^I verify that My Profile button is Accessable$")
	public void i_click_on_the_my_profile_button() throws Throwable {
		
		util.click(driver.findElement(dashboardpageobject.getMyProfile()));
		Thread.sleep(1000);
		driver.findElement(dashboardpageobject.getProfilesetting()).isDisplayed();

	}

	@Then("^I verify the Profile Setting page$")
	public void i_verify_the_profile_setting_page() throws Throwable {
		driver.findElement(dashboardpageobject.getUserInfo()).isDisplayed();
		driver.findElement(dashboardpageobject.getSubscription()).isDisplayed();
		driver.findElement(dashboardpageobject.getDashboardSettingProfile()).isDisplayed();
	}

	@Then("^I verify the User Info Components$")
	public void i_verify_the_user_info_components() throws Throwable {
		driver.findElement(dashboardpageobject.getUserInfo()).isEnabled();
		driver.findElement(dashboardpageobject.getFirstName()).isDisplayed();
		driver.findElement(dashboardpageobject.getLastName()).isDisplayed();
		driver.findElement(dashboardpageobject.getClient()).isDisplayed();
		driver.findElement(dashboardpageobject.getUserID()).isDisplayed();
		driver.findElement(dashboardpageobject.getLoginID()).isDisplayed();
		driver.findElement(dashboardpageobject.getPassword()).isDisplayed();
		driver.findElement(dashboardpageobject.getConfirmPassword()).isDisplayed();
		driver.findElement(dashboardpageobject.getCurrentPassword()).isDisplayed();
		driver.findElement(dashboardpageobject.getEmail()).isDisplayed();
		driver.findElement(dashboardpageobject.getStatus()).isDisplayed();
		driver.findElement(dashboardpageobject.getActive()).isDisplayed();
		driver.findElement(dashboardpageobject.getInactive()).isDisplayed();
		driver.findElement(dashboardpageobject.getPhoneNumber()).isDisplayed();
		driver.findElement(dashboardpageobject.getProfileSave()).isDisplayed();
		driver.findElement(dashboardpageobject.getProfileCancel()).isDisplayed();

	}

	@Then("^I click on the Subscription  button$")
	public void i_click_on_the_subscription_button() throws Throwable {
		driver.findElement(dashboardpageobject.getSubscription()).click();
		Thread.sleep(2000);
	}

	@Then("^I verify the Subscription Components$")
	public void i_verify_the_subscription_components() throws Throwable {
		driver.findElement(dashboardpageobject.getSubscriptionCheckBox()).isDisplayed();
		driver.findElement(dashboardpageobject.getSubscriptionName()).isDisplayed();
		driver.findElement(dashboardpageobject.getSubscriptionDescription()).isDisplayed();
		driver.findElement(dashboardpageobject.getSubscriptionButton()).isDisplayed();
	}

	@Then("^I click on the DashboardSettinng  button$")
	public void i_click_on_the_dashboardsettinng_button() throws Throwable {
		driver.findElement(dashboardpageobject.getDashboardSettingProfile()).click();
	}

	@Then("^I verify the DashboardSettinng Components$")
	public void i_verify_the_dashboardsettinng_components() throws Throwable {
		driver.findElement(dashboardpageobject.getDSUpdateEmpReport()).isDisplayed();
		WebElement check = dashboardpageobject.getcheckDashboard(2);
		check.isDisplayed();
		driver.findElement(dashboardpageobject.getDSOfflineClocks()).isDisplayed();
		WebElement check1 = dashboardpageobject.getcheckDashboard(3);
		check1.isDisplayed();
		driver.findElement(dashboardpageobject.getDSTimeData()).isDisplayed();
		WebElement check2 = dashboardpageobject.getcheckDashboard(4);
		check2.isDisplayed();
		driver.findElement(dashboardpageobject.getDSPunchDetails()).isDisplayed();
		WebElement check3 = dashboardpageobject.getcheckDashboard(5);
		check3.isDisplayed();
		driver.findElement(dashboardpageobject.getDSClockUsageAlertList()).isDisplayed();
		WebElement check4 = dashboardpageobject.getcheckDashboard(6);
		check4.isDisplayed();
		driver.findElement(dashboardpageobject.getDSClockAssignedMultipleSites()).isDisplayed();
		WebElement check5 = dashboardpageobject.getcheckDashboard(7);
		check5.isDisplayed();
		driver.findElement(dashboardpageobject.getDSSaveButton()).isDisplayed();
	}

	@Then("^I click on the Logout button$")
	public void i_click_on_the_logout_button() throws Throwable {
		
		util.click(driver.findElement(dashboardpageobject.getLogout()));
		Thread.sleep(2000);
	}

	@Then("^I verify that account is locked out$")
	public void i_verify_that_account_is_locked_out() throws Throwable {
		driver.findElement(dashboardpageobject.getLoginPage()).isDisplayed();
	}

	@Then("^I update the subscription$")
	public void i_update_the_subscription() throws Throwable {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,600)");
		driver.findElement(dashboardpageobject.getHighTempEvent()).isDisplayed();
		driver.findElement(dashboardpageobject.getHighTempEventCheckBox()).click();
		driver.findElement(dashboardpageobject.getSubscriptionButton()).click();
	}

	@Then("^I verify that the Event is subscribed$")
	public void i_verify_that_the_event_is_subscribed() throws Throwable {
		
		util.click(driver.findElement(dashboardpageobject.getProfileIcon()));
		util.click(driver.findElement(dashboardpageobject.getLogout()));
		Thread.sleep(2000);
		driver.get("https://cirrusdev1.workdayclocks.com/iclock/jsp/login.jsp");
		Thread.sleep(2000);
		driver.findElement(dashboardpageobject.getTenantUsername()).sendKeys(property.getProperty("TenantUserName"));
		driver.findElement(dashboardpageobject.getTenantPassword()).sendKeys(property.getProperty("TenantPassword"));
		util.click(driver.findElement(dashboardpageobject.getLoginbutton()));
		util.click(driver.findElement(dashboardpageobject.getProfileIcon()));
		util.click(driver.findElement(dashboardpageobject.getMyProfile()));
		util.click(driver.findElement(dashboardpageobject.getSubscription()));
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,600)");
		driver.findElement(dashboardpageobject.getHighTempEvent()).isDisplayed();
		driver.findElement(dashboardpageobject.getHighTempEventCheckBox()).isSelected();

	}
	
	@Then("^I verify that the Event is subscribed in supertenant$")
	public void i_verify_that_the_event_is_subscribed_in_supertenant() throws Throwable {
		
		util.click(driver.findElement(dashboardpageobject.getProfileIcon()));
		util.click(driver.findElement(dashboardpageobject.getLogout()));
		Thread.sleep(2000);
		driver.get("https://cirrusdev1.workdayclocks.com/iclock/jsp/login.jsp");
		Thread.sleep(2000);
		driver.findElement(dashboardpageobject.getTenantUsername()).sendKeys(property.getProperty("SuperTenantUsername"));
		driver.findElement(dashboardpageobject.getTenantPassword()).sendKeys(property.getProperty("SuperTenantPassword"));
		util.click(driver.findElement(dashboardpageobject.getLoginbutton()));
		Thread.sleep(1000);
		util.click(deviceoperationspageobjects.getButtons("Go To Dashboard"));		
		util.click(driver.findElement(dashboardpageobject.getProfileIcon()));
		util.click(driver.findElement(dashboardpageobject.getMyProfile()));
		util.click(driver.findElement(dashboardpageobject.getSubscription()));
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,600)");
		driver.findElement(dashboardpageobject.getHighTempEvent()).isDisplayed();
		driver.findElement(dashboardpageobject.getHighTempEventCheckBox()).isSelected();

	}

	@Then("^I select the Pages to be displayed in dashboard$")
	public void i_select_the_pages_to_be_displayed_in_dashboard() throws Throwable {
		driver.findElement(dashboardpageobject.getDSUpdateEmpReport()).isDisplayed();
		WebElement check = dashboardpageobject.getcheckDashboard(2);
		check.isSelected();
		driver.findElement(dashboardpageobject.getDSOfflineClocks()).isDisplayed();
		WebElement check1 = dashboardpageobject.getcheckDashboard(3);
		check1.isSelected();
		driver.findElement(dashboardpageobject.getDSTimeData()).isDisplayed();
		WebElement check2 = dashboardpageobject.getcheckDashboard(4);
		check2.isSelected();
		driver.findElement(dashboardpageobject.getDSPunchDetails()).isDisplayed();
		WebElement check3 = dashboardpageobject.getcheckDashboard(5);
		check3.isSelected();
		driver.findElement(dashboardpageobject.getDSClockUsageAlertList()).isDisplayed();
		WebElement check4 = dashboardpageobject.getcheckDashboard(6);
		check4.isSelected();
		driver.findElement(dashboardpageobject.getDSClockAssignedMultipleSites()).isDisplayed();
		WebElement check5 = dashboardpageobject.getcheckDashboard(7);
		check5.isSelected();
		driver.findElement(dashboardpageobject.getDSSaveButton()).click();

	}

	@Then("^I verify the pages in dashboard$")
	public void i_verify_the_pages_in_dashboard() throws Throwable {
		
		util.click(driver.findElement(dashboardpageobject.getHomeIcon()));
		driver.findElement(dashboardpageobject.getUpdatedEmployeeFromWORKDAY()).isDisplayed();
		driver.findElement(dashboardpageobject.getOfflineClocks()).isDisplayed();
		driver.findElement(dashboardpageobject.getTimeData()).isDisplayed();
		driver.findElement(dashboardpageobject.getPunchDetails()).isDisplayed();
		driver.findElement(dashboardpageobject.getClockUsageAlertList()).isDisplayed();
		driver.findElement(dashboardpageobject.getClockAssignedtoMultipleSites()).isDisplayed();
	}

	@Then("^I visit the User Info page and edit the email$")
	public void i_visit_the_user_info_page_and_edit_the_email() throws Throwable {
		driver.findElement(dashboardpageobject.getUserInfo()).isDisplayed();
		driver.findElement(dashboardpageobject.getUserInfoEmail()).clear();
		driver.findElement(dashboardpageobject.getUserInfoEmail()).sendKeys(property.getProperty("EmpID"));
		Thread.sleep(5000);
		driver.findElement(dashboardpageobject.getProfileSave()).click();

	}

	@Then("^I verify the edit email$")
	public void i_verify_the_edit_email() throws Throwable {
		
		util.click(driver.findElement(dashboardpageobject.getProfileIcon()));
		util.click(driver.findElement(dashboardpageobject.getMyProfile()));
		driver.findElement(dashboardpageobject.getUserInfo()).isDisplayed();
		util.click(driver.findElement(dashboardpageobject.getUserInfoEmail()));
		Assert.assertTrue(driver.findElement(dashboardpageobject.getUserEnteredInfoEmail()).isDisplayed());
	}

	@Then("^I visit the User Info page and edit the phone num$")
	public void i_visit_the_user_info_page_and_edit_the_phone_num() throws Throwable {
		driver.findElement(dashboardpageobject.getUserInfo()).isDisplayed();
		driver.findElement(dashboardpageobject.getUserInfoPhone()).clear();
		driver.findElement(dashboardpageobject.getUserInfoPhone()).sendKeys(property.getProperty("EmpPhone"));
		Thread.sleep(5000);
		driver.findElement(dashboardpageobject.getProfileSave()).click();
	}

	@Then("^I verify the edit phone num$")
	public void i_verify_the_edit_phone_num() throws Throwable {
		util.click(driver.findElement(dashboardpageobject.getProfileIcon()));
		driver.findElement(dashboardpageobject.getMyProfile()).click();
		driver.findElement(dashboardpageobject.getUserInfo()).isDisplayed();
		driver.findElement(dashboardpageobject.getUserInfoPhone()).click();
		Assert.assertTrue(driver.findElement(dashboardpageobject.getUserEnteredInfoPhone()).isDisplayed());
	}

	@Then("^I visit the User Info page and edit the Firstname$")
	public void i_visit_the_user_info_page_and_edit_the_firstname() throws Throwable {
		driver.findElement(dashboardpageobject.getUserInfo()).isDisplayed();
		driver.findElement(dashboardpageobject.getUserInfoFirstName()).clear();
		driver.findElement(dashboardpageobject.getUserInfoFirstName()).sendKeys(property.getProperty("EmpFirstName"));
		Thread.sleep(5000);
		driver.findElement(dashboardpageobject.getProfileSave()).click();
	}

	@Then("^I verify the edit Firstname$")
	public void i_verify_the_edit_firstname() throws Throwable {
		
		util.click(driver.findElement(dashboardpageobject.getProfileIcon()));
		util.click(driver.findElement(dashboardpageobject.getMyProfile()));
		driver.findElement(dashboardpageobject.getUserInfo()).isDisplayed();
		driver.findElement(dashboardpageobject.getUserInfoFirstName()).click();
		Assert.assertTrue(driver.findElement(dashboardpageobject.getUserEnteredInfoFirstName()).isDisplayed());
	}

	@Then("^I visit the User Info page and modify the passsword$")
	public void i_visit_the_user_info_page_and_modify_the_passsword() throws Throwable {
		driver.findElement(dashboardpageobject.getUserInfo()).isDisplayed();
		driver.findElement(dashboardpageobject.getUserInfoCurrentPassword()).click();
		driver.findElement(dashboardpageobject.getUserInfoCurrentPassword())
				.sendKeys(property.getProperty("CurrentPassword"));
		driver.findElement(dashboardpageobject.getUserInfoPassword()).click();
		driver.findElement(dashboardpageobject.getUserInfoPassword()).sendKeys(property.getProperty("Password"));
		driver.findElement(dashboardpageobject.getUserInfoConfirmPassword()).click();
		Thread.sleep(1000);
		driver.findElement(dashboardpageobject.getUserInfoConfirmPassword())
				.sendKeys(property.getProperty("ConfirmPassword"));
		driver.findElement(dashboardpageobject.getProfileSave()).click();
	}

	@Then("^I verify the Password modification$")
	public void i_verify_the_password_modification() throws Throwable {
		
		util.click(driver.findElement(dashboardpageobject.getProfileIcon()));
		util.click(driver.findElement(dashboardpageobject.getLogout()));
		Thread.sleep(2000);
		driver.findElement(dashboardpageobject.getTenantUsername()).sendKeys(property.getProperty("TenantUserName"));
		driver.findElement(dashboardpageobject.getTenantPassword()).sendKeys(property.getProperty("ConfirmPassword"));
		driver.findElement(dashboardpageobject.getLoginbutton()).click();
		driver.findElement(dashboardpageobject.getDashboardbutton()).isEnabled();

	}
	@Then("^I verify the Password modification for supertenant$")
	public void i_verify_the_password_modification_for_supertenant() throws Throwable {
		
		util.click(driver.findElement(dashboardpageobject.getProfileIcon()));
		util.click(driver.findElement(dashboardpageobject.getLogout()));
		Thread.sleep(2000);
		driver.findElement(dashboardpageobject.getTenantUsername()).sendKeys(property.getProperty("SuperTenantUsername"));
		driver.findElement(dashboardpageobject.getTenantPassword()).sendKeys(property.getProperty("SuperTenantPassword"));
		driver.findElement(dashboardpageobject.getLoginbutton()).click();
		

	}

	@Then("^I verify the Astrix symbol at First Name and Email$")
	public void i_verify_the_astrix_symbol_at_first_name_and_email() throws Throwable {
		driver.findElement(dashboardpageobject.getUserInfo()).isSelected();
		driver.findElement(dashboardpageobject.getUserInfoFirstAstrix()).isDisplayed();
		driver.findElement(dashboardpageobject.getUserInfoEmailAstrix()).isDisplayed();

	}

	@Then("^I enter the required data$")
	public void i_enter_the_required_data() throws Throwable {
		driver.findElement(dashboardpageobject.getUserInfoEmail()).clear();
		driver.findElement(dashboardpageobject.getUserInfoEmail()).sendKeys(property.getProperty("EmpID"));
		driver.findElement(dashboardpageobject.getUserInfoPhone()).clear();
		driver.findElement(dashboardpageobject.getUserInfoPhone()).sendKeys(property.getProperty("EmpPhone"));
		driver.findElement(dashboardpageobject.getUserInfoFirstName()).clear();
		driver.findElement(dashboardpageobject.getUserInfoFirstName()).sendKeys(property.getProperty("EmpFirstName"));

	}

	@Then("^I verify that details are not saved after accessing cancel button$")
	public void i_verify_that_details_are_not_saved_after_accessing_cancel_button() throws Throwable {
		driver.findElement(dashboardpageobject.getProfileCancel()).click();
		driver.findElement(dashboardpageobject.getProfileIcon()).click();
		driver.findElement(dashboardpageobject.getMyProfile()).click();
		driver.findElement(dashboardpageobject.getUserInfo()).isDisplayed();
		if (driver.findElement(dashboardpageobject.getUserEnteredInfoEmail()).isDisplayed()) {
			System.out.println("details not saved");
		} else {
			System.out.println("details saved");
		}
		if (driver.findElement(dashboardpageobject.getUserEnteredInfoPhone()).isDisplayed()) {
			System.out.println("details not saved");
		} else {
			System.out.println("details saved");
		}
		if (driver.findElement(dashboardpageobject.getUserEnteredInfoFirstName()).isDisplayed()) {
			System.out.println("details not saved");
		} else {
			System.out.println("details saved");
		}

	}

	@Then("^I verify that details are  saved after accessing Save button$")
	public void i_verify_that_details_are_saved_after_accessing_save_button() throws Throwable {
		driver.findElement(dashboardpageobject.getProfileSave()).click();
		util.click(driver.findElement(dashboardpageobject.getProfileIcon()));
		util.click(driver.findElement(dashboardpageobject.getMyProfile()));
		driver.findElement(dashboardpageobject.getUserInfo()).isDisplayed();
		
		Assert.assertTrue(driver.findElement(dashboardpageobject.getUserEnteredInfoEmail()).isDisplayed());
		
		Assert.assertTrue(driver.findElement(dashboardpageobject.getUserEnteredInfoPhone()).isDisplayed());
		
		Assert.assertEquals(driver.findElement(dashboardpageobject.getUserEnteredInfoFirstName()).getAttribute("value"),property.getProperty("EmpFirstName"));


	}

	@Then("^I verify the Status$")
	public void i_verify_the_status() throws Throwable {
		driver.findElement(dashboardpageobject.getUserInfoStatus()).isSelected();

	}

	@Then("^I verify the components in bottom of the page$")
	public void i_verify_the_components_in_bottom_of_the_page() throws Throwable {
		driver.findElement(dashboardpageobject.getUserInfoCopyRights()).isDisplayed();
		driver.findElement(dashboardpageobject.getUserInfoTerms()).isDisplayed();
		driver.findElement(dashboardpageobject.getUserInfoPolicy()).isDisplayed();
		driver.findElement(dashboardpageobject.getUserInfoVersion()).isDisplayed();
	}

	@Then("^I verify the Terms of Use link$")
	public void i_verify_the_terms_of_use_link() throws Throwable {
		driver.findElement(dashboardpageobject.getUserInfoTerms()).click();
		driver.findElement(dashboardpageobject.getTermsOfUse()).isDisplayed();
	}

	@Then("^I verify the privacy policy link$")
	public void i_verify_the_privacy_policy_link() throws Throwable {
		driver.findElement(dashboardpageobject.getUserInfoPolicy()).click();
		driver.findElement(dashboardpageobject.getPrivacyPolicy()).isDisplayed();
	}

	@Then("^I verify the Back to Login link$")
	public void i_verify_the_back_to_login_link() throws Throwable {
		driver.findElement(dashboardpageobject.getUserInfoPolicy()).click();
		driver.findElement(dashboardpageobject.getBacktoLogin()).click();
		driver.findElement(dashboardpageobject.getLoginPage()).isDisplayed();
	}

	@Then("^I click on the Company setup module$")
	public void i_click_on_the_company_setup_module() throws Throwable {
		driver.findElement(agencymanagement.getCompanySetup()).click();
	}

	@Then("^I verify that Agency management module is present$")
	public void i_verify_that_agency_management_module_is_present() throws Throwable {
		driver.findElement(agencymanagement.getAgencyManagement()).isDisplayed();
	}

	@Then("^I click on the Agency Management module$")
	public void i_click_on_the_agency_management_module() throws Throwable {
		driver.findElement(agencymanagement.getAgencyManagement()).click();
	}

	@Then("^I verify the components of Agency management$")
	public void i_verify_the_components_of_agency_management() throws Throwable {
		driver.findElement(agencymanagement.getAgencyList()).isDisplayed();
		driver.findElement(agencymanagement.getAgencyDetails()).isDisplayed();
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,600)");
		driver.findElement(agencymanagement.getEmployeeManagement()).isDisplayed();
	}

	@Then("^I visit the Agency List section$")
	public void i_visit_the_agency_list_section() throws Throwable {
		driver.findElement(agencymanagement.getAgencyList()).click();
	}

	@Then("^I verify the Agency List components$")
	public void i_verify_the_agency_list_components() throws Throwable {
		driver.findElement(agencymanagement.getAgencyListSearchBar()).isDisplayed();
		driver.findElement(agencymanagement.getAgencyListTable()).isDisplayed();
		driver.findElement(agencymanagement.getAddNewAgencyButton()).isDisplayed();
	}

	@Then("^I click on the Add New Agency Button$")
	public void i_click_on_the_add_new_agency_button() throws Throwable {
		driver.findElement(agencymanagement.getAddNewAgencyButton()).click();
		Thread.sleep(2000);
	}

	@Then("^I verify that all the fields are Emptyin Agency details page$")
	public void i_verify_that_all_the_fields_are_emptyin_agency_details_page() throws Throwable {
		boolean AgencyCode = driver.findElement(agencymanagement.getNewAgencyCode()).getText().isEmpty();
		Assert.assertTrue(AgencyCode);
		boolean AgencyName = driver.findElement(agencymanagement.getAgencyName()).getText().isEmpty();
		Assert.assertTrue(AgencyName);
		boolean AgencyFirstName = driver.findElement(agencymanagement.getPrimaryFirstName()).getText().isEmpty();
		Assert.assertTrue(AgencyFirstName);
		boolean AgencyLastName = driver.findElement(agencymanagement.getPrimaryLastName()).getText().isEmpty();
		Assert.assertTrue(AgencyLastName);
		boolean AgencyPhoneNum = driver.findElement(agencymanagement.getAgencyPhoneNum()).getText().isEmpty();
		Assert.assertTrue(AgencyPhoneNum);
		String AgencyLocationID = driver.findElement(agencymanagement.getAgencyLocationID()).getText();
		System.out.println(AgencyLocationID);
		// Assert.assertTrue(AgencyLocationID);
		boolean AgencyMail = driver.findElement(agencymanagement.getAgencyMail()).getText().isEmpty();
		Assert.assertTrue(AgencyMail);
		boolean AgencyAddress1 = driver.findElement(agencymanagement.getAgencyAddress1()).getText().isEmpty();
		Assert.assertTrue(AgencyAddress1);
		boolean AgencyAddress2 = driver.findElement(agencymanagement.getAgencyAddress2()).getText().isEmpty();
		Assert.assertTrue(AgencyAddress2);
		boolean AgencyCity = driver.findElement(agencymanagement.getAgencyCity()).getText().isEmpty();
		Assert.assertTrue(AgencyCity);
		boolean AgencyState = driver.findElement(agencymanagement.getAgencyState()).getText().isEmpty();
		Assert.assertTrue(AgencyState);
		boolean AgencyCountry = driver.findElement(agencymanagement.getAgencyCountry()).getText().isEmpty();
		Assert.assertTrue(AgencyCountry);

	}

// @Then("^I visit the Agency Details section$")
//public void i_visit_the_agency_details_section() throws Throwable {
	// driver.findElement(agencymanagement.getAgencyDetails()).isDisplayed();
//}

	@Then("^I verify the components in Agency Details section$")
	public void i_verify_the_components_in_agency_details_section() throws Throwable {
		driver.findElement(agencymanagement.getNewAgencyCode()).isDisplayed();
		driver.findElement(agencymanagement.getAgencyName()).isDisplayed();
		driver.findElement(agencymanagement.getPrimaryFirstName()).isDisplayed();
		driver.findElement(agencymanagement.getPrimaryLastName()).isDisplayed();
		driver.findElement(agencymanagement.getAgencyPhoneNum()).isDisplayed();
		driver.findElement(agencymanagement.getAgencyLocationID()).isDisplayed();
		driver.findElement(agencymanagement.getAgencyMail()).isDisplayed();
		driver.findElement(agencymanagement.getAgencyAddress1()).isDisplayed();
		driver.findElement(agencymanagement.getAgencyAddress2()).isDisplayed();
		driver.findElement(agencymanagement.getAgencyCity()).isDisplayed();
		driver.findElement(agencymanagement.getAgencyState()).isDisplayed();
		driver.findElement(agencymanagement.getAgencyCountry()).isDisplayed();
		driver.findElement(agencymanagement.getAgencyDetailsSave()).isDisplayed();
		driver.findElement(agencymanagement.getAgencyDetailsCancel()).isDisplayed();
	}

	@Then("^I enter the required details$")
	public void i_enter_the_required_details() throws Throwable {
		driver.findElement(agencymanagement.getNewAgencyCode()).sendKeys(property.getProperty("AgencyCode"));
		driver.findElement(agencymanagement.getAgencyName()).sendKeys(property.getProperty("AgencyName"));
		driver.findElement(agencymanagement.getPrimaryFirstName()).sendKeys(property.getProperty("FirstName"));
		driver.findElement(agencymanagement.getPrimaryLastName()).sendKeys(property.getProperty("LastName"));
		driver.findElement(agencymanagement.getAgencyPhoneNum()).sendKeys(property.getProperty("PhoneNum"));
		driver.findElement(agencymanagement.getAgencyMail()).sendKeys(property.getProperty("Mail"));
		driver.findElement(agencymanagement.getAgencyCity()).sendKeys(property.getProperty("City"));
		driver.findElement(agencymanagement.getAgencyState()).sendKeys(property.getProperty("State"));
		driver.findElement(agencymanagement.getAgencyCountry()).sendKeys(property.getProperty("Country"));
		driver.findElement(agencymanagement.getAgencyAddress1()).sendKeys(property.getProperty("Address1"));
		driver.findElement(agencymanagement.getAgencyAddress2()).sendKeys(property.getProperty("Address2"));
		driver.findElement(agencymanagement.getAgencyDetailsSave()).click();
		driver.findElement(agencymanagement.getAgencyDetailsPopUp()).isDisplayed();
		driver.findElement(agencymanagement.getAgencyDetailsYes()).click();
	}

	@Then("^I verify that the new Agency has been created$")
	public void i_verify_that_the_new_agency_has_been_created() throws Throwable {
		Thread.sleep(2000);
		driver.findElement(agencymanagement.getAgencyResponse()).isDisplayed();

	}

	@Then("^I verify the newly created Agency$")
	public void i_verify_the_newly_created_agency() throws Throwable {
		String NewlyCreatedAgency = driver.findElement(agencymanagement.getNewlyCreatedAgency()).getText();
		System.out.println(NewlyCreatedAgency);
	}

	@Then("^I enter the details other than Agency code$")
	public void i_enter_the_details_other_than_agency_code() throws Throwable {
		Thread.sleep(1000);
		driver.findElement(agencymanagement.getAgencyName()).sendKeys(property.getProperty("AgencyName"));
		driver.findElement(agencymanagement.getAgencyDetailsSave()).click();
		driver.findElement(agencymanagement.getAgencyDetailsPopUp()).isDisplayed();
		driver.findElement(agencymanagement.getAgencyDetailsYes()).click();

	}

	@Then("^I verify the agency code response$")
	public void i_verify_the_code_response() throws Throwable {
		Thread.sleep(2000);
		String AgencyCodeResponse = driver.findElement(agencymanagement.getAgencyCodeResponse()).getText();
		System.out.println(AgencyCodeResponse);
	}

	@Then("^I enter the details other than Agency Name$")
	public void i_enter_the_details_other_than_agency_name() throws Throwable {
		Thread.sleep(1000);
		driver.findElement(agencymanagement.getNewAgencyCode()).sendKeys(property.getProperty("AgencyCode"));
		driver.findElement(agencymanagement.getAgencyDetailsSave()).click();
		driver.findElement(agencymanagement.getAgencyDetailsPopUp()).isDisplayed();
		driver.findElement(agencymanagement.getAgencyDetailsYes()).click();

	}

	@Then("^I verify the agency name response$")
	public void i_verify_the_agency_name_response() throws Throwable {
		Thread.sleep(2000);
		String AgencyNameResponse = driver.findElement(agencymanagement.getAgencyNameResponse()).getText();
		System.out.println(AgencyNameResponse);
	}

	@Then("^I verify that new agency has not been created$")
	public void i_verify_that_new_agency_has_not_been_created() throws Throwable {
		driver.findElement(agencymanagement.getAgencyDefault()).isSelected();
	}

	@Then("^I click on the Cancel button$")
	public void i_click_on_the_cancel_button() throws Throwable {
		driver.findElement(agencymanagement.getAgencyDetailsCancel()).click();
		Thread.sleep(1000);
	}

	@Then("^I enter the new required details$")
	public void i_enter_the_new_required_details() throws Throwable {
		driver.findElement(agencymanagement.getNewAgencyCode()).sendKeys(property.getProperty("NewAgencyCode"));
		driver.findElement(agencymanagement.getAgencyName()).sendKeys(property.getProperty("NewAgencyName"));
		driver.findElement(agencymanagement.getPrimaryFirstName()).sendKeys(property.getProperty("FirstName"));
		driver.findElement(agencymanagement.getPrimaryLastName()).sendKeys(property.getProperty("LastName"));
		driver.findElement(agencymanagement.getAgencyPhoneNum()).sendKeys(property.getProperty("PhoneNum"));
		driver.findElement(agencymanagement.getAgencyMail()).sendKeys(property.getProperty("Mail"));
		driver.findElement(agencymanagement.getAgencyCity()).sendKeys(property.getProperty("City"));
		driver.findElement(agencymanagement.getAgencyState()).sendKeys(property.getProperty("State"));
		driver.findElement(agencymanagement.getAgencyCountry()).sendKeys(property.getProperty("Country"));
		driver.findElement(agencymanagement.getAgencyAddress1()).sendKeys(property.getProperty("Address1"));
		driver.findElement(agencymanagement.getAgencyAddress2()).sendKeys(property.getProperty("Address2"));
	}

	@Then("^I verify the response that appears$")
	public void i_verify_the_response_that_apperas() throws Throwable {
		Thread.sleep(2000);
		String DuplicateAgencyResponse = driver.findElement(agencymanagement.getDuplicateAgencyResponse()).getText();
		System.out.println(DuplicateAgencyResponse);
	}

	@Then("^I click on Save Button$")
	public void i_click_on_agency_save_button() throws Throwable {
		driver.findElement(agencymanagement.getAgencyDetailsSave()).click();
		driver.findElement(agencymanagement.getAgencyDetailsPopUp()).isDisplayed();
		driver.findElement(agencymanagement.getAgencyDetailsYes()).click();
	}

	@Then("^I click on the Search bar and Search for agency$")
	public void i_click_on_the_search_bar_and_search_for_agency() throws Throwable {
		driver.findElement(agencymanagement.getAgencyListSearchBar()).click();
		driver.findElement(agencymanagement.getAgencyListSearchBar()).sendKeys(property.getProperty("AgencyName"));
		driver.findElement(agencymanagement.getAgencyListSearchIcon()).click();

	}

	@Then("^I verify that in records list the agency is found$")
	public void i_verify_that_in_records_list_the_agency_is_found() throws Throwable {
		Thread.sleep(1000);
		String SearchAgency = driver.findElement(agencymanagement.getNewlyCreatedAgency()).getText();
		System.out.println(SearchAgency);
	}

	@Then("^I click on the searched agency$")
	public void i_click_on_the_searched_agency() throws Throwable {
		Thread.sleep(1000);
		driver.findElement(agencymanagement.getNewlyCreatedAgency()).click();
	}

	@Then("^I verify the agency details$")
	public void i_verify_the_agency_details() throws Throwable {
		driver.findElement(agencymanagement.getAgencyDetails()).isDisplayed();
		String AgencyCode = driver.findElement(agencymanagement.getNewAgencyCode()).getText();
		System.out.println(AgencyCode);
		String AgencyName = driver.findElement(agencymanagement.getAgencyName()).getText();
		System.out.println(AgencyName);
		String FirstName = driver.findElement(agencymanagement.getPrimaryFirstName()).getText();
		System.out.println(FirstName);
		String LastName = driver.findElement(agencymanagement.getPrimaryLastName()).getText();
		System.out.println(LastName);
		String PhoneNum = driver.findElement(agencymanagement.getAgencyPhoneNum()).getText();
		System.out.println(PhoneNum);
		String LocationID = driver.findElement(agencymanagement.getAgencyLocationID()).getText();
		System.out.println(LocationID);
		String Mail = driver.findElement(agencymanagement.getAgencyMail()).getText();
		System.out.println(Mail);
		String Address1 = driver.findElement(agencymanagement.getAgencyAddress1()).getText();
		System.out.println(Address1);
		String Address2 = driver.findElement(agencymanagement.getAgencyAddress2()).getText();
		System.out.println(Address2);
		String City = driver.findElement(agencymanagement.getAgencyCity()).getText();
		System.out.println(City);
		String State = driver.findElement(agencymanagement.getAgencyState()).getText();
		System.out.println(State);
		String Country = driver.findElement(agencymanagement.getAgencyCountry()).getText();
		System.out.println(Country);

	}

	@Then("^I click on the Edit button$")
	public void i_click_on_the_edit_button() throws Throwable {
		driver.findElement(agencymanagement.getAgencyEdit()).click();
		Thread.sleep(2000);
	}

	@Then("^I Edit the required details$")
	public void i_edit_the_required_details() throws Throwable {
		driver.findElement(agencymanagement.getPrimaryFirstName()).clear();
		driver.findElement(agencymanagement.getPrimaryFirstName()).sendKeys(property.getProperty("EditFirstName"));
		driver.findElement(agencymanagement.getAgencyPhoneNum()).clear();
		driver.findElement(agencymanagement.getAgencyPhoneNum()).sendKeys(property.getProperty("EditPhoneNum"));
		driver.findElement(agencymanagement.getAgencyDetailsSave()).click();
		driver.findElement(agencymanagement.getAgencyDetailsPopUp()).isDisplayed();
		driver.findElement(agencymanagement.getAgencyDetailsYes()).click();

	}

	@Then("^I verify the response$")
	public void i_verify_the_response() throws Throwable {
		Thread.sleep(2000);
		String AgencyResponse = driver.findElement(agencymanagement.getAgencyResponse()).getText();
		System.out.println(AgencyResponse);
	}

	@Then("^I verify the edited agency details$")
	public void i_verify_the_edited_agency_details() throws Throwable {
		String FirstName = driver.findElement(agencymanagement.getPrimaryFirstName()).getText();
		System.out.println(FirstName);
		String PhoneNum = driver.findElement(agencymanagement.getAgencyPhoneNum()).getText();
		System.out.println(PhoneNum);
	}

	@Then("^I verify that agency code is not editable$")
	public void i_verify_that_agency_code_is_not_editable() throws Throwable {

		WebElement AgencyCode = driver.findElement(By.id("agencyDetailsForm:agencyCode"));
		boolean AgencyCodefield = AgencyCode.isEnabled();
		if (AgencyCodefield == false) {
			System.out.println("user is not able to edit the Agencycodefield");
		} else {
			System.out.println("user is able to edit the Agencycodefield");
		}

	}

	@Then("^I verify the count in Agency list$")
	public void i_verify_the_count_in_agency_list() throws Throwable {
		List<String> mm = new ArrayList<String>();
		String Count = driver.findElement(agencymanagement.getAgencyCount()).getText();
		JavascriptExecutor j = (JavascriptExecutor) driver;
		// j.executeScript("scroll(0,800)");
		WebElement value = driver.findElement(By.xpath("//form[@id='agencyListForm']"));

		String cc = value.getText();
		String[] DD = cc.split("Count :");
		String na = DD[1];

		String[] DD1 = na.split("Add New Agency");
		String na1 = DD1[0].trim();

		System.out.println(na1);

		String ss[] = Count.split(":");
// //   String ss1 [] =ss[1].charAt(0)
//	
////	mm.add(ss1[0]) ;
//	
//	//System.out.println(mm.size());
//	System.out.println(mm.get(0));

	}

	@Then("^I visit the Employee Management section$")
	public void i_visit_the_employee_management_section() throws Throwable {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,600)");
		driver.findElement(agencymanagement.getEmployeeManagement()).isDisplayed();

	}

	@Then("^I verify the components in Employee Management$")
	public void i_verify_the_components_in_employee_management() throws Throwable {
		driver.findElement(agencymanagement.getImportButton()).isDisplayed();
		driver.findElement(agencymanagement.getAddEmployeeButton()).isDisplayed();
		driver.findElement(agencymanagement.getAddLocationButton()).isDisplayed();
		driver.findElement(agencymanagement.getAddOrganizationButton()).isDisplayed();
	}

	@Then("^I click on the Import button$")
	public void i_click_on_the_import_button() throws Throwable {
		driver.findElement(agencymanagement.getImportButton()).click();

	}

	@Then("^I verify the components in Import Employee$")
	public void i_verify_the_components_in_import_employee() throws Throwable {
		driver.findElement(agencymanagement.getEmployeeUpload()).isDisplayed();
		driver.findElement(agencymanagement.getValidEmployee()).isDisplayed();
		driver.findElement(agencymanagement.getInvalidEmployee()).isDisplayed();
		driver.findElement(agencymanagement.getSaveEmpManagement()).isDisplayed();
		driver.findElement(agencymanagement.getCancelEmpManagement()).isDisplayed();
	}

	@Then("^I click on the Add Employee button$")
	public void i_click_on_the_add_employee_button() throws Throwable {
		driver.findElement(agencymanagement.getAddEmployeeButton()).click();
	}

	@Then("^I verify the components in pop up of Add Employee$")
	public void i_verify_the_components_in_pop_up_of_add_employee() throws Throwable {
		driver.findElement(agencymanagement.getEmpOrganization()).isDisplayed();
		driver.findElement(agencymanagement.getEmpLocation()).isDisplayed();
		driver.findElement(agencymanagement.getEmpNumber()).isDisplayed();
		driver.findElement(agencymanagement.getEmpFirstName()).isDisplayed();
		driver.findElement(agencymanagement.getEmpMiddleName()).isDisplayed();
		driver.findElement(agencymanagement.getEmpLastName()).isDisplayed();
		driver.findElement(agencymanagement.getEmpBadgeNum()).isDisplayed();
		driver.findElement(agencymanagement.getEmpCustom1()).isDisplayed();
		driver.findElement(agencymanagement.getEmpCustom2()).isDisplayed();
		driver.findElement(agencymanagement.getEmpSave()).isDisplayed();
		driver.findElement(agencymanagement.getEmpCancel()).isDisplayed();

	}

	@Then("^I enter the employee details$")
	public void i_add_the_employee() throws Throwable {
		Thread.sleep(1000);
		driver.findElement(agencymanagement.getEmpOrganization()).click();
		Thread.sleep(1000);
		driver.findElement(By.xpath(
				"//label[@id='insertEmployee:organization_label']/./..//span[@class='ui-icon ui-icon-triangle-1-s ui-c']"))
				.click();
		Thread.sleep(2000);
		driver.findElement(By.xpath("//li[@id='insertEmployee:organization_1']")).click();
		Thread.sleep(1000);
		driver.findElement(agencymanagement.getEmpNumber()).click();
		driver.findElement(agencymanagement.getEmpNumber()).sendKeys(property.getProperty("EmpNum"));
		Thread.sleep(1000);
		driver.findElement(By.xpath("//label[.='First Name:']/../..//input")).click();
		util.sendtext(driver.findElement(By.xpath("//label[.='First Name:']/../..//input")),
				property.getProperty("EmpFirstName"));

		driver.findElement(agencymanagement.getEmpMiddleName()).click();
		util.sendtext(driver.findElement(agencymanagement.getEmpMiddleName()), property.getProperty("EmpMiddleName"));
		Thread.sleep(3000);
		driver.findElement(By.xpath("//input[@id='insertEmployee:lastName']")).click();
		util.sendtext(driver.findElement(By.xpath("//input[@id='insertEmployee:lastName']")),
				property.getProperty("EmpLastName"));
		driver.findElement(By.xpath("//input[@id='insertEmployee:lastName']")).click();

	}

	@Then("^I click on Add Employee Save Button$")
	public void i_click_on_add_employee_save_button() throws Throwable {
		driver.findElement(agencymanagement.getEmpSave()).click();

		driver.findElement(By.xpath("//div[@id='j_id_f']")).isDisplayed();
		driver.findElement(By.xpath("//button[@id='j_id_g']")).click();
	}

	@Then("^I verify that  it is displaying in Employee Management$")
	public void i_verify_that_it_is_displaying_in_employee_management() throws Throwable {

		agencymanagement.getEmployeemanagementTable();

	}

	@Then("^I click on Add Employee Cancel Button$")
	public void i_click_on_add_employee_cancel_button() throws Throwable {
		driver.findElement(agencymanagement.getEmpCancel()).click();
	}

	@Then("^I verify that  it is not displaying in Employee Management$")
	public void i_verify_that_it_is_not_displaying_in_employee_management() throws Throwable {
		agencymanagement.getEmployeemanagementTable();

	}

	@Then("^I enter employee details without employee number$")
	public void i_enter_employee_details_without_employee_number() throws Throwable {
		Thread.sleep(1000);
		driver.findElement(agencymanagement.getEmpOrganization()).click();
		Thread.sleep(1000);
		driver.findElement(By.xpath(
				"//label[@id='insertEmployee:organization_label']/./..//span[@class='ui-icon ui-icon-triangle-1-s ui-c']"))
				.click();
		Thread.sleep(2000);
		driver.findElement(By.xpath("//li[@id='insertEmployee:organization_1']")).click();
		Thread.sleep(1000);
		driver.findElement(By.xpath("//label[.='First Name:']/../..//input")).click();
		util.sendtext(driver.findElement(By.xpath("//label[.='First Name:']/../..//input")),
				property.getProperty("EmpFirstName"));

		driver.findElement(agencymanagement.getEmpMiddleName()).click();
		util.sendtext(driver.findElement(agencymanagement.getEmpMiddleName()), property.getProperty("EmpMiddleName"));
		Thread.sleep(3000);
		driver.findElement(By.xpath("//input[@id='insertEmployee:lastName']")).click();
		util.sendtext(driver.findElement(By.xpath("//input[@id='insertEmployee:lastName']")),
				property.getProperty("EmpLastName"));
		driver.findElement(By.xpath("//input[@id='insertEmployee:lastName']")).click();

	}

	@Then("^I verify the error message$")
	public void i_verify_the_error_message() throws Throwable {
		driver.findElement(agencymanagement.getErrorMessage()).isDisplayed();
	}

	@Then("^I click on Add Location$")
	public void i_click_on_add_location() throws Throwable {
		driver.findElement(agencymanagement.getAddLocationButton()).click();
		Thread.sleep(1000);
	}

	@Then("^I verify the components in the pop up window$")
	public void i_verify_the_components_in_the_pop_up_window() throws Throwable {
		driver.findElement(agencymanagement.getAddLocationPopUp()).isDisplayed();
		driver.findElement(agencymanagement.getLocationCode()).isDisplayed();
		driver.findElement(agencymanagement.getLocationName()).isDisplayed();

	}

	@Then("^I click on Save button without entering any data$")
	public void i_click_on_save_button_without_entering_any_data() throws Throwable {
		driver.findElement(agencymanagement.getAddLocationPopUp()).isDisplayed();
		driver.findElement(agencymanagement.getLocationCode()).isDisplayed();
		// driver.findElement(agencymanagement.getLocationCode()).click();
		util.sendtext(driver.findElement(agencymanagement.getLocationCode()), property.getProperty("LocationCode"));
		driver.findElement(agencymanagement.getLocationName()).isDisplayed();
		// driver.findElement(agencymanagement.getLocationName()).click();
		util.sendtext(driver.findElement(agencymanagement.getLocationName()), property.getProperty("LocationName"));
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(agencymanagement.getLocationSaveButton())));
		driver.findElement(agencymanagement.getLocationSaveButton()).click();
		driver.findElement(agencymanagement.getAddLocationPopUp()).isDisplayed();
		driver.findElement(By.xpath("//div[@id='j_id_f']")).isDisplayed();
		driver.findElement(By.xpath("//button[@id='j_id_g']")).click();
	}

	@Then("^I Verify the error message regrading mandatory field$")
	public void i_verify_the_error_message_regrading_mandatory_field() throws Throwable {
		driver.findElement(By.xpath("//span[.='Location code required']")).isDisplayed();
		driver.findElement(By.xpath("//span[.='Location name required']")).isDisplayed();
	}

	@Then("^I click on Save button by entering the data$")
	public void i_click_on_save_button_by_entering_the_data() throws Throwable {

//   driver.findElement(agencymanagement.getLocationName()).sendKeys("Blore");
//   driver.findElement(agencymanagement.getLocationCode()).sendKeys("2898");
//  Thread.sleep(2000);
//   driver.findElement(agencymanagement.getLocationSaveButton()).click();
//   

		driver.findElement(agencymanagement.getAddLocationPopUp()).isDisplayed();
		driver.findElement(agencymanagement.getLocationCode()).isDisplayed();
		driver.findElement(agencymanagement.getLocationCode()).click();
		util.sendtext(driver.findElement(agencymanagement.getLocationCode()), property.getProperty("CodeLocation"));
		driver.findElement(agencymanagement.getLocationName()).isDisplayed();
		driver.findElement(agencymanagement.getLocationName()).click();
		util.sendtext(driver.findElement(agencymanagement.getLocationName()), property.getProperty("NameLocation"));
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(agencymanagement.getLocationSaveButton())));
		driver.findElement(agencymanagement.getLocationSaveButton()).click();
		driver.findElement(agencymanagement.getAddLocationPopUp()).isDisplayed();
		driver.findElement(By.xpath("//div[@id='j_id_f']")).isDisplayed();
		driver.findElement(By.xpath("//button[@id='j_id_g']")).click();
	}

	@Then("^I Verify the response message that addition of location is successfull$")
	public void i_verify_the_response_message_that_addition_of_location_is_successfull() throws Throwable {
		driver.findElement(By.xpath("//span[.='Location saved successfully']")).isDisplayed();
	}

	@Then("^I click on Cancel button by entering the data$")
	public void i_click_on_cancel_button_by_entering_the_data() throws Throwable {
		driver.findElement(agencymanagement.getLocationName()).sendKeys("Blore");
		driver.findElement(agencymanagement.getLocationCode()).sendKeys("2898");
		driver.findElement(agencymanagement.getLocationCancelButton()).click();
	}

	@Then("^I click on Device manager Module$")
	public void i_click_on_device_manager_module() throws Throwable {
		driver.findElement(agencymanagement.getDeviceManager()).click();
		// wait.until(ExpectedConditions.visibilityOf(driver.findElement(agencymanagement.getDevicemanagersublists())));
		Thread.sleep(1500);
	}

	@Then("^I click on Device Setup$")
	public void i_click_on_device_setup() throws Throwable {
		driver.findElement(agencymanagement.getDevicesetup()).click();
		Thread.sleep(2000);

	}

	@Then("^I click on Device Edit Button$")
	public void i_click_on_device_edit_button() throws Throwable {
		js = (JavascriptExecutor) driver;
		WebElement ele = driver.findElement(agencymanagement.getDeviceSetupEditButton());
		// js.executeScript("arguments[0].scrollIntoView(true);",
		// driver.findElement(agencymanagement.getDeviceSetupEditButton()));
		js.executeScript("arguments[0].click();", ele);

	}

	@Then("^I click on Device location Dropdown$")
	public void i_click_on_device_location_dropdown() throws Throwable {
		driver.findElement(agencymanagement.getDeviceLoationDropdown()).click();
		wait.until(ExpectedConditions.visibilityOf(
				driver.findElement(By.xpath("//ul[contains(@id,'deviceEditForm:j_id_4q:j_id_5r_items')]"))));
	}

	@Then("^I verify whether location is displayed in the list or not$")
	public void i_verify_whether_location_is_displayed_in_the_list_or_not() throws Throwable {
		List<WebElement> Loclist = driver.findElements(agencymanagement.getDeviceLocationList());

		for (int i = 0; i < Loclist.size(); i++) {
			String Llist = Loclist.get(i).getText();
			// System.out.println(Llist);
			if (Llist != property.getProperty("NameLocation")) {
				assert true;
				System.out.println("Loc not found");
				break;
			}
//	  else
//	  {
//		  System.out.println("Loc Not Found");
//	  }
//	  if(Llist.equals(property.getProperty("NameLocation")))

		}

	}

// Madhu Bhai

	@Given("^Login to the Host account$")
	public void login_to_the_host_account() throws Throwable {

		driver.get(property.getProperty("URLHostlogin"));
		driver.findElement(Dashbord.getUsername()).sendKeys(property.getProperty("Username"));
		driver.findElement(Dashbord.getPassword()).sendKeys(property.getProperty("Password"));
		driver.findElement(Dashbord.getSigninbutton()).click();

	}

	@Then("^Click on the Dashboard module$")
	public void click_on_the_dashboard_module() throws Throwable {
		driver.findElement(Dashbord.getDashboard()).click();
	}

	@Then("Verify the Dashbord module")
	public void verify_the_dashbord_module() throws Throwable {

		Assert.assertEquals(driver.findElement(Dashbord.getDashboard()).getText(), "Dashboard");
	}

//TC_02

	@Then("^access the Dashboard$")
	public void access_the_dashboard() throws Throwable {
		driver.findElement(Dashbord.getOfflineclockcount()).click();

	}

//TC_03
	@Then("^verify all the itms$")
	public void verify_all_the_itms() throws Throwable {

		Assert.assertEquals(driver.findElement(Dashbord.getClockStatusSummary()).getText(), "Clock Status Summary");
		Assert.assertEquals(driver.findElement(Dashbord.getOnlineclockcount()).getText(), "Online");
		Assert.assertEquals(driver.findElement(Dashbord.getOfflineclockcount()).getText(), "Offline");
		Assert.assertEquals(driver.findElement(Dashbord.getTotalclockcount()).getText(), "Total");
		Assert.assertEquals(driver.findElement(Dashbord.getMemoryusage()).getText(), "Memory Usage");
		Assert.assertEquals(driver.findElement(Dashbord.getTotalcapacity()).getText(), "Total Capacity");
		Assert.assertEquals(driver.findElement(Dashbord.getUtilizedmemory()).getText(), "Utilized");
	}

//TC_04
	@Then("^Verify all items in the  Clock status summary table$")
	public void verify_all_items_in_the_clock_status_summary_table() throws Throwable {
		Assert.assertEquals(driver.findElement(Dashbord.getClockStatusSummary()).getText(), "Clock Status Summary");
		Assert.assertEquals(driver.findElement(Dashbord.getOnlineclockcount()).getText(), "Online");
		Assert.assertEquals(driver.findElement(Dashbord.getOfflineclockcount()).getText(), "Offline");
		Assert.assertEquals(driver.findElement(Dashbord.getTotalclockcount()).getText(), "Total");
	}

//TC_05
	@Then("^Verify all items in the Memory usage  table$")
	public void verify_all_items_in_the_memory_usage_table() throws Throwable {
		Assert.assertEquals(driver.findElement(Dashbord.getMemoryusage()).getText(), "Memory Usage");
		Assert.assertEquals(driver.findElement(Dashbord.getTotalcapacity()).getText(), "Total Capacity");
		Assert.assertEquals(driver.findElement(Dashbord.getUtilizedmemory()).getText(), "Utilized");

	}

	// TC_06

	@Then("^Verify the online clocks count$")
	public void verify_the_online_clocks_count() throws Throwable {
		Thread.sleep(2000);
		String a = driver.findElement(Dashbord.getOnlineclockcountNumber()).getText();
		System.out.println(a);
	}

	// TC_07

	@Then("^Verify the offline clocks count$")
	public void verify_the_offline_clocks_count() throws Throwable {
		Thread.sleep(2000);
		String b = driver.findElement(Dashbord.getOfflineclockcountNumber()).getText();
		System.out.println(b);

	}

//TC_08

	@Then("^Verify Total capacity of the memory usage of clocks$")
	public void verify_the_memory_usage_of_clocks() throws Throwable {
		String c = driver.findElement(Dashbord.getTotalcapacityNumber()).getText();
		System.out.println(c);
	}

//TC_09

	@Then("^Verify the utilized Memory usage of the clocks$")
	public void verify_the_utilized_memory_usage_of_the_clocks() throws Throwable {
		String d = driver.findElement(Dashbord.getUtilizedmemoryNumber()).getText();
		System.out.println(d);

	}

//TC_10
	@Then("^Verify the online clocks page is displayed$")
	public void verify_the_online_clocks_page_is_displayed() throws Throwable {
		driver.findElement(Dashbord.getOnlineclockcountNumber()).click();
		WebDriverWait wb = new WebDriverWait(driver, 50);
		wb.until(ExpectedConditions.visibilityOf(driver.findElement(Dashbord.getOnlineclockspageouter())));
		driver.findElement(Dashbord.getOnlineclockspage()).getText();
		Assert.assertEquals(driver.findElement(Dashbord.getOnlineclockspage()).getText(), "Online Clocks");

	}
	// TC_11

	@Then("^Verify the online clocks page all the  table columns is displayed$")
	public void verify_the_online_clocks_page_all_the_table_columns_is_displayed() throws Throwable {
		driver.findElement(Dashbord.getOnlineclockcountNumber()).click();
		WebDriverWait wb = new WebDriverWait(driver, 50);
		wb.until(ExpectedConditions.visibilityOf(driver.findElement(Dashbord.getOnlineclockspageouter())));
		Assert.assertEquals(driver.findElement(Dashbord.getClientid()).getText(), "Client Id");
		Assert.assertEquals(driver.findElement(Dashbord.getDeviceSn()).getText(), "Device Sn");
		Assert.assertEquals(driver.findElement(Dashbord.getDeviceName()).getText(), "Device Name");
		Assert.assertEquals(driver.findElement(Dashbord.getDeviceGroup()).getText(), "Device Group");
		Assert.assertEquals(driver.findElement(Dashbord.getLocation()).getText(), "Location");
		Assert.assertEquals(driver.findElement(Dashbord.getIP()).getText(), "IP");
	}

	// TC_12

	@Then("^Verify the Offline clocks page all the  table columns is displayed$")
	public void verify_the_offline_clocks_page_all_the_table_columns_is_displayed() throws Throwable {
		driver.findElement(Dashbord.getOfflineclockcountNumber()).click();
		WebDriverWait wb = new WebDriverWait(driver, 50);
		wb.until(ExpectedConditions.visibilityOf(driver.findElement(Dashbord.getOflineclockspageouter())));
		Assert.assertEquals(driver.findElement(Dashbord.getOfflineclientid()).getText(), "Client Id");
		Assert.assertEquals(driver.findElement(Dashbord.getOfflineDeviceSn()).getText(), "Device Sn");
		Assert.assertEquals(driver.findElement(Dashbord.getOfflineDeviceName()).getText(), "Device Name");
		Assert.assertEquals(driver.findElement(Dashbord.getOfflineDeviceGroup()).getText(), "Device Group");
		Assert.assertEquals(driver.findElement(Dashbord.getOfflineLocation()).getText(), "Location");
		Assert.assertEquals(driver.findElement(Dashbord.getOfflineIP()).getText(), "IP");

	}

//TC_13
	@Then("^Verify the Total clocks page all the  table columns is displayed$")
	public void verify_the_total_clocks_page_all_the_table_columns_is_displayed() throws Throwable {
		driver.findElement(Dashbord.getTotalclockcountNumber()).click();
		WebDriverWait wb = new WebDriverWait(driver, 50);
		wb.until(ExpectedConditions.visibilityOf(driver.findElement(Dashbord.getTotalclockspageouter())));
		Assert.assertEquals(driver.findElement(Dashbord.getTotalclientid()).getText(), "Client Id");
		Assert.assertEquals(driver.findElement(Dashbord.getTotalDeviceSn()).getText(), "Device Sn");
		Assert.assertEquals(driver.findElement(Dashbord.getTotalDeviceName()).getText(), "Device Name");
		Assert.assertEquals(driver.findElement(Dashbord.getTotalDeviceGroup()).getText(), "Device Group");
		Assert.assertEquals(driver.findElement(Dashbord.getTotalLocation()).getText(), "Location");
		Assert.assertEquals(driver.findElement(Dashbord.getTotalIP()).getText(), "IP");

	}

//TC_14
	@Then("^Verify the online clock details in the online clock page$")
	public void verify_the_online_clock_details_in_the_online_clock_page() throws Throwable {
		driver.findElement(Dashbord.getOnlineclockcountNumber()).click();
		WebDriverWait wb = new WebDriverWait(driver, 50);
		wb.until(ExpectedConditions.visibilityOf(driver.findElement(Dashbord.getOnlineclockspageouter())));

	}

//TC_15
	@Then("^Verify the Offline clock details in the Offline clock page$")
	public void verify_the_offline_clock_details_in_the_offline_clock_page() throws Throwable {
		driver.findElement(Dashbord.getOfflineclockcountNumber()).click();
		WebDriverWait wb = new WebDriverWait(driver, 50);
		wb.until(ExpectedConditions.visibilityOf(driver.findElement(Dashbord.getOflineclockspageouter())));

	}

//TC_16
	@Then("^Verify the Total clock details in the Total clock page$")
	public void verify_the_total_clock_details_in_the_total_clock_page() throws Throwable {
		driver.findElement(Dashbord.getTotalclockcountNumber()).click();
		WebDriverWait wb = new WebDriverWait(driver, 50);
		wb.until(ExpectedConditions.visibilityOf(driver.findElement(Dashbord.getTotalclockspageouter())));

	}

	// TC_17

	@Then("^Verify the home page is  displayed$")
	public void verify_the_home_page_is_displayed() throws Throwable {
		driver.findElement(Dashbord.getHomeicon()).click();
		Assert.assertEquals(driver.findElement(Dashbord.getDashboard()).getText(), "Dashboard");

	}

	// TC_18

	@Then("^click on the message icon$")
	public void click_on_the_message_icon() throws Throwable {
		driver.findElement(Dashbord.getMessageicon()).click();
	}

	@Then("^Verify the Event messages page is displayed$")
	public void verify_the_event_messages_page_is_displayed() throws Throwable {
		Assert.assertEquals(driver.findElement(Dashbord.getEventmessagepagetext()).getText(), "Event Messages");

	}

//TC_19
	@Then("^click on the profile icon$")
	public void click_on_the_profile_icon() throws Throwable {
		driver.findElement(Dashbord.getProfileicon()).click();

	}

	@Then("^Verify the My profile and Logout fields are displayed$")
	public void verify_the_my_profile_and_logout_fields_are_displayed() throws Throwable {
		WebDriverWait wb = new WebDriverWait(driver, 50);
		wb.until(ExpectedConditions.visibilityOf(driver.findElement(Dashbord.getProfileiconouter())));
		Assert.assertEquals(driver.findElement(Dashbord.getMyprofilefield()).getText(), "My Profile");
		Thread.sleep(2000);
		Assert.assertEquals(driver.findElement(Dashbord.getLogoutfield()).getText(), "Logout");
	}

	// TC_20

	@Then("^click on My Profile button$")
	public void click_on_my_profile_button() throws Throwable {
		WebDriverWait wb = new WebDriverWait(driver, 50);
		wb.until(ExpectedConditions.visibilityOf(driver.findElement(Dashbord.getProfileiconouter())));
		driver.findElement(Dashbord.getMyprofilefield()).click();

	}

	@Then("^verify the profile setting page is displayed$")
	public void verify_the_profile_setting_page_is_displayed() throws Throwable {
		Assert.assertEquals(driver.findElement(Dashbord.getMyprofilepage()).getText(), "Profile Settings");
	}

//TC_21
	@Then("^verify the Details,Roles,and Delegacation modules are displayed$")
	public void verify_the_detailsrolesand_delegacation_modules_are_displayed() throws Throwable {
		Assert.assertEquals(driver.findElement(Dashbord.getMyprofileDetails()).getText(), "Details");
		Assert.assertEquals(driver.findElement(Dashbord.getMyprofileRoles()).getText(), "Roles");
		Assert.assertEquals(driver.findElement(Dashbord.getMyprofileDelegations()).getText(), "Delegations");
	}

//TC_22
	@Then("^click on Details module$")
	public void click_on_details_module() throws Throwable {
		
		driver.findElement(Dashbord.getMyprofileDetails()).click();

	}

	@Then("^verify the all fields are displayed$")
	public void verify_the_all_fields_are_displayed() throws Throwable {
		Assert.assertEquals(driver.findElement(Dashbord.getDetailsUsernametext()).getText(), "User Name:");
		Assert.assertEquals(driver.findElement(Dashbord.getDetailsFirstnametext()).getText(), "First Name*");
		Assert.assertEquals(driver.findElement(Dashbord.getDetailsPasswordtext()).getText(), "Password:");
		Assert.assertEquals(driver.findElement(Dashbord.getDetailscurrentpasswordtext()).getText(),
				"Current Password:");
		Assert.assertEquals(driver.findElement(Dashbord.getDetailsEmailtext()).getText(), "Email:*");
		Assert.assertEquals(driver.findElement(Dashbord.getDetailsLoginIdtext()).getText(), "Login Id*");
		Assert.assertEquals(driver.findElement(Dashbord.getDetailsLastNametext()).getText(), "Last Name");
		Assert.assertEquals(driver.findElement(Dashbord.getDetailsConfirmPasswordtext()).getText(),
				"Confirm Password:");
		Assert.assertEquals(driver.findElement(Dashbord.getDetailsPhoneNumbertext()).getText(), "Phone Number*");
		Assert.assertEquals(driver.findElement(Dashbord.getDetailsSendpasswordoveremailchecktext()).getText(),
				"Send password over email");
		Assert.assertEquals(driver.findElement(Dashbord.getDetailssavebutton()).getText(), "Save");

	}

	// TC_23

	@Then("^click on Roles module$")
	public void click_on_roles_module() throws Throwable {
		driver.findElement(Dashbord.getMyprofileRoles()).click();
	}

	@Then("^verify the all Role are displayed$")
	public void verify_the_all_role_are_displayed() throws Throwable {
		Assert.assertEquals(driver.findElement(Dashbord.getRolehostuser()).getText(), "host_user");
		Assert.assertEquals(driver.findElement(Dashbord.getRolehostadmin()).getText(), "host_admin");
		Assert.assertEquals(driver.findElement(Dashbord.getRolehostsupper()).getText(), "host_super");
	}

//TC_24
	@Then("^click on delegation module$")
	public void click_on_delegation_module() throws Throwable {
		driver.findElement(Dashbord.getMyprofileDelegations()).click();

	}

	@Then("^verify the all columns are displayed$")
	public void verify_the_all_columns_are_displayed() throws Throwable {
		Assert.assertEquals(driver.findElement(Dashbord.getDelegationClient()).getText(), "Client");
		Assert.assertEquals(driver.findElement(Dashbord.getDelegationClientName()).getText(), "Client Name");
		Assert.assertEquals(driver.findElement(Dashbord.getDelegationDelegate()).getText(), "Delegate");
	}

//TC_26

	@Then("^click on the logout button$")
	public void click_on_the_logout_button() throws Throwable {
		driver.findElement(Dashbord.getLogoutfield()).click();

	}

	@Then("^verify the host account is logout$")
	public void verify_the_host_account_is_logout() throws Throwable {
		Assert.assertEquals(driver.findElement(Dashbord.getLogoutpage()).getText(), "Sign in into Host Admin Account");

	}

//TC_27

	@Then("^verify the User is able to select the role in the  roles module$")
	public void verify_the_user_is_able_to_select_the_role_in_the_roles_module() throws Throwable {
		driver.findElement(Dashbord.getRolescheckbox()).click();
		Thread.sleep(2000);
		Assert.assertEquals(driver.findElement(Dashbord.getRolescheckbox()).getAttribute("class"),
				property.getProperty("class"));

	}

//TC_28

	@Then("^verify the User is able to select the client in the delegation module$")
	public void verify_the_user_is_able_to_select_the_client_in_the_delegation_module() throws Throwable {

		wait.until(ExpectedConditions.visibilityOf(driver.findElement(Dashbord.getDelegationcheckbox())));
		new Actions(driver).moveToElement(driver.findElement(Dashbord.getDelegationcheckbox())).click().build()
				.perform();
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(Dashbord.getDelegationcheckbox())));
		Assert.assertTrue(driver.findElement(Dashbord.getDelegationcheckbox()).isEnabled());

	}

//TC_29

	@Then("^modify the email address$")
	public void modify_the_email_address() throws Throwable {
		driver.findElement(Dashbord.getDetailsEmailtextfield()).clear();
		driver.findElement(Dashbord.getDetailsEmailtextfield()).sendKeys(property.getProperty("Email"));
		driver.findElement(Dashbord.getDetailsConfirmPasswordtextfield()).sendKeys(property.getProperty("Password"));
		driver.findElement(Dashbord.getDetailscurrentpasswordtextfield()).sendKeys(property.getProperty("Password"));
		driver.findElement(Dashbord.getDetailsPasswordtextfield()).sendKeys(property.getProperty("Password"));
		Thread.sleep(2000);
		driver.findElement(Dashbord.getSavebutton()).click();

	}

	@Then("^Verify the modify the email address$")
	public void verify_the_modify_the_email_address() throws Throwable {
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(Dashbord.getMailmodifiedpopupmessagetable())));
		Assert.assertEquals(driver.findElement(Dashbord.getMailmodifiedpopupmessage()).getText(),
				"Successfully Updated 'admin' Details");

	}

//TC_30

	@Then("^modify the phone number$")
	public void modify_the_phone_number() throws Throwable {
		driver.findElement(Dashbord.getDetailsPhoneNumbertextField()).clear();
		driver.findElement(Dashbord.getDetailsPhoneNumbertextField()).sendKeys(property.getProperty("phoneNumber"));
		driver.findElement(Dashbord.getDetailsConfirmPasswordtextfield()).sendKeys(property.getProperty("Password"));
		driver.findElement(Dashbord.getDetailscurrentpasswordtextfield()).sendKeys(property.getProperty("Password"));
		driver.findElement(Dashbord.getDetailsPasswordtextfield()).sendKeys(property.getProperty("Password"));
		Thread.sleep(2000);
		driver.findElement(Dashbord.getSavebutton()).click();

	}

	@Then("^Verify modify the phone number$")
	public void verify_modify_the_phone_number() throws Throwable {
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(Dashbord.getMailmodifiedpopupmessagetable())));
		Assert.assertEquals(driver.findElement(Dashbord.getMailmodifiedpopupmessage()).getText(),
				"Successfully Updated 'admin' Details");

	}

//TC_31

	@Then("^modify the  first name$")
	public void modify_the_first_name() throws Throwable {
		driver.findElement(Dashbord.getDetailsFirstnametextfield()).clear();
		driver.findElement(Dashbord.getDetailsFirstnametextfield()).sendKeys(property.getProperty("FirstName"));
		driver.findElement(Dashbord.getDetailsConfirmPasswordtextfield()).sendKeys(property.getProperty("Password"));
		driver.findElement(Dashbord.getDetailscurrentpasswordtextfield()).sendKeys(property.getProperty("Password"));
		driver.findElement(Dashbord.getDetailsPasswordtextfield()).sendKeys(property.getProperty("Password"));
		Thread.sleep(2000);
		driver.findElement(Dashbord.getSavebutton()).click();
	}

	@Then("^Verify modify the first name$")
	public void verify_modify_the_first_name() throws Throwable {
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(Dashbord.getMailmodifiedpopupmessagetable())));
		Assert.assertEquals(driver.findElement(Dashbord.getMailmodifiedpopupmessage()).getText(),
				"Successfully Updated 'admin' Details");

	}
	// TC_32

	@Then("^modify the password$")
	public void modify_the_password() throws Throwable {
		driver.findElement(Dashbord.getDetailsConfirmPasswordtextfield()).clear();
		driver.findElement(Dashbord.getDetailsPasswordtextfield()).clear();
		driver.findElement(Dashbord.getDetailsConfirmPasswordtextfield()).sendKeys(property.getProperty("Password"));
		driver.findElement(Dashbord.getDetailscurrentpasswordtextfield()).sendKeys(property.getProperty("Password"));
		driver.findElement(Dashbord.getDetailsPasswordtextfield()).sendKeys(property.getProperty("Password"));
		Thread.sleep(2000);
		driver.findElement(Dashbord.getSavebutton()).click();

	}

	@Then("^Verify modify the password$")
	public void verify_modify_the_password() throws Throwable {
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(Dashbord.getMailmodifiedpopupmessagetable())));
		Assert.assertEquals(driver.findElement(Dashbord.getMailmodifiedpopupmessage()).getText(),
				"Successfully Updated 'admin' Details");

	}
	// TC_33

	@Then("^fill required data$")
	public void fill_required_data() throws Throwable {
		driver.findElement(Dashbord.getDetailsFirstnametextfield()).clear();
		driver.findElement(Dashbord.getDetailsFirstnametextfield()).sendKeys(property.getProperty("FirstName"));
		driver.findElement(Dashbord.getDetailsPhoneNumbertextField()).clear();
		driver.findElement(Dashbord.getDetailsPhoneNumbertextField()).sendKeys(property.getProperty("phoneNumber"));
		driver.findElement(Dashbord.getDetailsEmailtextfield()).clear();
		driver.findElement(Dashbord.getDetailsEmailtextfield()).sendKeys(property.getProperty("Email"));
		driver.findElement(Dashbord.getDetailsConfirmPasswordtextfield()).sendKeys(property.getProperty("Password"));
		driver.findElement(Dashbord.getDetailscurrentpasswordtextfield()).sendKeys(property.getProperty("Password"));
		driver.findElement(Dashbord.getDetailsPasswordtextfield()).sendKeys(property.getProperty("Password"));

		driver.findElement(Dashbord.getSavebutton()).click();

		Thread.sleep(3000);

	}

	@Then("^Verify save all  the data$")
	public void verify_save_all_the_data() throws Throwable {

		Assert.assertEquals(driver.findElement(Dashbord.getDetailsFirstnametextfield()).getAttribute("Value"), "Admin");
		Assert.assertEquals(driver.findElement(Dashbord.getDetailsPhoneNumbertextField()).getAttribute("Value"),
				"9008516378");
		Assert.assertEquals(driver.findElement(Dashbord.getDetailsEmailtextfield()).getAttribute("Value"),
				"testking2022@gmail.com");

	}

//TC_35

	@Then("^verify the all items in the bottom of the page$")
	public void verify_the_all_items_in_the_bottom_of_the_page() throws Throwable {

		Assert.assertEquals(driver.findElement(Dashbord.getCopyright()).getText(),
				"Copyright © 2019. All rights reserved.");
		Assert.assertEquals(driver.findElement(Dashbord.getTermsofUse()).getText(), "Terms of Use");
		Assert.assertEquals(driver.findElement(Dashbord.getPrivacyPolicy()).getText(), "Privacy Policy");
		Assert.assertEquals(driver.findElement(Dashbord.getVersion()).getText(), "Ver 3.14.5");
	}

//TC_36

	@Then("^click on the Terms of use link$")
	public void click_on_the_terms_of_use_link() throws Throwable {
		driver.findElement(Dashbord.getTermsofUse()).click();
	}

	@Then("^verify the CirrusDCS Service Agreement is displayed$")
	public void verify_the_cirrusdcs_service_agreement_is_displayed() throws Throwable {
		Assert.assertEquals(driver.findElement(Dashbord.getTermsofUsepage()).getText(), "Terms of Use");

	}

//TC_37

	@Then("^click on the privacy policy link$")
	public void click_on_the_privacy_policy_link() throws Throwable {
		driver.findElement(Dashbord.getPrivacyPolicy()).click();
	}

	@Then("^verify the CirrusDCS Privacy Policy is displayed$")
	public void verify_the_cirrusdcs_privacy_policy_is_displayed() throws Throwable {
		Assert.assertEquals(driver.findElement(Dashbord.getTermsofUsepage()).getText(), "Terms of Use");

	}

//TC_38

	@Then("^click on the back to login link$")
	public void click_on_the_back_to_login_link() throws Throwable {
		driver.findElement(Dashbord.getBackTologin()).click();

	}

	@Then("^verify the back to login link$")
	public void verify_the_back_to_login_link() throws Throwable {
		Assert.assertEquals(driver.findElement(Dashbord.getSignintohostlogin()).getText(),
				"Sign in into Host Admin Account");

	}

//TC_39

	@Then("^click on the terms of use button$")
	public void click_on_the_terms_of_use_button() throws Throwable {
		driver.findElement(Dashbord.getTermsofUse()).click();

	}

	
	// @Reports_TC_01

	@Then("^Click on the Reports Module$")
	public void click_on_the_reports_module() throws Throwable {
		driver.findElement(RPTS.getReports()).click();
	}

	@Then("^verify the Reports Module$")
	public void verify_the_reports_module() throws Throwable {
		Assert.assertEquals(driver.findElement(RPTS.getReports()).getText(), "Reports");
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(RPTS.getReportsTable())));
		Assert.assertEquals(driver.findElement(RPTS.getSQLReport()).getText(), "SQL Report");
		Assert.assertEquals(driver.findElement(RPTS.getClockUsageReport()).getText(), "Clock Usage Report");
	}

//@Reports_TC_02

	@Then("^click on the Clock Usage Report$")
	public void click_on_the_clock_usage_report() throws Throwable {
		driver.findElement(RPTS.getClockUsageReport()).click();
	}

	@Then("^User should be able to click on the  \"([^\"]*)\" sub module and observe the Client List,Clock Usage Report Details,$")
	public void user_should_be_able_to_click_on_the_something_sub_module_and_observe_the_client_listclock_usage_report_details(
			String strArg1) throws Throwable {
		Assert.assertEquals(driver.findElement(RPTS.getClientList()).getText(), "Client List");
		driver.findElement(RPTS.getClockUsageReportDetails()).isDisplayed();

	}

	// @Reports_TC_03

	@Then("^Verify User should be able to view the Client List block and observe all fields$")
	public void verify_user_should_be_able_to_view_the_client_list_block_and_observe_all_fields() throws Throwable {

		driver.findElement(RPTS.getRecordsPerpage()).isDisplayed();
		driver.findElement(RPTS.getPaginationButton()).isDisplayed();
		driver.findElement(RPTS.getSearchField()).isDisplayed();

	}

//@Reports_TC_04

	@Then("^Verify User should be able to view the Clock Usage Report Details and view all fields$")
	public void verify_user_should_be_able_to_view_the_clock_usage_report_details_and_view_all_fields()
			throws Throwable {

		driver.findElement(RPTS.getFromDayTextfield()).isDisplayed();
		driver.findElement(RPTS.getToDayTextField()).isDisplayed();
		driver.findElement(RPTS.getGoButton()).isDisplayed();
		driver.findElement(RPTS.getRecordsPerpages()).isDisplayed();
		driver.findElement(RPTS.getActiveDeviceCount()).isDisplayed();
		driver.findElement(RPTS.getActiveUserCount()).isDisplayed();
		driver.findElement(RPTS.getInactiveDeviceCount()).isDisplayed();
		driver.findElement(RPTS.getExportAsCSVButton()).isDisplayed();
		driver.findElement(RPTS.getExportAsExcelButton()).isDisplayed();
		driver.findElement(RPTS.getExportAsPDFButton()).isDisplayed();
	}

	// @Reports_TC_05

	@Then("^click on the Serach Textfield$")
	public void click_on_the_serach_textfield() throws Throwable {
		driver.findElement(RPTS.getSearchField()).sendKeys(property.getProperty("TenantId"));
		WebElement abc = driver.findElement(RPTS.getSearchField());
		abc.sendKeys(Keys.ENTER);

	}

	@Then("^Verify the user is able to search the tenant by tenant code$")
	public void verify_the_user_is_able_to_search_the_tenant_by_tenant_code() throws Throwable {
		driver.findElement(RPTS.getCode()).click();
		Assert.assertEquals(driver.findElement(RPTS.getCode()).getText(), property.getProperty("TenantId"));

	}
//@Reports_TC_06

	@Then("^click on the Serach Textfield and Enter the tenant who are not present in the client list$")
	public void click_on_the_serach_textfield_and_enter_the_tenant_who_are_not_present_in_the_client_list()
			throws Throwable {

		driver.findElement(RPTS.getSearchField()).sendKeys(property.getProperty("NotPresentTenantId"));
		WebElement abc = driver.findElement(RPTS.getSearchField());
		abc.sendKeys(Keys.ENTER);

	}

	@Then("^User should not be able to search that tenant who are not present in the client list$")
	public void user_should_not_be_able_to_search_that_tenant_who_are_not_present_in_the_client_list()
			throws Throwable {
		Thread.sleep(0);

		Assert.assertEquals(driver.findElement(RPTS.getNorecordsfound()).getText(), "No records found.");

	}

	// @Reports_TC_08

	@Then("^click on the Records per page button$")
	public void click_on_the_records_per_page_button() throws Throwable {
		driver.findElement(RPTS.getRecordsPerpage()).click();

	}

	@Then("^Verify User should be able to click on the Records per page button and three options should display$")
	public void verify_user_should_be_able_to_click_on_the_records_per_page_button_and_three_options_should_display()
			throws Throwable {

		// driver.findElement(RPTS.getRecordsPerpage()).sendKeys(Keys.ARROW_DOWN);
		driver.findElement(RPTS.getRecordsPerpages20()).getText();
		Assert.assertEquals(driver.findElement(RPTS.getRecordsPerpages20()).getText(), "20");
		driver.findElement(RPTS.getRecordsPerpages50()).getText();
		Assert.assertEquals(driver.findElement(RPTS.getRecordsPerpages50()).getText(), "50");

	}

	// @Reports_TC_07

//    	    @Then("^I Click on the Last Forward Btn andLast Page is displayed$")
//    	    public void i_click_on_the_last_forward_btn_andlast_page_is_displayed() throws Throwable {
//    	       
//    	    WebElement ele = driver.findElement(RPTS.getFastforwardbtn());
//    	    
//    	    js=(JavascriptExecutor)driver;
//    	    
//    	    js.executeScript("arguments[0].click();", ele);
//    	        
//    	    Thread.sleep(2000);
//    	    List<WebElement> Pagebtn = driver.findElements(RPTS.getAllPaginationbtnone_By_One());
//    	    for(int i=0;i<Pagebtn.size();i++)
//    	    {
//    	        WebElement Pagebtn1= Pagebtn.get(i);
//    	        String Name2 = Pagebtn1.getText();
//    	        String Name = Pagebtn1.getAttribute("class");
//    	        System.out.println(Name);
//    	        System.out.println(Name2);
//    	        if(Name.equals(property.getProperty("pageactiveclass")))
//    	        {
//    	            Assert.assertEquals(Name, property.getProperty("pageactiveclass"));
//    	        }           
//    	    }    
//    	    }	    		
//    	    		       	    		      	   
//    	    @Then("^I Click on the firstPage backward Btn and first Page is displayed$")
//    	    public void i_click_on_the_firstpage_backward_btn_and_first_page_is_displayed() throws Throwable {
//    	    	   js=(JavascriptExecutor)driver;
//    	           
//    	           js.executeScript("arguments[0].click();", driver.findElement(RPTS.getFastforwardbtn()));
//    	           
//    	           wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(RPTS.getFirstbackwardbtn())));
//    	           
//    	           js.executeScript("arguments[0].click();",driver.findElement(RPTS.getFirstbackwardbtn()));
//    	           
//    	           Thread.sleep(2000);
//    	           List<WebElement> s1ssd = driver.findElements(RPTS.getAllPaginationbtnone_By_One());
//    	           for(int i=0;i<s1ssd.size();i++)
//    	           {
//    	               WebElement ds= s1ssd.get(i);
//    	               String Name2 = ds.getText();
//    	                String Name = ds.getAttribute("class");
//    	                if(Name.equals(property.getProperty("pageactiveclass")))
//    	                {
//    	                    System.out.println(Name);
//    	                    System.out.println(Name2);
//    	                    Assert.assertEquals(Name2, property.getProperty("firstPageNO"));
//    	                }     
//    	       }
//    	           } 
//    	    	
//    	    	
//    	    
//
	// @Reports_TC_09

	@Then("^Verify user is able to click on the forword button$")
	public void verify_user_is_able_to_click_on_the_forword_button() throws Throwable {
		WebElement ele = driver.findElement(RPTS.getFastforwardbtn());

		js = (JavascriptExecutor) driver;

		js.executeScript("arguments[0].click();", ele);

		Thread.sleep(2000);
		List<WebElement> Pagebtn = driver.findElements(RPTS.getAllPaginationbtnone_By_One());
		for (int i = 0; i < Pagebtn.size(); i++) {
			WebElement Pagebtn1 = Pagebtn.get(i);
			String Name2 = Pagebtn1.getText();
			String Name = Pagebtn1.getAttribute("class");
			System.out.println(Name);
			System.out.println(Name2);
			if (Name.equals(property.getProperty("pageactiveclass"))) {
				Assert.assertEquals(Name, property.getProperty("pageactiveclass"));
			}
		}

		js = (JavascriptExecutor) driver;

		js.executeScript("arguments[0].click();", driver.findElement(RPTS.getFastforwardbtn()));

		wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(RPTS.getFirstbackwardbtn())));

		js.executeScript("arguments[0].click();", driver.findElement(RPTS.getFirstbackwardbtn()));

		Thread.sleep(2000);
		List<WebElement> s1ssd = driver.findElements(RPTS.getAllPaginationbtnone_By_One());
		for (int i = 0; i < s1ssd.size(); i++) {
			WebElement ds = s1ssd.get(i);
			String Name2 = ds.getText();
			String Name = ds.getAttribute("class");
			if (Name.equals(property.getProperty("pageactiveclass"))) {
				System.out.println(Name);
				System.out.println(Name2);
				Assert.assertEquals(Name2, property.getProperty("firstPageNO"));
			}
		}
	}
	// @Reports_TC_10

	@Then("^Verify user is able to click on the Back buttons$")
	public void verify_user_is_able_to_click_on_the_back_buttons() throws Throwable {

		js = (JavascriptExecutor) driver;

		js.executeScript("arguments[0].click();", driver.findElement(RPTS.getFastforwardbtn()));

		wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(RPTS.getFirstbackwardbtn())));

		js.executeScript("arguments[0].click();", driver.findElement(RPTS.getFirstbackwardbtn()));

		Thread.sleep(2000);
		List<WebElement> s1ssd = driver.findElements(RPTS.getAllPaginationbtnone_By_One());
		for (int i = 0; i < s1ssd.size(); i++) {
			WebElement ds = s1ssd.get(i);
			String Name2 = ds.getText();
			String Name = ds.getAttribute("class");
			if (Name.equals(property.getProperty("pageactiveclass"))) {
				System.out.println(Name);
				System.out.println(Name2);
				Assert.assertEquals(Name2, property.getProperty("firstPageNO"));
			}
		}

		wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(RPTS.getNormalbackwardbtn())));

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(RPTS.getNormalbackwardbtn()));

		Thread.sleep(2000);
		for (int j = 0; j < 11; j++) {
			js.executeScript("arguments[0].click();", driver.findElement(RPTS.getAllPaginationbtnone_By_One()));
			Thread.sleep(2000);
			List<WebElement> asd = driver.findElements(RPTS.getAllPaginationbtnone_By_One());
			for (int i = asd.size() - 1; i >= 0; i--) {
				WebElement ds = asd.get(i);
				String Name2 = ds.getText();
				String Name = ds.getAttribute("class");
				if (Name.equals("ui-paginator-page ui-state-default ui-corner-all ui-state-active")) {
					Assert.assertEquals(Name, property.getProperty("ClassAttribute"));
					System.out.println(Name2);
				}
			}
		}
	}

//@Reports_TC_11

	@Then("^Verify user is able to click on the First page button$")
	public void verify_user_is_able_to_click_on_the_first_page_button() throws Throwable {

		js = (JavascriptExecutor) driver;

		js.executeScript("arguments[0].click();", driver.findElement(RPTS.getFastforwardbtn()));

		wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(RPTS.getFirstbackwardbtn())));

		js.executeScript("arguments[0].click();", driver.findElement(RPTS.getFirstbackwardbtn()));

		Thread.sleep(2000);
		List<WebElement> s1ssd = driver.findElements(RPTS.getAllPaginationbtnone_By_One());
		for (int i = 0; i < s1ssd.size(); i++) {
			WebElement ds = s1ssd.get(i);
			String Name2 = ds.getText();
			String Name = ds.getAttribute("class");
			if (Name.equals(property.getProperty("pageactiveclass"))) {
				System.out.println(Name);
				System.out.println(Name2);
				Assert.assertEquals(Name2, property.getProperty("firstPageNO"));
			}
		}
	}

//@Reports_TC_12

	@Then("^Verify user is able to click on the Last page button$")
	public void verify_user_is_able_to_click_on_the_last_page_button() throws Throwable {
		WebElement ele = driver.findElement(RPTS.getFastforwardbtn());

		js = (JavascriptExecutor) driver;

		js.executeScript("arguments[0].click();", ele);

		Thread.sleep(2000);
		List<WebElement> Pagebtn = driver.findElements(RPTS.getAllPaginationbtnone_By_One());
		for (int i = 0; i < Pagebtn.size(); i++) {
			WebElement Pagebtn1 = Pagebtn.get(i);
			String Name2 = Pagebtn1.getText();
			String Name = Pagebtn1.getAttribute("class");
			System.out.println(Name);
			System.out.println(Name2);
			if (Name.equals(property.getProperty("pageactiveclass"))) {
				Assert.assertEquals(Name, property.getProperty("pageactiveclass"));
			}

		}
	}

//@Reports_TC_13

	@Then("^click on from date text field$")
	public void click_on_from_date_text_field() throws Throwable {
		Thread.sleep(2000);
		driver.findElement(RPTS.getFromDayTextfield()).click();
		driver.findElement(RPTS.getFromDayTextfield()).click();
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(RPTS.getCalenderTable())));
		for (int i = 0; i <= 10; i++) {
			driver.findElement(RPTS.getCalenderbackword()).click();
		}

		driver.findElement(RPTS.getDate()).click();
	}

	@Then("^click on the To date text Field$")
	public void click_on_the_to_date_text_field() throws Throwable {

		driver.findElement(RPTS.getToDayTextField()).click();
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(RPTS.getCalenderTable())));
		for (int i = 0; i <= 6; i++) {
			driver.findElement(RPTS.getCalenderbackword()).click();
		}

		driver.findElement(RPTS.getDate()).click();

		Thread.sleep(2000);

	}

	@Then("^click on the Go button$")
	public void click_on_the_go_button() throws Throwable {

		driver.findElement(RPTS.getGoButton()).click();

	}

	@Then("^Verify user is able to Get the Clock Usage Report Details on the screen$")
	public void verify_user_is_able_to_get_the_clock_usage_report_details_on_the_screen() throws Throwable {

		Thread.sleep(2000);

	}

//@Reports_TC_20

	@Then("^click on the  export as  PDF button$")
	public void click_on_the_export_as_pdf_button() throws Throwable {
		driver.findElement(RPTS.getExportAsPDFButton()).click();
		Thread.sleep(2000);

	}

	@Then("^Verify  user is able to export the Clock Usage Report Details in PDF form$")
	public void verify_user_is_able_to_export_the_clock_usage_report_details_in_pdf_form() throws Throwable {

		String filename = "clockUsageReport.PDF";
		String downloadPath = "C:\\Users\\Madhu\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;

		for (int i = 0; i < len; i++) {

			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}

	}

	// @Reports_TC_21

	@Then("^click on the  export as CSV form$")
	public void click_on_the_export_as_csv_form() throws Throwable {
		driver.findElement(RPTS.getExportAsCSVButton()).click();
		Thread.sleep(2000);

	}

	@Then("^Verify user is able to export the Clock Usage Report Details in CSV form$")
	public void verify_user_is_able_to_export_the_clock_usage_report_details_in_csv_form() throws Throwable {
		String filename = "clockUsageReport.CSV";
		String downloadPath = "C:\\Users\\Madhu\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;

		for (int i = 0; i < len; i++) {

			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}

	}

	// @Reports_TC_22

	@Then("^click on the  export as Excel form$")
	public void click_on_the_export_as_excel_form() throws Throwable {
		driver.findElement(RPTS.getExportAsExcelButton()).click();
		Thread.sleep(2000);

	}

	@Then("^Verify  user is able to export the Clock Usage Report Details in Excel form$")
	public void verify_user_is_able_to_export_the_clock_usage_report_details_in_excel_form() throws Throwable {

		String filename = "clockUsageReport.PDF";
		String downloadPath = "C:\\Users\\Madhu\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;

		for (int i = 0; i < len; i++) {

			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}

	// @Reports_TC_23

	@Then("^click on the SQL Reports sub module$")
	public void click_on_the_sql_reports_sub_module() throws Throwable {
		driver.findElement(RPTS.getSQLReport()).click();

	}

	@Then("^Verify User should be able to click on the SQL Reports and observe  the Report Options block is displayed$")
	public void verify_user_should_be_able_to_click_on_the_sql_reports_and_observe_the_report_options_block_is_displayed()
			throws Throwable {

		Assert.assertEquals(driver.findElement(RPTS.getReportOptions()).getText(), "Report Options");
	}

//@Reports_TC_24

	@Then("^User should be able to view the Report options block and observe the  Links$")
	public void user_should_be_able_to_view_the_report_options_block_and_observe_the_links() throws Throwable {

		driver.findElement(RPTS.getRefreshButton()).isDisplayed();
		driver.findElement(RPTS.getDaysactiveemployeepunchcount()).isDisplayed();
		driver.findElement(RPTS.getAdminEmployeeReport()).isDisplayed();
		driver.findElement(RPTS.getAllEmployeeReports()).isDisplayed();
		driver.findElement(RPTS.getDeviceByLocation()).isDisplayed();
		driver.findElement(RPTS.getDevicedetails()).isDisplayed();
		driver.findElement(RPTS.getFailedjobs()).isDisplayed();
		driver.findElement(RPTS.getPunchesuploadedwithdelaytoWorkday()).isDisplayed();
		driver.findElement(RPTS.getSearchemployee()).isDisplayed();
		driver.findElement(RPTS.getTerminatedemployeesstillhavingclock()).isDisplayed();
		driver.findElement(RPTS.getWorkdayDevicecommand()).isDisplayed();
		driver.findElement(RPTS.getWorkdayEmployee()).isDisplayed();
		driver.findElement(RPTS.getWorkdayEmployeeAttInfo()).isDisplayed();
		driver.findElement(RPTS.getWorkdayEmployeefacetemplate()).isDisplayed();
		driver.findElement(RPTS.getWorkdayEmployeefingerprinttemplate()).isDisplayed();
		driver.findElement(RPTS.getWorkdayTranslog()).isDisplayed();
		driver.findElement(RPTS.getRefreshButton()).isDisplayed();

	}

	// @Reports_TC_25

	@Then("^click on the Refresh button$")
	public void click_on_the_refresh_button() throws Throwable {
		driver.findElement(RPTS.getDaysactiveemployeepunchcount()).isDisplayed();

		driver.findElement(RPTS.getRefreshButton()).click();

	}

	@Then("^Verify user is able to click on the Refresh button$")
	public void verify_user_is_able_to_click_on_the_refresh_button() throws Throwable {

		driver.findElement(RPTS.getDaysactiveemployeepunchcount()).isDisplayed();

	}
	// @Reports_TC_26

	@Then("^click on the Admin Employees link$")
	public void click_on_the_admin_employees_link() throws Throwable {

		driver.findElement(RPTS.getAdminEmployeeReport()).click();
	}

	@Then("^Verify User should be able to click on the Admin Employees and all fields should display$")
	public void verify_user_should_be_able_to_click_on_the_admin_employees_and_all_fields_should_display()
			throws Throwable {

		driver.findElement(RPTS.getSELECTCLIENTID()).isDisplayed();
		driver.findElement(RPTS.getDEVICESN()).isDisplayed();
		driver.findElement(RPTS.getORGANIZATIONNAME()).isDisplayed();
		driver.findElement(RPTS.getSubscribeButton()).isDisplayed();
		driver.findElement(RPTS.getSubmiButton()).isDisplayed();

	}
	// @Reports_TC_27

	@Then("^click on the Subscribe dropdown button$")
	public void click_on_the_subscribe_dropdown_button() throws Throwable {
		driver.findElement(RPTS.getSubscribeButton()).click();

	}

	@Then("^Verify user is able to click on the Subscribe dropdown button$")
	public void verify_user_is_able_to_click_on_the_subscribe_dropdown_button() throws Throwable {
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(RPTS.getSubmiButtonTable())));
		Assert.assertEquals(driver.findElement(RPTS.getSubmiButtonDAILY()).getText(), "DAILY");
		Assert.assertEquals(driver.findElement(RPTS.getSubmiButtonWEEKLY()).getText(), "WEEKLY");
		Assert.assertEquals(driver.findElement(RPTS.getSubmiButtonMONTHLY()).getText(), "MONTHLY");
	}

	// @Reports_TC_28

	@Then("^mouse hover action  on the Subscribe dropdown button$")
	public void mouse_hover_action_on_the_subscribe_dropdown_button() throws Throwable {

		WebElement che = driver.findElement(RPTS.getSubscribeButton());
		actions.moveToElement(che);
		Thread.sleep(3000);

	}

	@Then("^Verify user  is able to mouse hover action Subscribe dropdown button$")
	public void verify_user_is_able_to_mouse_hover_action_subscribe_dropdown_button() throws Throwable {
		driver.findElement(RPTS.getPopupmessagee()).isDisplayed();
	}

//@Reports_TC_29

	@Then("^click on the  Daily$")
	public void click_on_the_daily() throws Throwable {
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(RPTS.getSubmiButtonTable())));
		driver.findElement(RPTS.getSubmiButtonDAILY()).click();
	}

	@Then("^Verify Select Client ID popup  should display  on the top of the right corner$")
	public void verify_select_client_id_popup_should_display_on_the_top_of_the_right_corner() throws Throwable {
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(RPTS.getSubmiButtonDAILYpopuptable())));
		Assert.assertEquals(driver.findElement(RPTS.getSubmiButtonDAILYpopup()).getText(), "Select Client ID");
	}

//@Reports_TC_30

	@Then("^Select the Client ID$")
	public void select_the_client_id() throws Throwable {
		driver.findElement(RPTS.getSELECTCLIENTID()).click();
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(RPTS.getClientIDDroupdowntable())));
		js = (JavascriptExecutor) driver;

		js.executeScript("arguments[0].click();", driver.findElement(RPTS.getClientID()));

	}

	@Then("^Verify  Successfully Subscribed popup  message is display$")
	public void verify_successfully_subscribed_popup_message_is_display() throws Throwable {
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(RPTS.getSubmiButtonDAILYpopuptable())));
		Thread.sleep(2000);
		Assert.assertEquals(driver.findElement(RPTS.getClientIDpopup()).getText(), "Successfully Subscribed");

	}

	// @Reports_TC_31

	@Then("^Verify user is able to view the table with all columns$")
	public void verify_user_is_able_to_view_the_table_with_all_columns() throws Throwable {
		Thread.sleep(2000);
		Assert.assertEquals(driver.findElement(RPTS.getSubscribedColumn()).getText(), "Subscribed");
		Assert.assertEquals(driver.findElement(RPTS.getSchedule()).getText(), "Schedule");
		Assert.assertEquals(driver.findElement(RPTS.getAction()).getText(), "Action");
	}

	// @Reports_TC_32

	@Then("^click on the  Monthly$")
	public void click_on_the_monthly() throws Throwable {

		driver.findElement(RPTS.getSubmiButtonMONTHLY()).click();

	}

//@Reports_TC_33

	@Then("^click on the weekly$")
	public void click_on_the_weekly() throws Throwable {
		driver.findElement(RPTS.getSubmiButtonWEEKLY()).click();

	}

	// @Reports_TC_34

	@Then("^click on the  unsubscribe$")
	public void click_on_the_unsubscribe() throws Throwable {
		driver.findElement(RPTS.getUnsubscribe()).click();

	}

	@Then("^Verify the  unsubscribe action is done$")
	public void verify_the_unsubscribe_action_is_done() throws Throwable {
		Thread.sleep(2000);
		boolean b = driver.findElement(RPTS.getUnsubscribeTable()).isDisplayed();

		System.out.println(b);
		if (b == false) {
			System.out.println("table is not display on the screen");
		}

		else {
			System.out.println("table is display on the screen");
		}

	}

//@Reports_TC_35

	@Then("^Verify the user  is able to select the client id  from the dropdown$")
	public void verify_the_user_is_able_to_select_the_client_id_from_the_dropdown() throws Throwable {

		Thread.sleep(2000);

		Assert.assertEquals(driver.findElement(RPTS.getClientdropdown()).getText(), "ZKTK (1)");

	}

	// @Reports_TC_36

	@Then("^click on the device serial number$")
	public void click_on_the_device_serial_number() throws Throwable {
		driver.findElement(RPTS.getDEVICESN()).sendKeys(property.getProperty("SerialNumber"));
	}

	@Then("^verify the device serial number is displayed$")
	public void verify_the_device_serial_number_is_displayed() throws Throwable {
		Thread.sleep(2000);

		driver.findElement(RPTS.getDeviceSN()).isDisplayed();

	}
	// @Reports_TC_37

	@Then("^click on the organization name$")
	public void click_on_the_organization_name() throws Throwable {
		driver.findElement(RPTS.getORGANIZATIONNAME()).sendKeys("OrganazationName");
	}

	@Then("^verify the  organization name$")
	public void verify_the_organization_name() throws Throwable {
		driver.findElement(RPTS.getORGANIZATIONNAME()).isDisplayed();
	}

//@Reports_TC_38
	@Then("^click on the submit button$")
	public void click_on_the_submit_button() throws Throwable {

		driver.findElement(RPTS.getSubmiButton()).click();
	}

	@Then("^verify user is able to click on the Submit button$")
	public void verify_user_is_able_to_click_on_the_submit_button() throws Throwable {
		driver.findElement(RPTS.getSubmiButton()).isDisplayed();

	}

//@Reports_TC_39

	@Then("^Enter the Device SN$")
	public void enter_the_device_sn() throws Throwable {

		driver.findElement(RPTS.getDEVICESN()).sendKeys(property.getProperty("SerialNumber"));
	}

	@Then("^Enter the ORGANIZATION NAME$")
	public void enter_the_organization_name() throws Throwable {
		driver.findElement(RPTS.getORGANIZATIONNAME()).sendKeys("ABCD");
	}

	@Then("^verify   No records found popup message should display$")
	public void verify_no_records_found_popup_message_should_display() throws Throwable {
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(RPTS.getNorecordsfoundpopupTable())));
		Assert.assertEquals(driver.findElement(RPTS.getNorecordsfoundpopup()).getText(), "No records found");

	}

	// @Reports_TC_40

	@Then("^verify Admin Employees report should  display with list of all columns$")
	public void verify_admin_employees_report_should_display_with_list_of_all_columns() throws Throwable {

		wait.until(ExpectedConditions.visibilityOf(driver.findElement(RPTS.getTable())));

		Assert.assertEquals(driver.findElement(RPTS.getTableCLIENTID()).getText(), "CLIENT_ID");
		Assert.assertEquals(driver.findElement(RPTS.getTabledevicesn()).getText(), "device_sn");
		Assert.assertEquals(driver.findElement(RPTS.getTabledevicename()).getText(), "device_name");
		Assert.assertEquals(driver.findElement(RPTS.getTableemployeeno()).getText(), "employee_no");
		Assert.assertEquals(driver.findElement(RPTS.getTableEMPLOYEENAME()).getText(), "EMPLOYEE_NAME");
		Assert.assertEquals(driver.findElement(RPTS.getTableDEVICEROLEID()).getText(), "DEVICE_ROLE_ID");
		Assert.assertEquals(driver.findElement(RPTS.getTableEMPLOYEEBADGENO()).getText(), "EMPLOYEE_BADGE_NO");
		Assert.assertEquals(driver.findElement(RPTS.getTableactive()).getText(), "active");
		Assert.assertEquals(driver.findElement(RPTS.getTableORGANIZATIONNAME()).getText(), "ORGANIZATION_NAME");

		// Assert.assertTrue(driver.findElement(RPTS.getTableORGANIZATIONTYPE()).getText().equals("ORGANIZATION_TYPE"));
		// System.out.println("Accepting Valid Values");

	}

	// @Reports_TC_41

	@Then("^click on the CSV button$")
	public void click_on_the_csv_button() throws Throwable {
		js = (JavascriptExecutor) driver;

		js.executeScript("arguments[0].click();", driver.findElement(RPTS.getCSV()));

	}

	@Then("^verify Admin Employees Report should be download in CSV format$")
	public void verify_admin_employees_report_should_be_download_in_csv_format() throws Throwable {

		String filename = "Admin_Employee_Report_Report_20.CSV";
		String downloadPath = "C:\\Users\\Madhu\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;

		for (int i = 0; i < len; i++) {

			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;

			}

		}
	}

	// @Reports_TC_42

	@Then("^click on the XLS button$")
	public void click_on_the_xls_button() throws Throwable {
		js = (JavascriptExecutor) driver;

		js.executeScript("arguments[0].click();", driver.findElement(RPTS.getXLS()));

	}

	@Then("^verify Admin Employees Report should be download in XLS format$")
	public void verify_admin_employees_report_should_be_download_in_xls_format() throws Throwable {

		String filename = "Admin_Employee_Report_Report_20.xls";
		String downloadPath = "C:\\Users\\Madhu\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;

		for (int i = 0; i < len; i++) {

			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;

			}

		}
	}
	// @Reports_TC_48

	@Then("^click on the Cross mark$")
	public void click_on_the_cross_mark() throws Throwable {
		js = (JavascriptExecutor) driver;

		js.executeScript("arguments[0].click();", driver.findElement(RPTS.getCrossicon()));

	}

	@Then("^verify Admin Employees Report  should be disappear from  the screen$")
	public void verify_admin_employees_report_should_be_disappear_from_the_screen() throws Throwable {

		boolean b = driver.findElement(RPTS.getTable()).isDisplayed();

		System.out.println(b);
		if (b == false) {
			System.out.println("table is not display on the screen");
		}

		else {
			System.out.println("table is display on the screen");
		}

	}
	// @Reports_TC_49

	@Then("^click on All Employee Report link$")
	public void click_on_all_employee_report_link() throws Throwable {

		driver.findElement(RPTS.getAllEmployeeReports()).click();

	}

	@Then("^verify All Employee Report and all fields should display$")
	public void verify_all_employee_report_and_all_fields_should_display() throws Throwable {
		driver.findElement(RPTS.getSubscribeButton()).isDisplayed();
		driver.findElement(RPTS.getSubmiButton()).isDisplayed();
		driver.findElement(RPTS.getClientid()).isDisplayed();

	}

	// @Reports_TC_52

	@Then("^click on submit button$")
	public void click_on_submit_button() throws Throwable {
		Thread.sleep(2000);
		driver.findElement(RPTS.getSubmiButton()).click();

	}

//@Reports_TC_59 	   

	@Then("^verify  All Employee report should  display with list of all columns$")
	public void verify_all_employee_report_should_display_with_list_of_all_columns() throws Throwable {

		wait.until(ExpectedConditions.visibilityOf(driver.findElement(RPTS.getTable())));

		Assert.assertEquals(driver.findElement(RPTS.getAllEMPLOYEENO()).getText(), "EMPLOYEE_NO");
		Assert.assertEquals(driver.findElement(RPTS.getAllWID()).getText(), "WID");
		Assert.assertEquals(driver.findElement(RPTS.getAllformattedname()).getText(), "formatted_name");
		Assert.assertEquals(driver.findElement(RPTS.getAllWORKERIDTYPE()).getText(), "WORKER_ID_TYPE");
		Assert.assertEquals(driver.findElement(RPTS.getAllACTIVE()).getText(), "ACTIVE");
		Assert.assertEquals(driver.findElement(RPTS.getAllZKASSIGNACTION()).getText(), "ZK_ASSIGN_ACTION");
		Assert.assertEquals(driver.findElement(RPTS.getAllBUSINESSLOCATIONCODE()).getText(), "BUSINESS_LOCATION_CODE");
		Assert.assertEquals(driver.findElement(RPTS.getAllCREATEDDATE()).getText(), "CREATED_DATE");
		Assert.assertEquals(driver.findElement(RPTS.getAllMODIFIED_DATE()).getText(), "MODIFIED_DATE");

	}

//@Reports_TC_60     	   

	@Then("^verifyAll Employee report should be download in CSV format$")
	public void verifyall_employee_report_should_be_download_in_csv_format() throws Throwable {

		String filename = "Admin_Employee_Report_Report_20.CSV";
		String downloadPath = "C:\\Users\\Madhu\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;

		for (int i = 0; i < len; i++) {

			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;

			}

		}
	}

//@Reports_TC_61     	   

	@Then("^verify  All Employee Report should be download in XLS format$")
	public void verify_all_employee_report_should_be_download_in_xls_format() throws Throwable {

		String filename = "Admin_Employee_Report_Report_20.XLS";
		String downloadPath = "C:\\Users\\Madhu\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;

		for (int i = 0; i < len; i++) {

			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;

			}

		}
	}

//@Reports_TC_68     

	@Then("^click on Device by location link$")
	public void click_on_device_by_location_link() throws Throwable {
		driver.findElement(RPTS.getDeviceByLocation()).click();
	}

	@Then("^verify All  Device by location link  and all fields should display$")
	public void verify_all_device_by_location_link_and_all_fields_should_display() throws Throwable {

		driver.findElement(RPTS.getSubscribeButton()).isDisplayed();
		driver.findElement(RPTS.getSubmiButton()).isDisplayed();
		driver.findElement(RPTS.getClientid()).isDisplayed();
		driver.findElement(RPTS.getLocation1()).isDisplayed();

	}

	// @Reports_TC_71

	@Then("^Verify user  is able to select the client id  from the dropdown$")
	public void verify_user_is_able_to_select_the_client_id_from_the_dropdown() throws Throwable {
		Assert.assertEquals(driver.findElement(RPTS.getClientIDzk1()).getText(), "ZKTK (1)");
	}

//  @Reports_TC_72        	

	@Then("^click on the location text field$")
	public void click_on_the_location_text_field() throws Throwable {

		driver.findElement(RPTS.getLocation1()).sendKeys("xyz");
		Thread.sleep(2000);

	}

	@Then("^Verify user should be  able to Enter the location in the Location text field$")
	public void verify_user_should_be_able_to_enter_the_location_in_the_location_text_field() throws Throwable {

		Assert.assertEquals(driver.findElement(RPTS.getLocation1()).getAttribute("value"), "xyz");

	}

//  @Reports_TC_82

	@Then("^verify  Device by location report should  display with list of all columns$")
	public void verify_device_by_location_report_should_display_with_list_of_all_columns() throws Throwable {

		wait.until(ExpectedConditions.visibilityOf(driver.findElement(RPTS.getTable())));

		Assert.assertEquals(driver.findElement(RPTS.getTableCLIENTID()).getText(), "CLIENT_ID");
		Assert.assertEquals(driver.findElement(RPTS.getDEVICE_MODEL()).getText(), "DEVICE_MODEL");
		Assert.assertEquals(driver.findElement(RPTS.getDEVICE_NAME()).getText(), "DEVICE_NAME");
		Assert.assertEquals(driver.findElement(RPTS.getPLATFORM()).getText(), "PLATFORM");
		Assert.assertEquals(driver.findElement(RPTS.getLOCATION_CODE()).getText(), "LOCATION_CODE");
		Assert.assertEquals(driver.findElement(RPTS.getLOCATION_NAME()).getText(), "LOCATION_NAME");
		Assert.assertEquals(driver.findElement(RPTS.getLOCATION_USAGE()).getText(), "LOCATION_USAGE");

	}

	@Then("^verify location  Report  should be disappear from  the screen$")
	public void verify_location_report_should_be_disappear_from_the_screen() throws Throwable {

		boolean b = driver.findElement(RPTS.getTable()).isDisplayed();

		System.out.println(b);
		if (b == false) {
			System.out.println("table is not display on the screen");
		}

		else {
			System.out.println("table is display on the screen");
		}

	}

//  @Reports_TC_91

	@Then("^click on  Failed jobs link$")
	public void click_on_all_failed_jobs_link() throws Throwable {

		driver.findElement(RPTS.getFailedjobs()).click();
		Thread.sleep(2000);
	}

	@Then("^verify  Failed jobs and all fields should display$")
	public void verify_all_failed_jobs_and_all_fields_should_display() throws Throwable {

		Assert.assertEquals(driver.findElement(RPTS.getSubmiButton()).getText(), "Submit");
		Assert.assertEquals(driver.findElement(RPTS.getSubscribeButton()).getText(), "Subscribe");

	}

	@Then("^click on the Subscribe dropdown button in Failed jobs$")
	public void click_on_the_subscribe_dropdown_button_in_failed_jobs() throws Throwable {
		// js=(JavascriptExecutor)driver;

		// js.executeScript("arguments[0].click();",
		// driver.findElement(RPTS.getSubscribeButton2()));

		driver.findElement(RPTS.getSubscribeButton2()).click();
	}

	// @Reports_TC_106

	@Then("^click on Failed jobs Punches uploaded with delay to Workday link$")
	public void click_on_failed_jobs_punches_uploaded_with_delay_to_workday_link() throws Throwable {
		driver.findElement(RPTS.getPunchesuploadedwithdelaytoWorkday()).click();

	}

	@Then("^verify  Punches uploaded with delay to Workday link all fields should display$")
	public void verify_punches_uploaded_with_delay_to_workday_link_all_fields_should_display() throws Throwable {

		Assert.assertEquals(driver.findElement(RPTS.getSubmiButton()).getText(), "Submit");
		Assert.assertEquals(driver.findElement(RPTS.getSubscribeButton()).getText(), "Subscribe");

	}

	@Then("^click on the Search employee link$")
	public void click_on_the_search_employee_link() throws Throwable {

		driver.findElement(RPTS.getSearchemployee()).click();

	}

	@Then("^Verify User should be able to click on the Search employee and all fields should display$")
	public void verify_user_should_be_able_to_click_on_the_search_employee_and_all_fields_should_display()
			throws Throwable {

		driver.findElement(RPTS.getSELECTCLIENTID()).isDisplayed();
		driver.findElement(RPTS.getEmployeeNO()).isDisplayed();
		driver.findElement(RPTS.getSubscribeButton()).isDisplayed();
		driver.findElement(RPTS.getSubmiButton()).isDisplayed();

	} // @Reports_TC_106

	@Then("^Enter the EMPLOYEE NO in EMPLOYEE NO Text field$")
	public void enter_the_employee_no_in_employee_no_text_field() throws Throwable {

		driver.findElement(RPTS.getEmployeeNO()).sendKeys("21238");
	}

	@Then("^Verify EMPLOYEE NO Text field$")
	public void verify_employee_no_text_field() throws Throwable {

		driver.findElement(RPTS.getEmployeeNO()).isDisplayed();

	}

	// @Reports_TC_148

	@Then("^verify  Employees data report should  display with list of all columns$")
	public void verify_employees_data_report_should_display_with_list_of_all_columns() throws Throwable {

		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,1000)");
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(RPTS.getTable123())));
		Assert.assertEquals(driver.findElement(RPTS.getAllEMPLOYEENO()).getText(), "EMPLOYEE_NO");
		Assert.assertEquals(driver.findElement(RPTS.getAllWID()).getText(), "WID");
		Assert.assertEquals(driver.findElement(RPTS.getAllformattedname()).getText(), "formatted_name");
		Assert.assertEquals(driver.findElement(RPTS.getAllWORKERIDTYPE()).getText(), "WORKER_ID_TYPE");
		Assert.assertEquals(driver.findElement(RPTS.getAllACTIVE()).getText(), "ACTIVE");
		Assert.assertEquals(driver.findElement(RPTS.getAllZKASSIGNACTION()).getText(), "ZK_ASSIGN_ACTION");
		Assert.assertEquals(driver.findElement(RPTS.getAllBUSINESSLOCATIONCODE()).getText(), "BUSINESS_LOCATION_CODE");
		Assert.assertEquals(driver.findElement(RPTS.getAllCREATEDDATE()).getText(), "CREATED_DATE");
		Assert.assertEquals(driver.findElement(RPTS.getAllMODIFIED_DATE()).getText(), "MODIFIED_DATE");

	}

	@Then("^I Click on the Last Forward Btn andLast Page is should be displayed$")
	public void i_click_on_the_last_forward_btn_andlast_page_is_should_be_displayed() throws Throwable {
		WebElement ele = driver.findElement(RPTS.getFirstbackwardbtn1());

		js = (JavascriptExecutor) driver;

		js.executeScript("arguments[0].click();", ele);

		Thread.sleep(2000);
		List<WebElement> Pagebtn = driver.findElements(RPTS.getAllPaginationbtnone_By_One1());
		for (int i = 0; i < Pagebtn.size(); i++) {
			WebElement Pagebtn1 = Pagebtn.get(i);
			String Name2 = Pagebtn1.getText();
			String Name = Pagebtn1.getAttribute("class");
			System.out.println(Name);
			System.out.println(Name2);
			if (Name.equals(property.getProperty("pageactiveclass"))) {
				Assert.assertEquals(Name, property.getProperty("pageactiveclass"));
			}
		}
	}

	@Then("^I Click on the firstPage backward Btn and first Page is  should be  displayed$")
	public void i_click_on_the_firstpage_backward_btn_and_first_page_is_should_be_displayed() throws Throwable {
		js = (JavascriptExecutor) driver;

		js.executeScript("arguments[0].click();", driver.findElement(RPTS.getFastforwardbtn1()));

		wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(RPTS.getFirstbackwardbtn1())));

		js.executeScript("arguments[0].click();", driver.findElement(RPTS.getFirstbackwardbtn1()));

		Thread.sleep(2000);
		List<WebElement> s1ssd = driver.findElements(RPTS.getAllPaginationbtnone_By_One1());
		for (int i = 0; i < s1ssd.size(); i++) {
			WebElement ds = s1ssd.get(i);
			String Name2 = ds.getText();
			String Name = ds.getAttribute("class");
			if (Name.equals(property.getProperty("pageactiveclass"))) {
				System.out.println(Name);
				System.out.println(Name2);
				Assert.assertEquals(Name2, property.getProperty("firstPageNO"));
			}
		}
	}

	@Then("^Verify user should be   to click on the forword button$")
	public void verify_user_should_be_to_click_on_the_forword_button() throws Throwable {

		WebElement ele = driver.findElement(RPTS.getFastforwardbtn1());

		js = (JavascriptExecutor) driver;

		js.executeScript("arguments[0].click();", ele);

		Thread.sleep(2000);
		List<WebElement> Pagebtn = driver.findElements(RPTS.getAllPaginationbtnone_By_One1());
		for (int i = 0; i < Pagebtn.size(); i++) {
			WebElement Pagebtn1 = Pagebtn.get(i);
			String Name2 = Pagebtn1.getText();
			String Name = Pagebtn1.getAttribute("class");
			System.out.println(Name);
			System.out.println(Name2);
			if (Name.equals(property.getProperty("pageactiveclass"))) {
				Assert.assertEquals(Name, property.getProperty("pageactiveclass"));
			}
		}

		js = (JavascriptExecutor) driver;

		js.executeScript("arguments[0].click();", driver.findElement(RPTS.getFastforwardbtn1()));

		wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(RPTS.getFirstbackwardbtn1())));

		js.executeScript("arguments[0].click();", driver.findElement(RPTS.getFirstbackwardbtn1()));

		Thread.sleep(2000);
		List<WebElement> s1ssd = driver.findElements(RPTS.getAllPaginationbtnone_By_One1());
		for (int i = 0; i < s1ssd.size(); i++) {
			WebElement ds = s1ssd.get(i);
			String Name2 = ds.getText();
			String Name = ds.getAttribute("class");
			if (Name.equals(property.getProperty("pageactiveclass"))) {
				System.out.println(Name);
				System.out.println(Name2);
				Assert.assertEquals(Name2, property.getProperty("firstPageNO"));
			}
		}
	}

	@Then("^Verify user should be to click on the Back button$")
	public void verify_user_should_be_to_click_on_the_back_button() throws Throwable {

		js = (JavascriptExecutor) driver;

		js.executeScript("arguments[0].click();", driver.findElement(RPTS.getFastforwardbtn1()));

		wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(RPTS.getFirstbackwardbtn1())));

		js.executeScript("arguments[0].click();", driver.findElement(RPTS.getFirstbackwardbtn1()));

		Thread.sleep(2000);
		List<WebElement> s1ssd = driver.findElements(RPTS.getAllPaginationbtnone_By_One1());
		for (int i = 0; i < s1ssd.size(); i++) {
			WebElement ds = s1ssd.get(i);
			String Name2 = ds.getText();
			String Name = ds.getAttribute("class");
			if (Name.equals(property.getProperty("pageactiveclass"))) {
				System.out.println(Name);
				System.out.println(Name2);
				Assert.assertEquals(Name2, property.getProperty("firstPageNO"));
			}
		}

	}

	@Then("^Verify user is should be  to click on the First page button$")
	public void verify_user_is_should_be_to_click_on_the_first_page_button() throws Throwable {

		js = (JavascriptExecutor) driver;

		js.executeScript("arguments[0].click();", driver.findElement(RPTS.getFastforwardbtn1()));

		wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(RPTS.getFirstbackwardbtn1())));

		js.executeScript("arguments[0].click();", driver.findElement(RPTS.getFirstbackwardbtn1()));

		Thread.sleep(2000);
		List<WebElement> s1ssd = driver.findElements(RPTS.getAllPaginationbtnone_By_One1());
		for (int i = 0; i < s1ssd.size(); i++) {
			WebElement ds = s1ssd.get(i);
			String Name2 = ds.getText();
			String Name = ds.getAttribute("class");
			if (Name.equals(property.getProperty("pageactiveclass"))) {
				System.out.println(Name);
				System.out.println(Name2);
				Assert.assertEquals(Name2, property.getProperty("firstPageNO"));
			}
		}
	}

	@Then("^Verify user is should be  to click on the Last page button$")
	public void verify_user_is_should_be_to_click_on_the_last_page_button() throws Throwable {

		WebElement ele = driver.findElement(RPTS.getFastforwardbtn1());

		js = (JavascriptExecutor) driver;

		js.executeScript("arguments[0].click();", ele);

		Thread.sleep(2000);
		List<WebElement> Pagebtn = driver.findElements(RPTS.getAllPaginationbtnone_By_One1());
		for (int i = 0; i < Pagebtn.size(); i++) {
			WebElement Pagebtn1 = Pagebtn.get(i);
			String Name2 = Pagebtn1.getText();
			String Name = Pagebtn1.getAttribute("class");
			System.out.println(Name);
			System.out.println(Name2);
			if (Name.equals(property.getProperty("pageactiveclass"))) {
				Assert.assertEquals(Name, property.getProperty("pageactiveclass"));
			}

		}
	}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Account Module -

// @Account_TC_01

	@Then("^Login to the Tenant Account$")
	public void login_to_the_tenant_account() throws Throwable {
		driver.get(property.getProperty("URLTenantlogin"));
		driver.findElement(Dashbord.getUsername()).sendKeys(property.getProperty("TenantUsername"));
		driver.findElement(Dashbord.getPassword()).sendKeys(property.getProperty("TenantPassword"));
		driver.findElement(Dashbord.getSigninbutton()).click();

	}

	@Then("^Click on the account Module$")
	public void click_on_the_account_module() throws Throwable {
		driver.findElement(account.getAccountModule()).click();

	}

	@Then("^Verify the all sub modules are displaying$")
	public void verify_the_all_sub_modules_are_displaying() throws Throwable {

		wait.until(ExpectedConditions.visibilityOf(driver.findElement(account.getTable())));
		Assert.assertEquals(driver.findElement(account.getAccountSetup()).getText(), "Account Setup");
		Assert.assertEquals(driver.findElement(account.getAccountUsers()).getText(), "Account Users");
		Assert.assertEquals(driver.findElement(account.getEvents()).getText(), "Events");
		Assert.assertEquals(driver.findElement(account.getJobs()).getText(), "Jobs");
		Assert.assertEquals(driver.findElement(account.getRoles()).getText(), "Roles");
		Assert.assertEquals(driver.findElement(account.getSubscriptions()).getText(), "Subscriptions");
	}

// @Account_TC_02

	@Then("^click on the  Account Setup sub module$")
	public void click_on_the_account_setup_sub_module() throws Throwable {
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(account.getTable())));
		driver.findElement(account.getAccountSetup()).click();
	}

	@Then("^Verify all Tabs are displaying in the Account Setup$")
	public void verify_all_tabs_are_displaying_in_the_account_setup() throws Throwable {

		Assert.assertEquals(driver.findElement(account.getTwoFactorAuthentication()).getText(),
				"Two Factor Authentication");
		Assert.assertEquals(driver.findElement(account.getPasswordPolicy()).getText(), "Password Policy");
		Assert.assertEquals(driver.findElement(account.getConfigurations()).getText(), "Configurations");
		Assert.assertEquals(driver.findElement(account.getBasicInfo()).getText(), "Basic Info");

	}

	// @Account_TC_03
	@Then("^Verify  the all fields are displaying$")
	public void verify_the_all_fields_are_displaying() throws Throwable {
		driver.findElement(account.getBasicInformation()).isDisplayed();
		driver.findElement(account.getCode()).isDisplayed();
		driver.findElement(account.getType()).isDisplayed();
		driver.findElement(account.getStatus()).isDisplayed();
		driver.findElement(account.getCountry()).isDisplayed();
		driver.findElement(account.getAddress2()).isDisplayed();
		driver.findElement(account.getCity()).isDisplayed();
		driver.findElement(account.getZIPCode()).isDisplayed();
		driver.findElement(account.getName()).isDisplayed();
		driver.findElement(account.getURL()).isDisplayed();
		driver.findElement(account.getEnabled()).isDisplayed();
		driver.findElement(account.getAddress1()).isDisplayed();
		driver.findElement(account.getAddress3()).isDisplayed();
		driver.findElement(account.getState()).isDisplayed();
		driver.findElement(account.getPhone()).isDisplayed();
		driver.findElement(account.getDateFormat()).isDisplayed();
		driver.findElement(account.getClientLogo()).isDisplayed();
		driver.findElement(account.getTimeFormat()).isDisplayed();
		driver.findElement(account.getDisplay()).isDisplayed();
		driver.findElement(account.getPreferences()).isDisplayed();
		driver.findElement(account.getSaveButton()).isDisplayed();
		driver.findElement(account.getCancelButton()).isDisplayed();

	}
	// @Account_TC_04

	@Then("^Verify  the info in the CODE,TYPE,STATUS and ENABLED are non editable$")
	public void verify_the_info_in_the_codetypestatus_and_enabled_are_non_editable() throws Throwable {

		driver.findElement(account.getCodeField()).isEnabled();
		driver.findElement(account.getStatusField()).isEnabled();
		driver.findElement(account.getTypefield()).isEnabled();

	}

// @Account_TC_05

	@Then("^Verify the editable Fields$")
	public void verify_the_editable_fields() throws Throwable {

		driver.findElement(account.getCountryField()).isEnabled();
		driver.findElement(account.getAddress1Field()).isEnabled();
		driver.findElement(account.getAddress2Field()).isEnabled();
		driver.findElement(account.getAddress3Field()).isEnabled();
		driver.findElement(account.getStateField()).isEnabled();
		driver.findElement(account.getCityField()).isEnabled();

	}

// @Account_TC_07

	@Then("^click on the Adress Text field$")
	public void click_on_the_adress_text_field() throws Throwable {
		driver.findElement(account.getAddress2Field()).click();

		Thread.sleep(2000);

	}

	@Then("^Edit the Adress text Field$")
	public void edit_the_adress_text_field() throws Throwable {

		Thread.sleep(2000);

//    	JavascriptExecutor js = (JavascriptExecutor)driver;

		driver.findElement(account.getAddress2Field()).sendKeys(Keys.CONTROL + "A");

		Thread.sleep(2000);

		driver.findElement(account.getAddress2Field()).sendKeys(Keys.DELETE);

		driver.findElement(account.getAddress2Field()).sendKeys("xyz");

	}

	@Then("^clik on save button$")
	public void clik_on_save_button() throws Throwable {
		Thread.sleep(2000);
		driver.findElement(account.getSaveButton()).click();

	}

	@Then("^click on ok button$")
	public void click_on_ok_button() throws Throwable {
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(account.getPopup())));
		driver.findElement(account.getYesButton());

	}

	@Then("^renter the same data$")
	public void renter_the_same_data() throws Throwable {

	}

	// @Account_TC_08

	@Then("^click on the password Policy$")
	public void click_on_the_password_policy() throws Throwable {

		driver.findElement(account.getPasswordPolicy()).click();

	}

	@Then("^Verify user is able to view the all fields in the Password and Policy tab$")
	public void verify_user_is_able_to_view_the_all_fields_in_the_password_and_policy_tab() throws Throwable {

		driver.findElement(account.getPasswordStrength()).isDisplayed();
		driver.findElement(account.getPasswordLifeSpan()).isDisplayed();
		driver.findElement(account.getPasswordTracking()).isDisplayed();
		driver.findElement(account.getTrackInterval()).isDisplayed();
		driver.findElement(account.getMaxLoginTrialAttempt()).isDisplayed();
		driver.findElement(account.getTrackInterval()).isDisplayed();
		driver.findElement(account.getLockoutInterval()).isDisplayed();
		driver.findElement(account.getSaveButton()).isDisplayed();
		driver.findElement(account.getCancelButton()).isDisplayed();
	}

	// @Account_TC_12

	@Then("^the Click on password lifespan field$")
	public void the_click_on_password_lifespan_field() throws Throwable {
		driver.findElement(account.getPasswordStrength()).click();
		Thread.sleep(2000);

	}

	@Then("^Verify user should be able to view Normal,Medium & Strong options in Dropdown$")
	public void verify_user_should_be_able_to_view_normalmedium_strong_options_in_dropdown() throws Throwable {

		driver.findElement(account.getPasswordStrength1()).click();
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(account.getPasswordStrength2())));
		Assert.assertEquals(driver.findElement(account.getNormal()).getText(), "Normal");
		Assert.assertEquals(driver.findElement(account.getMedium()).getText(), "Medium");
		Assert.assertEquals(driver.findElement(account.getStrong()).getText(), "Strong");
	}

// @Account_TC_15
	@Then("^the Click on password length field$")
	public void the_click_on_password_length_field() throws Throwable {

		driver.findElement(account.getPasswordLength()).click();
		Thread.sleep(2000);
	}

	@Then("^Verify the password length$")
	public void verify_the_password_length() throws Throwable {
		driver.findElement(account.getPasswordLength2()).clear();
		driver.findElement(account.getPasswordLength2()).clear();
		driver.findElement(account.getPasswordLength2()).sendKeys("1");
		Thread.sleep(2000);
		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(account.getSave1()));

		wait.until(ExpectedConditions.visibilityOf(driver.findElement(account.getSaveTablepopup())));
		driver.findElement(account.getYesButton()).click();
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(account.getTablepopup())));
		Assert.assertEquals(driver.findElement(account.getSucessfulpopup()).getText(), "Successfully Saved");

	}

	@Then("^click on the TenantReports  module$")
	public void click_on_the_Tenantreports_module() throws Throwable {

		driver.findElement(tenantreports.getTenantReports()).click();

	}

	@Then("^Verify  all the sub modules are displayed$")
	public void verify_all_the_sub_modules_are_displayed() throws Throwable {

		wait.until(ExpectedConditions.visibilityOf(driver.findElement(tenantreports.getTableReport())));

		Assert.assertEquals(driver.findElement(tenantreports.getAccountUsers()).getText(), "Account Users");
		Assert.assertEquals(driver.findElement(tenantreports.getEmployeeReport()).getText(), "Employee Report");
		Assert.assertEquals(driver.findElement(tenantreports.getDevices()).getText(), "Devices");
		Assert.assertEquals(driver.findElement(tenantreports.getEmployeeWorkHour()).getText(), "Employee Work Hour");
		Assert.assertEquals(driver.findElement(tenantreports.getCustomReport()).getText(), "Custom Report");

	}

// @TenantReports_TC_02
	@Then("^click on the Employee Reports sub module page$")
	public void click_on_the_employee_reports_sub_module_page() throws Throwable {

		wait.until(ExpectedConditions.visibilityOf(driver.findElement(tenantreports.getTableReport())));
		driver.findElement(tenantreports.getEmployeeReport()).click();

	}

	@Then("^Verify Employee Report Block is displayed$")
	public void verify_employee_report_block_is_displayed() throws Throwable {

		Assert.assertEquals(driver.findElement(tenantreports.getEmployeeReportblock()).getText(), "Employee Report");

	}

// @TenantReports_TC_03

	@Then("^Verify User should be able to view the all fields$")
	public void verify_user_should_be_able_to_view_the_all_fields() throws Throwable {

		driver.findElement(tenantreports.getEmployee()).isDisplayed();
		driver.findElement(tenantreports.getEmployeeBadge()).isDisplayed();
		driver.findElement(tenantreports.getDevice()).isDisplayed();
		driver.findElement(tenantreports.getOrganization()).isDisplayed();
		driver.findElement(tenantreports.getLocation()).isDisplayed();
		driver.findElement(tenantreports.getVerificationMode()).isDisplayed();
		driver.findElement(tenantreports.getEmployeeStatus()).isDisplayed();
		driver.findElement(tenantreports.getFPAttestation()).isDisplayed();
		driver.findElement(tenantreports.getFaceAttestation()).isDisplayed();
		driver.findElement(tenantreports.getReset()).isDisplayed();
	}

// @TenantReports_TC_04
	@Then("^click on the  Employee No text field$")
	public void click_on_the_employee_no_text_field() throws Throwable {
		driver.findElement(tenantreports.getEmployee()).click();
	}

	@Then("^Verify  user is able to click on the Employee No dropdown button$")
	public void verify_user_is_able_to_click_on_the_employee_no_dropdown_button() throws Throwable {
		driver.findElement(tenantreports.getEmployee()).sendKeys("21001");
		driver.findElement(tenantreports.getEmployee()).sendKeys(Keys.ENTER);

	}

	// @TenantReports_TC_05

	@Then("^Verify Based on the Employee No  user is able to get the employee report$")
	public void verify_based_on_the_employee_no_user_is_able_to_get_the_employee_report() throws Throwable {

		Assert.assertEquals(driver.findElement(tenantreports.getEmployeeNumber()).getText(), "21001");

	}
// @TenantReports_TC_06

	@Then("^Verify  user is able to click on the Employee Name text field$")
	public void verify_user_is_able_to_click_on_the_employee_name_text_field() throws Throwable {

		driver.findElement(tenantreports.getEmployee()).sendKeys("Logan McNeil");
		driver.findElement(tenantreports.getEmployee()).sendKeys(Keys.ENTER);

	}

// @TenantReports_TC_07

	@Then("^Verify Based on the Employee Name user should be get the employee report$")
	public void verify_based_on_the_employee_name_user_should_be_get_the_employee_report() throws Throwable {

		Assert.assertEquals(driver.findElement(tenantreports.getEmployeeName()).getText(), "Logan McNeil");

	}

//@TenantReports_TC_08

	@Then("^click on the Employee Badge text field$")
	public void click_on_the_employee_badge_text_field() throws Throwable {

		driver.findElement(tenantreports.getEmployeeBadge()).click();

	}

	@Then("^Verify  user is able to click on the  Employee Badge text field$")
	public void verify_user_is_able_to_click_on_the_employee_badge_text_field() throws Throwable {
		driver.findElement(tenantreports.getEmployeeBadge()).sendKeys("31313");
		driver.findElement(tenantreports.getEmployeeBadge()).sendKeys(Keys.ENTER);
	}

//@TenantReports_TC_09

	@Then("^Verify Based on the Employee Badge user should be get the employee report$")
	public void verify_based_on_the_employee_badge_user_should_be_get_the_employee_report() throws Throwable {

		Assert.assertEquals(driver.findElement(tenantreports.getBadgeNumber()).getText(), "31313");
	}

//@TenantReports_TC_10

	@Then("^click on the Device SN text field$")
	public void click_on_the_device_sn_text_field() throws Throwable {
		driver.findElement(tenantreports.getDevice()).click();

	}

	@Then("^Verify  user is able to click on the  Device SN text field$")
	public void verify_user_is_able_to_click_on_the_device_sn_text_field() throws Throwable {
		driver.findElement(tenantreports.getDevice()).sendKeys("6133161100073");
		driver.findElement(tenantreports.getDevice()).sendKeys(Keys.ENTER);

	}

//@TenantReports_TC_11

	@Then("^Verify Based on the Device SN user should be get the employee report$")
	public void verify_based_on_the_device_sn_user_should_be_get_the_employee_report() throws Throwable {

		if (driver.findElement(tenantreports.getDeviceSNTablecolumn()).getText().contains("6133161100073")) {
			System.out.println("Device SN is match");
		}

		else {
			System.out.println("Fail");
		}

	}

//@TenantReports_TC_12

	@Then("^Verify  user is able to click on the Device Name text field$")
	public void verify_user_is_able_to_click_on_the_device_name_text_field() throws Throwable {
		driver.findElement(tenantreports.getDevice()).sendKeys(property.getProperty("EnrolledDeviceName"));
		driver.findElement(tenantreports.getDevice()).sendKeys(Keys.ENTER);

	}

//@TenantReports_TC_13

	@Then("^Verify Based on the  Device Name user should be get the employee report$")
	public void verify_based_on_the_device_name_user_should_be_get_the_employee_report() throws Throwable {

		driver.findElement(tenantreports.getColumnAddButton()).click();
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(tenantreports.getColumnAddButtonTable())));

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getDeviceNameCheckBox()));

		// if(driver.findElement(tenantreports.getDeviceNametext()).getText().contains("Test_Sumukh"))
		// {
		// System.out.println("Device Name is match" );
		// }

		// else
		// {
		// System.out.println("Fail" );
		// }

	}

//@TenantReports_TC_14

	@Then("^click on the Device Location text field$")
	public void click_on_the_device_location_text_field() throws Throwable {

		driver.findElement(tenantreports.getLocation()).click();

	}

	@Then("^Verify  user is able to click on the Location text field$")
	public void verify_user_is_able_to_click_on_the_location_text_field() throws Throwable {

		driver.findElement(tenantreports.getLocation()).sendKeys("San Francisco");
		driver.findElement(tenantreports.getLocation()).sendKeys(Keys.ENTER);

	}

	// @TenantReports_TC_15

	@Then("^Verify Based on the  Location user should be get the employee report$")
	public void verify_based_on_the_location_user_should_be_get_the_employee_report() throws Throwable {

		if (driver.findElement(tenantreports.getLocationtext()).getText().contains("San Francisco")) {
			System.out.println(" Location is match");
		}

		else {
			System.out.println("Fail");
		}

	}

	// @TenantReports_TC_16

	@Then("^click on the Device  Verification mode dropdown field$")
	public void click_on_the_device_verification_mode_dropdown_field() throws Throwable {

		driver.findElement(tenantreports.getVerificationMode()).click();

	}

	@Then("^Verify  user is able to click on the  Verification mode dropdown field$")
	public void verify_user_is_able_to_click_on_the_verification_mode_dropdown_field() throws Throwable {

		driver.findElement(tenantreports.getVerificationModes()).click();

	}

	// @TenantReports_TC_17

	@Then("^Verify Based on the  Verification mode user should be get the employee report$")
	public void verify_based_on_the_verification_mode_user_should_be_get_the_employee_report() throws Throwable {

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(Opt.getDOSubmitbutton()));

		driver.findElement(tenantreports.getVerificationModetable()).isDisplayed();

	}
	// @TenantReports_TC_18

	@Then("^click on the Device Organization text field$")
	public void click_on_the_device_organization_text_field() throws Throwable {

		driver.findElement(tenantreports.getOrganization()).click();

	}

	@Then("^Verify  user is able to click on the  Organization text field$")
	public void verify_user_is_able_to_click_on_the_organization_text_field() throws Throwable {

		driver.findElement(tenantreports.getOrganization()).sendKeys(property.getProperty("Organization"));
		driver.findElement(tenantreports.getOrganization()).sendKeys(Keys.ENTER);

		driver.findElement(tenantreports.getColumnAddButton()).click();

//        	   JavascriptExecutor executor = (JavascriptExecutor) driver;
//               executor.executeScript("arguments[0].scrollIntoView(true);", driver.findElement(tenantreports.getColumnAddButtonTable()));

		JavascriptExecutor executor = (JavascriptExecutor) driver;
		executor.executeScript("arguments[0].scrollIntoView(true);",
				driver.findElement(tenantreports.getOrganizationcolumn()));

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getOrganizationcolumn()));

	}

	// @TenantReports_TC_19
	@Then("^Verify Based on the Organization user should be get the employee report$")
	public void verify_based_on_the_organization_user_should_be_get_the_employee_report() throws Throwable {

		if (driver.findElement(tenantreports.getOrganization()).getText()
				.contains(property.getProperty("Organization"))) {
			System.out.println(" Location is match");
		}

		else {
			System.out.println("Fail");
		}
	}

	// @TenantReports_TC_20

	@Then("^click on the  Employee Status dropdown field$")
	public void click_on_the_employee_status_dropdown_field() throws Throwable {

		driver.findElement(tenantreports.getEmployeeStatus()).click();

	}

	@Then("^Verify  user is able to click on the  Employee Status dropdown field$")
	public void verify_user_is_able_to_click_on_the_employee_status_dropdown_field() throws Throwable {

		driver.findElement(tenantreports.getActive()).click();

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(Opt.getDOSubmitbutton()));

	}

//@TenantReports_TC_21

	@Then("^Verify Based on the Employee Status  user should be get the employee report$")
	public void verify_based_on_the_employee_status_user_should_be_get_the_employee_report() throws Throwable {

		if (driver.findElement(tenantreports.getEmployeeStatus()).getText().contains("Active")) {
			System.out.println("Employee Status");
		}

		else {
			System.out.println("Fail");
		}

	}

//@TenantReports_TC_22

	@Then("^click on the FP Attestation dropdown field$")
	public void click_on_the_fp_attestation_dropdown_field() throws Throwable {

		driver.findElement(tenantreports.getFPAttestation()).click();

	}

	@Then("^Verify  user is able to click on the  FP Attestation dropdown field$")
	public void verify_user_is_able_to_click_on_the_fp_attestation_dropdown_field() throws Throwable {

		driver.findElement(tenantreports.getYes()).click();

	}

	// @TenantReports_TC_23

	@Then("^Verify Based on theFP Attestation user should be get the employee report$")
	public void verify_based_on_thefp_attestation_user_should_be_get_the_employee_report() throws Throwable {

		if (driver.findElement(tenantreports.getFPAttestation()).getText().contains("yes")) {
			System.out.println("pass");
		}

		else {
			System.out.println("Fail");
		}
	}

	// @TenantReports_TC_24

	@Then("^click on the Face Attestation dropdown field$")
	public void click_on_the_face_attestation_dropdown_field() throws Throwable {

		driver.findElement(tenantreports.getFaceAttestation()).click();

	}

	@Then("^Verify  user is able to click on the  Face Attestation dropdown field$")
	public void verify_user_is_able_to_click_on_the_face_attestation_dropdown_field() throws Throwable {

		driver.findElement(tenantreports.getYes2()).click();

	}

	// @TenantReports_TC_25

	@Then("^Verify Based on the  Face Attestation user should be get the employee report$")
	public void verify_based_on_the_face_attestation_user_should_be_get_the_employee_report() throws Throwable {

		if (driver.findElement(tenantreports.getFaceAttestation()).getText().contains("yes")) {
			System.out.println("pass");
		}

		else {
			System.out.println("Fail");
		}
	}

//@TenantReports_TC_26

	@Then("^click on Reset button$")
	public void click_on_reset_button() throws Throwable {

		driver.findElement(tenantreports.getReset()).click();
		Thread.sleep(2000);

	}

	@Then("^Verify the Reset button$")
	public void verify_the_reset_button() throws Throwable {

		Assert.assertEquals(driver.findElement(tenantreports.getEmployee()).getText(), "");

	}

//@TenantReports_TC_27

	@Then("^column button$")
	public void column_button() throws Throwable {

		driver.findElement(tenantreports.getColumnAddButton()).click();

	}

	@Then("^Verify the Columns button$")
	public void verify_the_columns_button() throws Throwable {
		driver.findElement(tenantreports.getColumnAddButtonTable()).isDisplayed();

	}

	// @TenantReports_TC_28

	@Then("^click on check  box$")
	public void click_on_check_box() throws Throwable {

		JavascriptExecutor executor = (JavascriptExecutor) driver;
		executor.executeScript("arguments[0].scrollIntoView(true);",
				driver.findElement(tenantreports.getOrganizationcolumn()));

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getOrganizationcolumn()));
		Thread.sleep(2000);

	}

	@Then("^Verify Based on the Columns check box  user is able to get the respected columns in the employee report$")
	public void verify_based_on_the_columns_check_box_user_is_able_to_get_the_respected_columns_in_the_employee_report()
			throws Throwable {

		driver.findElement(tenantreports.getOrganizationtable()).isDisplayed();

	}

	// @TenantReports_TC_29

	@Then("^User click on the CSV  button$")
	public void user_click_on_the_csv_button() throws Throwable {
		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getCSVbutton()));

	}

	@Then("^Verify the  CSV  button$")
	public void verify_the_csv_button() throws Throwable {

		String filename = "employeeReport.CSV";
		String downloadPath = "C:\\Users\\Madhu\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;

		for (int i = 0; i < len; i++) {

			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}

	}

	// @TenantReports_TC_30

	@Then("^User click on the Excel   button$")
	public void user_click_on_the_excel_button() throws Throwable {

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getExcelButton()));

	}

	@Then("^Verify the Excel  button$")
	public void verify_the_excel_button() throws Throwable {

		String filename = "employeeReport.Xlsx";
		String downloadPath = "C:\\Users\\Madhu\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;

		for (int i = 0; i < len; i++) {

			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}

		// @TenantReports_TC_31

	}

	@Then("^User click on the PDF button$")
	public void user_click_on_the_pdf_button() throws Throwable {

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getPDFButton()));

	}

	@Then("^Verify the PDF button$")
	public void verify_the_pdf_button() throws Throwable {

		String filename = "employeeReport.PDF";
		String downloadPath = "C:\\Users\\Madhu\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;

		for (int i = 0; i < len; i++) {

			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}

	}

	// @TenantReports_TC_32

	@Then("^click on the Employee Detail Report link$")
	public void click_on_the_employee_detail_report_link() throws Throwable {

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getEmployeeDetailReport()));

	}

	@Then("^Verify the Employee Detail Report link$")
	public void verify_the_employee_detail_report_link() throws Throwable {

		driver.findElement(tenantreports.getEmployeeDetailLocation()).isDisplayed();

	}

	// @TenantReports_TC_33

	@Then("^click on the Employee Detail Report link Employee No Text field$")
	public void click_on_the_employee_detail_report_link_employee_no_text_field() throws Throwable {

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();",
				driver.findElement(tenantreports.getEmployeeDetailReportEmployeeNo()));
		driver.findElement(tenantreports.getEmployeeDetailReportEmployeeNo())
				.sendKeys(property.getProperty("EmployeeNo"));

		driver.findElement(tenantreports.getEmployeeDetailReportEmployeeNo()).sendKeys(Keys.ENTER);
		Thread.sleep(2000);

	}

	@Then("^Verify  Employee Detail Report linkEmployee No Text field$")
	public void verify_employee_detail_report_linkemployee_no_text_field() throws Throwable {

		Assert.assertEquals(driver.findElement(tenantreports.getEmployeeDetailReportEmployeeNo()).getAttribute("Value"),
				property.getProperty("EmployeeNo"));

	}

	// @TenantReports_TC_34

	@Then("^click on the Employee Detail Report link Position Text field$")
	public void click_on_the_employee_detail_report_link_position_text_field() throws Throwable {

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getEmployeeDetailPosition()));
		driver.findElement(tenantreports.getEmployeeDetailPosition()).sendKeys(property.getProperty("Position"));

		driver.findElement(tenantreports.getEmployeeDetailPosition()).sendKeys(Keys.ENTER);
		Thread.sleep(3000);

	}

	@Then("^Verify  Employee Detail Report link Position Text field$")
	public void verify_employee_detail_report_link_position_text_field() throws Throwable {

		Assert.assertEquals(driver.findElement(tenantreports.getEmployeeDetailPosition()).getAttribute("Value"),
				property.getProperty("Position"));

	}

//@TenantReports_TC_35

	@Then("^click on the Employee Detail Report link Location Text field$")
	public void click_on_the_employee_detail_report_link_location_text_field() throws Throwable {

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getEmployeeDetailLocation()));
		driver.findElement(tenantreports.getEmployeeDetailLocation()).sendKeys(property.getProperty("Location"));

		driver.findElement(tenantreports.getEmployeeDetailLocation()).sendKeys(Keys.ENTER);
		Thread.sleep(3000);

	}

	@Then("^Verify  Employee Detail Report link Location Text field$")
	public void verify_employee_detail_report_link_location_text_field() throws Throwable {

		Assert.assertEquals(driver.findElement(tenantreports.getEmployeeDetailLocation()).getAttribute("Value"),
				property.getProperty("Location"));

	}
	// @TenantReports_TC_36

	@Then("^click on the Employee Detail Report link Organization Text field$")
	public void click_on_the_employee_detail_report_link_organization_text_field() throws Throwable {
		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();",
				driver.findElement(tenantreports.getEmployeeDetailReportOrganization()));
		driver.findElement(tenantreports.getEmployeeDetailReportOrganization())
				.sendKeys(property.getProperty("Organization"));

		driver.findElement(tenantreports.getEmployeeDetailReportOrganization()).sendKeys(Keys.ENTER);
		Thread.sleep(3000);

	}

	@Then("^Verify  Employee Detail Report link Organization Text field$")
	public void verify_employee_detail_report_link_organization_text_field() throws Throwable {
		Thread.sleep(2000);
		Assert.assertEquals(
				driver.findElement(tenantreports.getEmployeeDetailReportOrganization()).getAttribute("Value"),
				property.getProperty("Organization"));
	}

	// @TenantReports_TC_37

	@Then("^click on the Employee Detail Report link Time Type Text field$")
	public void click_on_the_employee_detail_report_link_time_type_text_field() throws Throwable {

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getEmployeeDetailTimeType()));
		driver.findElement(tenantreports.getEmployeeDetailTimeType()).sendKeys(property.getProperty("TimeType"));

		driver.findElement(tenantreports.getEmployeeDetailTimeType()).sendKeys(Keys.ENTER);
		Thread.sleep(2000);

	}

	@Then("^Verify  Employee Detail Report link Time Type Text field$")
	public void verify_employee_detail_report_link_time_type_text_field() throws Throwable {

		Assert.assertEquals(driver.findElement(tenantreports.getEmployeeDetailTimeType()).getAttribute("Value"),
				property.getProperty("TimeType"));

	}
	// @TenantReports_TC_38

	@Then("^click on the Employee Detail Report link Pay Type Text field$")
	public void click_on_the_employee_detail_report_link_pay_type_text_field() throws Throwable {

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getEmployeeDetailPayType()));
		driver.findElement(tenantreports.getEmployeeDetailPayType()).sendKeys(property.getProperty("PayType"));

		driver.findElement(tenantreports.getEmployeeDetailPayType()).sendKeys(Keys.ENTER);
		Thread.sleep(2000);

	}

	@Then("^Verify  Employee Detail Report link Pay Type Text field$")
	public void verify_employee_detail_report_link_pay_type_text_field() throws Throwable {
		Assert.assertEquals(driver.findElement(tenantreports.getEmployeeDetailPayType()).getAttribute("Value"),
				property.getProperty("PayType"));

	}

	// @TenantReports_TC_39

	@Then("^click on the Employee Detail Report link Updated Days Text field$")
	public void click_on_the_employee_detail_report_link_updated_days_text_field() throws Throwable {
		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getEmployeeDetailUpdatedDays()));
		driver.findElement(tenantreports.getEmployeeDetailUpdatedDays()).sendKeys(property.getProperty("UpdateDays"));

		driver.findElement(tenantreports.getEmployeeDetailUpdatedDays()).sendKeys(Keys.ENTER);
		Thread.sleep(2000);

	}

	@Then("^Verify  Employee Detail Report link Pay Updated Days field$")
	public void verify_employee_detail_report_link_pay_updated_days_field() throws Throwable {

		Assert.assertEquals(driver.findElement(tenantreports.getEmployeeDetailUpdatedDays()).getAttribute("Value"),
				"0");

	}

	// @TenantReports_TC_40

	@Then("^click on the Employee Detail Report link User Privilege Droup down field$")
	public void click_on_the_employee_detail_report_link_user_privilege_droup_down_field() throws Throwable {

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getEmployeeDetailUserPrivilege()));

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getUser()));

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getEmployeeDetailGoButton()));
	}

	@Then("^Verify  Employee Detail Report link User Privilege Droup down field$")
	public void verify_employee_detail_report_link_user_privilege_droup_down_field() throws Throwable {

		Assert.assertEquals(driver.findElement(tenantreports.getEmployeeDetailUserPrivilege()).getText(), "User");

	}

	// @TenantReports_TC_41

	@Then("^click on the Employee Detail Report link Go button$")
	public void click_on_the_employee_detail_report_link_go_button() throws Throwable {
		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getEmployeeDetailUserPrivilege()));

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getUser()));

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getEmployeeDetailGoButton()));

		Thread.sleep(2000);

	}

	@Then("^Verify  Employee Detail Report link Go button$")
	public void verify_employee_detail_report_link_go_button() throws Throwable {

		// driver.findElement(tenantreports.getUserResultTable()).isDisplayed();
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(tenantreports.getUserResultTable())));

	}

	// @TenantReports_TC_42

	@Then("^click on the Employee Detail Report link  Columns button$")
	public void click_on_the_employee_detail_report_link_columns_button() throws Throwable {

		driver.findElement(tenantreports.getColumnAddButton()).click();

		JavascriptExecutor executor = (JavascriptExecutor) driver;
		executor.executeScript("arguments[0].scrollIntoView(true);",
				driver.findElement(tenantreports.getOrganizationcolumn()));

	}

	@Then("^Verify  Employee Detail Report link  Columns button$")
	public void verify_employee_detail_report_link_columns_button() throws Throwable {

		JavascriptExecutor executor = (JavascriptExecutor) driver;
		executor.executeScript("arguments[0].scrollIntoView(true);",
				driver.findElement(tenantreports.getOrganizationcolumn()));

	}
	// @TenantReports_TC_43

	@Then("^click on the organization column$")
	public void click_on_the_organization_column() throws Throwable {

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getOrganizationcolumn()));

	}

	@Then("^Verify the organization column  in the employee report$")
	public void verify_the_organization_column_in_the_employee_report() throws Throwable {
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(tenantreports.getUserResultTable())));

		driver.findElement(tenantreports.getOraganizationcolumn2()).isDisplayed();
	}

	// @TenantReports_TC_43

	@Then("^Verify  forword button$")
	public void verify_forword_button() throws Throwable {

		WebElement ele = driver.findElement(RPTS.getFastforwardbtn());

		js = (JavascriptExecutor) driver;

		js.executeScript("arguments[0].click();", ele);

		Thread.sleep(2000);
		List<WebElement> Pagebtn = driver.findElements(RPTS.getAllPaginationbtnone_By_One());
		for (int i = 0; i < Pagebtn.size(); i++) {
			WebElement Pagebtn1 = Pagebtn.get(i);
			String Name2 = Pagebtn1.getText();
			String Name = Pagebtn1.getAttribute("class");
			System.out.println(Name);
			System.out.println(Name2);
			if (Name.equals(property.getProperty("pageactiveclass"))) {
				Assert.assertEquals(Name, property.getProperty("pageactiveclass"));
			}
		}

		js = (JavascriptExecutor) driver;

		js.executeScript("arguments[0].click();", driver.findElement(RPTS.getFastforwardbtn()));

		wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(RPTS.getFirstbackwardbtn())));

		js.executeScript("arguments[0].click();", driver.findElement(RPTS.getFirstbackwardbtn()));

		Thread.sleep(2000);
		List<WebElement> s1ssd = driver.findElements(RPTS.getAllPaginationbtnone_By_One());
		for (int i = 0; i < s1ssd.size(); i++) {
			WebElement ds = s1ssd.get(i);
			String Name2 = ds.getText();
			String Name = ds.getAttribute("class");
			if (Name.equals(property.getProperty("pageactiveclass"))) {
				System.out.println(Name);
				System.out.println(Name2);
				Assert.assertEquals(Name2, property.getProperty("firstPageNO"));
			}

		}
	}

	@Then("^Verify Back button$")
	public void verify_back_button() throws Throwable {

		js = (JavascriptExecutor) driver;

		js.executeScript("arguments[0].click();", driver.findElement(RPTS.getFastforwardbtn()));

		wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(RPTS.getFirstbackwardbtn())));

		js.executeScript("arguments[0].click();", driver.findElement(RPTS.getFirstbackwardbtn()));

		Thread.sleep(2000);
		List<WebElement> s1ssd = driver.findElements(RPTS.getAllPaginationbtnone_By_One());
		for (int i = 0; i < s1ssd.size(); i++) {
			WebElement ds = s1ssd.get(i);
			String Name2 = ds.getText();
			String Name = ds.getAttribute("class");
			if (Name.equals(property.getProperty("pageactiveclass"))) {
				System.out.println(Name);
				System.out.println(Name2);
				Assert.assertEquals(Name2, property.getProperty("firstPageNO"));
			}
		}

		wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(RPTS.getNormalbackwardbtn())));

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(RPTS.getNormalbackwardbtn()));

		Thread.sleep(2000);
		for (int j = 0; j < 11; j++) {
			js.executeScript("arguments[0].click();", driver.findElement(RPTS.getAllPaginationbtnone_By_One()));
			Thread.sleep(2000);
			List<WebElement> asd = driver.findElements(RPTS.getAllPaginationbtnone_By_One());
			for (int i = asd.size() - 1; i >= 0; i--) {
				WebElement ds = asd.get(i);
				String Name2 = ds.getText();
				String Name = ds.getAttribute("class");
				if (Name.equals("ui-paginator-page ui-state-default ui-corner-all ui-state-active")) {
					Assert.assertEquals(Name, property.getProperty("ClassAttribute"));
					System.out.println(Name2);
				}
			}
		}
	}

	// @TenantReports_TC_46

	@Then("^Verify First page button$")
	public void verify_first_page_button() throws Throwable {

		js = (JavascriptExecutor) driver;

		js.executeScript("arguments[0].click();", driver.findElement(RPTS.getFastforwardbtn()));

		wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(RPTS.getFirstbackwardbtn())));

		js.executeScript("arguments[0].click();", driver.findElement(RPTS.getFirstbackwardbtn()));

		Thread.sleep(2000);
		List<WebElement> s1ssd = driver.findElements(RPTS.getAllPaginationbtnone_By_One());
		for (int i = 0; i < s1ssd.size(); i++) {
			WebElement ds = s1ssd.get(i);
			String Name2 = ds.getText();
			String Name = ds.getAttribute("class");
			if (Name.equals(property.getProperty("pageactiveclass"))) {
				System.out.println(Name);
				System.out.println(Name2);
				Assert.assertEquals(Name2, property.getProperty("firstPageNO"));
			}
		}

	}

//@TenantReports_TC_47

	@Then("^Verify Last page button$")
	public void verify_last_page_button() throws Throwable {

		WebElement ele = driver.findElement(RPTS.getFastforwardbtn());

		js = (JavascriptExecutor) driver;

		js.executeScript("arguments[0].click();", ele);

		Thread.sleep(2000);
		List<WebElement> Pagebtn = driver.findElements(RPTS.getAllPaginationbtnone_By_One());
		for (int i = 0; i < Pagebtn.size(); i++) {
			WebElement Pagebtn1 = Pagebtn.get(i);
			String Name2 = Pagebtn1.getText();
			String Name = Pagebtn1.getAttribute("class");
			System.out.println(Name);
			System.out.println(Name2);
			if (Name.equals(property.getProperty("pageactiveclass"))) {
				Assert.assertEquals(Name, property.getProperty("pageactiveclass"));
			}

		}
	}

//@TenantReports_TC_48

	@Then("^Verify Pagination buttons$")
	public void verify_pagination_buttons() throws Throwable {

		WebElement ele = driver.findElement(RPTS.getFastforwardbtn());

		js = (JavascriptExecutor) driver;

		js.executeScript("arguments[0].click();", ele);

		Thread.sleep(2000);
		List<WebElement> Pagebtn = driver.findElements(RPTS.getAllPaginationbtnone_By_One());
		for (int i = 0; i < Pagebtn.size(); i++) {
			WebElement Pagebtn1 = Pagebtn.get(i);
			String Name2 = Pagebtn1.getText();
			String Name = Pagebtn1.getAttribute("class");
			System.out.println(Name);
			System.out.println(Name2);
			if (Name.equals(property.getProperty("pageactiveclass"))) {
				Assert.assertEquals(Name, property.getProperty("pageactiveclass"));
			}
		}
	}

	// @TenantReports_TC_49

	@Then("^click on the Employee fingerprint Report link$")
	public void click_on_the_employee_fingerprint_report_link() throws Throwable {

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getEmployeeFingerprintReport()));

	}

	@Then("^Verify  the Employee fingerprint Report link$")
	public void verify_the_employee_fingerprint_report_link() throws Throwable {

		wait.until(
				ExpectedConditions.visibilityOf(driver.findElement(tenantreports.getEmployeeFingerprintReportpage())));
	}

	@Then("^Verify  Employee Detail Report  Pay Updated Days field$")
	public void verify_employee_detail_report__pay_updated_days_field() throws Throwable {

		// Assert.assertEquals(driver.findElement(tenantreports.getEmployeeDetailUpdatedDays()).getText(),
		// "150");
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(tenantreports.getResulttable2())));

	}

	@Then("^Verify the  Employee Detail Report link Go button$")
	public void verify_the_employee_detail_report_link_go_button() throws Throwable {

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getEmployeeDetailGoButton()));
		Thread.sleep(2000);

		// driver.findElement(tenantreports.getUserResultTable()).isDisplayed();
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(tenantreports.getResulttable2())));

	}

	@Then("^Verify the organization column in the employee report is displayed$")
	public void verify_the_organization_column_in_the_employee_report_is_displayed() throws Throwable {

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getEmployeeDetailGoButton()));
		Thread.sleep(2000);

		wait.until(ExpectedConditions.visibilityOf(driver.findElement(tenantreports.getResulttable2())));

		driver.findElement(tenantreports.getResulttable2()).isDisplayed();

	}

	// @TenantReports_TC_66

	@Then("^click on the  Employee Device Assignment Link$")
	public void click_on_the_employee_device_assignment_link() throws Throwable {
		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getEmployeeDeviceAssignment()));

	}

	@Then("^Verify  the Employee Device Assignment Link$")
	public void verify_the_employee_device_assignment_link() throws Throwable {

		driver.findElement(tenantreports.getEmployeeDeviceAssignmentTable()).isDisplayed();

	}

	@Then("^click on the Employee Detail Report link User Privilege Droup down fields$")
	public void click_on_the_employee_detail_report_link_user_privilege_droup_down_fields() throws Throwable {

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getUserPrivileges()));

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getUser()));

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getEmployeeDetailGoButton()));

	}

	@Then("^Verify  Employee Detail Report link User Privilege Droup down fields$")
	public void verify_employee_detail_report_link_user_privilege_droup_down_fields() throws Throwable {

		Assert.assertEquals(driver.findElement(tenantreports.getUserPrivileges()).getText(), "User");

	}

	@Then("^Verify the  Employee Detail Reports link Go button$")
	public void verify_the_employee_detail_reports_link_go_button() throws Throwable {

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getEmployeeDetailGoButton()));
		Thread.sleep(2000);

//driver.findElement(tenantreports.getUserResultTable()).isDisplayed();
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(tenantreports.getResultTable3())));

	}

	@Then("^Verify the organization column in the employee reports is displayed$")
	public void verify_the_organization_column_in_the_employee_reports_is_displayed() throws Throwable {

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getEmployeeDetailGoButton()));
		Thread.sleep(2000);

		wait.until(ExpectedConditions.visibilityOf(driver.findElement(tenantreports.getResultTable3())));

		driver.findElement(tenantreports.getResultTable3()).isDisplayed();

	}

	@Then("^Verify the organization column in the employee report is should displayed$")
	public void verify_the_organization_column_in_the_employee_report_is_should_displayed() throws Throwable {

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getEmployeeDetailGoButton()));
		Thread.sleep(2000);

		wait.until(ExpectedConditions.visibilityOf(driver.findElement(tenantreports.getResultTable3())));

		driver.findElement(tenantreports.getResultTable3()).isDisplayed();

	}

	@Then("^Verify Back buttons$")
	public void verify_back_buttons() throws Throwable {

		WebElement ele = driver.findElement(RPTS.getFastforwardbtn());

		js = (JavascriptExecutor) driver;

		js.executeScript("arguments[0].click();", ele);

		Thread.sleep(2000);
		List<WebElement> Pagebtn = driver.findElements(RPTS.getAllPaginationbtnone_By_One());
		for (int i = 0; i < Pagebtn.size(); i++) {
			WebElement Pagebtn1 = Pagebtn.get(i);
			String Name2 = Pagebtn1.getText();
			String Name = Pagebtn1.getAttribute("class");
			System.out.println(Name);
			System.out.println(Name2);
			if (Name.equals(property.getProperty("pageactiveclass"))) {
				Assert.assertEquals(Name, property.getProperty("pageactiveclass"));
			}
		}

		js = (JavascriptExecutor) driver;

		js.executeScript("arguments[0].click();", driver.findElement(RPTS.getFastforwardbtn()));

		wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(RPTS.getFirstbackwardbtn())));

		js.executeScript("arguments[0].click();", driver.findElement(RPTS.getFirstbackwardbtn()));

		Thread.sleep(2000);
		List<WebElement> s1ssd = driver.findElements(RPTS.getAllPaginationbtnone_By_One());
		for (int i = 0; i < s1ssd.size(); i++) {
			WebElement ds = s1ssd.get(i);
			String Name2 = ds.getText();
			String Name = ds.getAttribute("class");
			if (Name.equals(property.getProperty("pageactiveclass"))) {
				System.out.println(Name);
				System.out.println(Name2);
				Assert.assertEquals(Name2, property.getProperty("firstPageNO"));
			}

		}
	}

	// @TenantReports_TC_86

	@Then("^click on the  Employee Assigned by Device Link$")
	public void click_on_the_employee_assigned_by_device_link() throws Throwable {

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getEmployeeAssignedbyDevice()));

	}

	@Then("^Verify  the Employee Assigned by Device Link$")
	public void verify_the_employee_assigned_by_device_link() throws Throwable {
		driver.findElement(tenantreports.getEmployeeAssignedbyDeviceSN()).isDisplayed();

	}

	// @TenantReports_TC_87

	@Then("^click on  the Device SN Text field in Employee Assigned by Device Link$")
	public void click_on_the_device_sn_text_field_in_employee_assigned_by_device_link() throws Throwable {

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getEmployeeAssignedbyDeviceSN()));
		driver.findElement(tenantreports.getEmployeeAssignedbyDeviceSN())
				.sendKeys(property.getProperty("SerialNumber"));

		driver.findElement(tenantreports.getEmployeeAssignedbyDeviceSN()).sendKeys(Keys.ENTER);
		Thread.sleep(2000);

	}

	@Then("^Verify the  Device SN Text field$")
	public void verify_the_device_sn_text_field() throws Throwable {

		Assert.assertEquals(driver.findElement(tenantreports.getEmployeeAssignedbyDeviceSN()).getAttribute("Value"),
				property.getProperty("SerialNumber"));

	}

	// @TenantReports_TC_88

	@Then("^click on the Device Name Text field in Employee Assigned by Device Link$")
	public void click_on_the_device_name_text_field_in_employee_assigned_by_device_link() throws Throwable {

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getEmployeeAssignedbyDeviceName()));
		driver.findElement(tenantreports.getEmployeeAssignedbyDeviceName())
				.sendKeys(property.getProperty("DeviceName"));

		driver.findElement(tenantreports.getEmployeeAssignedbyDeviceName()).sendKeys(Keys.ENTER);
		Thread.sleep(2000);

	}

	@Then("^Verify the Device Name Text field$")
	public void verify_the_device_name_text_field() throws Throwable {

		Assert.assertEquals(driver.findElement(tenantreports.getEmployeeAssignedbyDeviceName()).getAttribute("Value"),
				property.getProperty("DeviceName"));
	}

	// @TenantReports_TC_89

	@Then("^User Click on the Go Button$")
	public void user_click_on_the_go_button() throws Throwable {
		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getEmployeeAssignedbyDeviceSN()));
		driver.findElement(tenantreports.getEmployeeAssignedbyDeviceSN())
				.sendKeys(property.getProperty("SerialNumber"));
		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getGo()));
		Thread.sleep(2000);

	}

	@Then("^Verify the  Go Button$")
	public void verify_the_go_button() throws Throwable {

		wait.until(ExpectedConditions.visibilityOf(driver.findElement(tenantreports.getResultTable4()))).isDisplayed();

	}

	@Then("^Verify the organization column in the employee reports is should displayed$")
	public void verify_the_organization_column_in_the_employee_reports_is_should_displayed() throws Throwable {

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getGo()));
		Thread.sleep(2000);

		wait.until(ExpectedConditions.visibilityOf(driver.findElement(tenantreports.getResultTable4())));

		driver.findElement(tenantreports.getResultTable4()).isDisplayed();

	}

	// @TenantReports_TC_100

	@Then("^click on the  Employee Face Template Report Link$")
	public void click_on_the_employee_face_template_report_link() throws Throwable {
		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getEmployeeFacetemplateReport()));
	}

	@Then("^Verify  the Employee Face Template Report Link$")
	public void verify_the_employee_face_template_report_link() throws Throwable {
		driver.findElement(tenantreports.getEmployeeFacetemplateReportResulttable()).isDisplayed();

	}

//@TenantReports_TC_101

	@Then("^click on the Csv Buttons$")
	public void click_on_the_csv_buttons() throws Throwable {

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getCSVbutton()));

	}

	@Then("^verify the Csv File$")
	public void verify_the_csv_file() throws Throwable {

		String filename = "empFaceTemplate.CSV";
		String downloadPath = "C:\\Users\\Madhu\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;

		for (int i = 0; i < len; i++) {

			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}

	}

	// @TenantReports_TC_103

	@Then("^Verify the Excel  button file$")
	public void verify_the_excel_button_file() throws Throwable {

		String filename = "empFaceTemplate.Xlsx";
		String downloadPath = "C:\\Users\\Madhu\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;

		for (int i = 0; i < len; i++) {

			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}
	// @TenantReports_TC_102

	@Then("^verify the PDF  file button$")
	public void verify_the_pdf_file_button() throws Throwable {

		String filename = "empFaceTemplate.Pdf";
		String downloadPath = "C:\\Users\\Madhu\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;

		for (int i = 0; i < len; i++) {

			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}

	}

	@Then("^click on the AccountUsers sub module$")
	public void click_on_the_accountusers_sub_module() throws Throwable {

		wait.until(ExpectedConditions.visibilityOf(driver.findElement(tenantreports.getTableReport())));
		driver.findElement(tenantreports.getAccountUsers1()).click();
	}

	@Then("^Verify the User Report  page is opened$")
	public void verify_the_user_report_page_is_opened() throws Throwable {

		driver.findElement(tenantreports.getUserReports()).isDisplayed();
	}

	@Then("^verify the User is able to view the all items in the User Report  page$")
	public void verify_the_user_is_able_to_view_the_all_items_in_the_user_report_page() throws Throwable {

		driver.findElement(tenantreports.getUserName()).isDisplayed();
		driver.findElement(tenantreports.getRole()).isDisplayed();
		driver.findElement(tenantreports.getLastLoginTime()).isDisplayed();
		driver.findElement(tenantreports.getAccountStatus()).isDisplayed();
		driver.findElement(tenantreports.getColumnAddButton()).isDisplayed();
		driver.findElement(tenantreports.getExportAsCSV()).isDisplayed();
		driver.findElement(tenantreports.getExportAsPDF()).isDisplayed();
		driver.findElement(tenantreports.getExportAsExcel()).isDisplayed();

	}

	@Then("^Click on the columns Button$")
	public void click_on_the_columns_button() throws Throwable {

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getColumnAddButton()));

	}

	@Then("^verify the all  columns  is displayed$")
	public void verify_the_all_columns_is_displayed() throws Throwable {
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(tenantreports.getColumnTable())));

		driver.findElement(tenantreports.getColumnTableAccountStatus()).isDisplayed();
		driver.findElement(tenantreports.getColumnTableRole()).isDisplayed();
		driver.findElement(tenantreports.getColumnTableUserName()).isDisplayed();
		driver.findElement(tenantreports.getColumnTableLastLoginTime()).isDisplayed();

	}

	@Then("^verify the User is able to  select the columns check box$")
	public void verify_the_user_is_able_to_select_the_columns_check_box() throws Throwable {

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getColumnTableAccountStatus()));
		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getColumnTableAccountStatus()));

	}

	@Then("^verify the User is able to select the columns selected columns are displayed in the table$")
	public void verify_the_user_is_able_to_select_the_columns_selected_columns_are_displayed_in_the_table()
			throws Throwable {

		driver.findElement(tenantreports.getColumnTableAccountStatus()).isDisplayed();

	}

	@Then("^Verify the  account Users details in the table$")
	public void verify_the_account_users_details_in_the_table() throws Throwable {

		driver.findElement(tenantreports.getResultstable()).isDisplayed();

	}

	@Then("^User click on the Csv Buttons$")
	public void user_click_on_the_csv_buttons() throws Throwable {

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getCSv()));

	}

	@Then("^User verify the Csv File$")
	public void user_verify_the_csv_file() throws Throwable {

		String filename = "userReport.CSV";
		String downloadPath = "C:\\Users\\Madhu\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;

		for (int i = 0; i < len; i++) {

			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}

	}

	@Then("^User click on the PDF  file button$")
	public void user_click_on_the_pdf_file_button() throws Throwable {

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getPDf()));

	}

	@Then("^User verify the PDF file$")
	public void user_verify_the_pdf_file() throws Throwable {

		String filename = "userReport.Pdf";
		String downloadPath = "C:\\Users\\Madhu\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;

		for (int i = 0; i < len; i++) {

			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}

	@Then("^User click on the Excel file button$")
	public void user_click_on_the_excel_file_button() throws Throwable {

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getExcel()));

	}

	@Then("^User verify the  Excel file$")
	public void user_verify_the_excel_file() throws Throwable {

		String filename = "userReport.xlsx";
		String downloadPath = "C:\\Users\\Madhu\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;

		for (int i = 0; i < len; i++) {

			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}

	@Then("^click on the Employee Work Hour sub module$")
	public void click_on_the_employee_work_hour_sub_module() throws Throwable {
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(tenantreports.getTableReport())));
		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getEmployeeWorkHoursubModule()));

	}

	@Then("^Verify the Employee Work Hour sub module$")
	public void verify_the_employee_work_hour_sub_module() throws Throwable {
		driver.findElement(tenantreports.getEmployeeWorkHourDate()).isDisplayed();
	}

	@Then("^Verify the User is able to view all the sections in the Employee Work Hour report page$")
	public void verify_the_user_is_able_to_view_all_the_sections_in_the_employee_work_hour_report_page()
			throws Throwable {
		driver.findElement(tenantreports.getEmployeeWorkHourDate()).isDisplayed();
		driver.findElement(tenantreports.getDailyReportt()).isDisplayed();

	}

	@Then("^verify the all the components in the Daily Report section $")
	public void verify_the_all_the_components_in_the_daily_report_section() throws Throwable {
		driver.findElement(tenantreports.getEmployeeWorkHourDate()).isDisplayed();
		driver.findElement(tenantreports.getAgency()).isDisplayed();

	}

	@Then("^verify the all the components in the Daily Report section$")
	public void verify_the_all_the_components_in_the_Daily_Report_section() throws Throwable {

		driver.findElement(tenantreports.getDate()).isDisplayed();
		driver.findElement(tenantreports.getAgency12()).isDisplayed();
		driver.findElement(tenantreports.getSearchButton()).isDisplayed();
		driver.findElement(tenantreports.getExportAsCSV()).isDisplayed();
		driver.findElement(tenantreports.getExportAsExcel()).isDisplayed();
		driver.findElement(tenantreports.getExportAsPDF()).isDisplayed();

	}

	@Then("^click on the plus or mines button$")
	public void click_on_the_plus_or_mines_button() throws Throwable {

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getDailyReportt()));

	}

	@Then("^verify maximize or minimize the sections using the plus or mines button$")
	public void verify_maximize_or_minimize_the_sections_using_the_plus_or_mines_button() throws Throwable {

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getDailyReportt()));

		driver.findElement(tenantreports.getDate()).isDisplayed();

	}

	@Then("^click on the Weekly Monthly Report section$")
	public void click_on_the_weekly_monthly_report_section() throws Throwable {
		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getWeeklyMonthlyReport()));

	}

	@Then("^verify all the components is displayed$")
	public void verify_all_the_components_is_displayed() throws Throwable {

		driver.findElement(tenantreports.getFromDate()).isDisplayed();
		driver.findElement(tenantreports.getToDate()).isDisplayed();
		driver.findElement(tenantreports.getAgency13()).isDisplayed();
		driver.findElement(tenantreports.getSearchButton()).isDisplayed();
		driver.findElement(tenantreports.getSummarizedReport()).isDisplayed();
		driver.findElement(tenantreports.getDetailedReport()).isDisplayed();

	}

	@Then("^Click on the summarized report tab$")
	public void click_on_the_summarized_report_tab() throws Throwable {

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getSummarizedReport()));

	}

	@Then("^verify all the summarized report tab allcomponents is displayed$")
	public void verify_all_the_summarized_report_tab_allcomponents_is_displayed() throws Throwable {

		driver.findElement(tenantreports.getEmployeeNo()).isDisplayed();
		driver.findElement(tenantreports.getEmployeeName1()).isDisplayed();
		driver.findElement(tenantreports.getEndDate()).isDisplayed();
		driver.findElement(tenantreports.getStartDate()).isDisplayed();
		driver.findElement(tenantreports.getTotalHoursWorked()).isDisplayed();

	}

	@Then("^Click on the Detailed report tab$")
	public void click_on_the_detailed_report_tab() throws Throwable {

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getDetailedReport()));

	}

	@Then("^verify all the Detailed report tab allcomponents is displayed$")
	public void verify_all_the_detailed_report_tab_allcomponents_is_displayed() throws Throwable {

		driver.findElement(tenantreports.getEmployeeNo()).isDisplayed();
		driver.findElement(tenantreports.getEmployeeName1()).isDisplayed();
		driver.findElement(tenantreports.getEndDate()).isDisplayed();
		driver.findElement(tenantreports.getStartDate()).isDisplayed();
		driver.findElement(tenantreports.getTotalHoursWorked()).isDisplayed();

	}

	@Then("^click on the date text field$")
	public void click_on_the_date_text_field() throws Throwable {

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getDate()));
		driver.findElement(tenantreports.getDate()).click();

		Thread.sleep(2000);
	}

	@Then("^verify the calendar  popup  is displayed$")
	public void verify_the_calendar_popup_is_displayed() throws Throwable {
		driver.findElement(tenantreports.getCalendar()).isDisplayed();

	}

	@Then("^verify select the month access  of the forward and back word button$")
	public void verify_select_the_month_access_of_the_forward_and_back_word_button() throws Throwable {

		driver.findElement(tenantreports.getDate()).click();

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getCalendarbackwordbutton()));
		Thread.sleep(2000);
		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getCalendarforworddbutton()));

	}

	@Then("^verify the date is displayed$")
	public void verify_the_date_is_displayed() throws Throwable {

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getCalendardate()));

	}

	@Then("^click on the Agency droup down$")
	public void click_on_the_agency_droup_down() throws Throwable {

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getAgency13()));

	}

	@Then("^verify the Agency droup down$")
	public void verify_the_agency_droup_down() throws Throwable {
		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getAgencydroupdown147()));

	}

	@Then("^click on the Export as CSV button$")
	public void click_on_the_export_as_csv_button() throws Throwable {

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getExportAsCSV()));

	}

	@Then("^verify the Export as CSV button$")
	public void verify_the_export_as_csv_button() throws Throwable {
		String filename = "dailyReport.CSV";
		String downloadPath = "C:\\Users\\Madhu\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;

		for (int i = 0; i < len; i++) {

			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}

	}

	@Then("^click on the Export as PDF buttons$")
	public void click_on_the_export_as_pdf_buttons() throws Throwable {

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getExportAsCSV()));

	}

	@Then("^verify the Export as PDF button$")
	public void verify_the_export_as_pdf_button() throws Throwable {

		String filename = "dailyReport.Pdf";
		String downloadPath = "C:\\Users\\Madhu\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;

		for (int i = 0; i < len; i++) {

			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}

	}

	@Then("^click on the Export as Excel buttons$")
	public void click_on_the_export_as_excel_buttons() throws Throwable {

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getExportAsExcel()));
	}

	@Then("^verify the Export as Excel button$")
	public void verify_the_export_as_excel_button() throws Throwable {

		String filename = "dailyReport.xlsx";
		String downloadPath = "C:\\Users\\Madhu\\Downloads";
		File dir = new File(downloadPath);
		File[] dirContents = dir.listFiles();
		int len = dir.listFiles().length;

		for (int i = 0; i < len; i++) {

			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}

	}

	@Then("^verify the search button$")
	public void verify_the_search_button() throws Throwable {

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getSearchButton()));

	}

	@Then("^click on the from  date text field$")
	public void click_on_the_from_date_text_field() throws Throwable {
		Thread.sleep(2000);

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getFromDate()));

	}

	@Then("^click on the To date text field in Weekly Monthly Report section$")
	public void click_on_the_to_date_text_field_in_weekly_monthly_report_section() throws Throwable {

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getToDate()));

	}

	@Then("^click on the Agency droup down in Weekly Monthly Report section$")
	public void click_on_the_agency_droup_down_in_weekly_monthly_report_section() throws Throwable {
		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getAgency13()));

	}

	@Then("^click on the the from date text field$")
	public void click_on_the_the_from_date_text_field() throws Throwable {
		driver.findElement(tenantreports.getFromdateTextfield()).sendKeys("07/07/22");

	}

	@Then("^select the date$")
	public void select_the_date() throws Throwable {

		driver.findElement(tenantreports.getToDate()).sendKeys("07/07/22");
		driver.findElement(tenantreports.getTodateTextfield()).sendKeys("07/11/22");

		driver.findElement(tenantreports.getSearchButton12()).click();

	}

	@Then("^verify the Detailed report table is displayed$")
	public void verify_the_detailed_report_table_is_displayed() throws Throwable {

		driver.findElement(tenantreports.getTableweekly()).isDisplayed();

	}

	@Then("^verify summarized report  table is displayed$")
	public void verify_summarized_report_table_is_displayed() throws Throwable {

		driver.findElement(tenantreports.getTableweekly2()).isDisplayed();

	}

	@Then("^click on the Custom Report sub module$")
	public void click_on_the_custom_report_sub_module() throws Throwable {

		wait.until(ExpectedConditions.visibilityOf(driver.findElement(tenantreports.getTableReport())));
		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getCustomReportsubmodule()));

	}

	@Then("^verify the Custom Report sub module$")
	public void verify_the_custom_report_sub_module() throws Throwable {

		driver.findElement(tenantreports.getActiveemployeesfacetemplatecountreport()).isDisplayed();

	}

	@Then("^verify the Report Options and Custom Report sections is displayed$")
	public void verify_the_report_options_and_custom_report_sections_is_displayed() throws Throwable {

		driver.findElement(tenantreports.getReportOptions()).isDisplayed();
		driver.findElement(tenantreports.getCustomReport1()).isDisplayed();

	}

	@Then("^click on the Active employees fingerprint count report link$")
	public void click_on_the_active_employees_fingerprint_count_report_link() throws Throwable {
		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();",
				driver.findElement(tenantreports.getActiveemployeesfacetemplatecountreport()));
		driver.findElement(tenantreports.getActiveemployeesfacetemplatecountreport()).click();
		Thread.sleep(2000);

	}

	@Then("^click on Subscribe button$")
	public void click_on_subscribe_button() throws Throwable {
		// js.executeScript("arguments[0].click();",
		// driver.findElement(tenantreports.getSubscribeButton()));
		// js=(JavascriptExecutor)driver;
		driver.findElement(tenantreports.getSubscribeButton()).click();

	}

	@Then("^Select the monthly$")
	public void select_the_monthly() throws Throwable {

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getMonthlyButton()));

	}

	@Then("^click on the sumit button$")
	public void click_on_the_sumit_button() throws Throwable {

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getSubmitButton23()));

	}

	@Then("^click on the unsubscribe button$")
	public void click_on_the_unsubscribe_button() throws Throwable {

		js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", driver.findElement(tenantreports.getUnSubscribeButton()));

	}

	@Then("^verify the Successfully Unsubscribed popup is displayed$")
	public void verify_the_successfully_unsubscribed_popup_is_displayed() throws Throwable {

		wait.until(ExpectedConditions.visibilityOf(driver.findElement(tenantreports.getUnsubscribepopuptable())));
		Assert.assertEquals(driver.findElement(tenantreports.getSuccessfullyUnsubscribed()).getText(),
				"Successfully Unsubscribed");

	}

	@Then("^verify the Unsubscribed button is displayed in subscribe button$")
	public void verify_the_unsubscribed_button_is_displayed_in_subscribe_button() throws Throwable {
		Thread.sleep(2000);

		driver.findElement(tenantreports.getSubscribeButton()).isDisplayed();

	}

	@Then("^Verify the Daily weekly monthly links are displayed$")
	public void verify_the_daily_weekly_monthly_links_are_displayed() throws Throwable {

		Thread.sleep(2000);
		// assert.assertEquals(driver.findElement(tenantreports.getMonthlyButton()).getText()),
		// "Monthly");
		// Assert.assertEquals(driver.findElement(tenantreports.getMonthlyButton()).getText(),
		// "MONTHLY");
		driver.findElement(tenantreports.getMonthlyButton()).isDisplayed();
		driver.findElement(tenantreports.getWeeklyButton()).isDisplayed();
		driver.findElement(tenantreports.getDailyButton()).isDisplayed();

	}

	@Then("^Verify the Subscribe button$")
	public void verify_the_subscribe_button() throws Throwable {

		driver.findElement(tenantreports.getMonthlyButton()).isDisplayed();

	}

	@Then("^verify the  Active employees face template count table$")
	public void verify_the_active_employees_face_template_count_table() throws Throwable {

		driver.findElement(tenantreports.getEmployee_no()).isDisplayed();
		driver.findElement(tenantreports.getFIRST_NAME()).isDisplayed();
		driver.findElement(tenantreports.getLAST_NAME()).isDisplayed();
		driver.findElement(tenantreports.getFaceTemplateCount()).isDisplayed();
		driver.findElement(tenantreports.getCSV1()).isDisplayed();
		driver.findElement(tenantreports.getXLS1()).isDisplayed();

	}

// Sudarshan Bhai

	@Then("^click on the user name text field$")
	public void click_on_the_user_name_text_field() throws Throwable {

		driver.get(property.getProperty("url"));
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getUsernametextfield())
				.sendKeys(property.getProperty("username"));

	}

	@Then("^click on the password text field$")
	public void click_on_the_password_text_field() throws Throwable {
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getPasswordtextfield())
				.sendKeys(property.getProperty("password"));
	}

	@Then("^click on the sign in button$")
	public void click_on_the_sign_in_button() throws Throwable {
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getSigninbutton()).click();
		Thread.sleep(2000);

	}

	@Given("^login to the host Account$")
	public void login_to_the_host_account1() throws Throwable {
		driver.get(property.getProperty("url"));
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getUsernametextfield())
				.sendKeys(property.getProperty("username"));
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getPasswordtextfield())
				.sendKeys(property.getProperty("password"));
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getSigninbutton()).click();
		Thread.sleep(2000);

	}

	@Then("^click on System utilities module$")
	public void click_on_system_utilities_module() throws Throwable {
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getSystemUtilities()).click();
		wait.until(ExpectedConditions
				.visibilityOf(driver.findElement(systemUtilitiesCirrusDCSPageObjects.getSystemUtilitiesTable())));

	}

	@Then("^click on system properties sub module$")
	public void click_on_system_properties_sub_module() throws Throwable {
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getSystemProperties()).click();

	}

	@Then("^verify the system properties sub module is displayed$")
	public void verify_the_system_properties_sub_module_is_displayed() throws Throwable {

		Assert.assertEquals(driver.findElement(systemUtilitiesCirrusDCSPageObjects.getSystemPropertiestext()).getText(),
				"System Utilities >> System Properties");
	}

	@Then("^verify property key textfield is present$")
	public void verify_property_key_testfield_is_present() throws Throwable {
		Assert.assertTrue(
				driver.findElement(systemUtilitiesCirrusDCSPageObjects.getPropertykeyTextfield()).isDisplayed());

	}

	@Then("^Enter property Key and search$")
	public void enter_property_key_and_search() throws Throwable {
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getPropertykeyTextfield())
				.sendKeys(property.getProperty("Propertykey"));
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getPropertykeyTextfieldsearchbutton()).click();
		Thread.sleep(2000);

	}

	@Then("^verify Property key is filtered$")
	public void verify_property_key_is_filtered() throws Throwable {

		Assert.assertEquals(driver.findElement(systemUtilitiesCirrusDCSPageObjects.getPropertykeyvalue()).getText(),
				"ZK Data Collection Services");

	}

	@Then("^Verify propertykey column is present$")
	public void verify_propertykey_column_is_present() throws Throwable {

		String ss = driver.findElement(systemUtilitiesCirrusDCSPageObjects.getTablePropertykeycolumn()).getText()
				.trim();
		System.out.println(ss);
		Assert.assertEquals(ss, property.getProperty("propertykeycolumn"));

	}

	@Then("^Verify Propertyvalue column  is present$")
	public void verify_propertyvalue_column_is_present() throws Throwable {

		String ss = driver.findElement(systemUtilitiesCirrusDCSPageObjects.getTablePropertyvaluecolumn()).getText()
				.trim();
		System.out.println(ss);
		Assert.assertEquals(ss, property.getProperty("PROPERTYVALUEcolumn"));

	}

	@Then("^verify Datatype column is present$")
	public void verify_datatype_column_is_present() throws Throwable {
		String DC = driver.findElement(systemUtilitiesCirrusDCSPageObjects.getTableDataTypecolumn()).getText().trim();
		System.out.println(DC);

		Assert.assertEquals(DC, property.getProperty("DataTypecolumn"));
	}

	@Then("^verify Edit column is present$")
	public void verify_edit_column_is_present() throws Throwable {
		String EC = driver.findElement(systemUtilitiesCirrusDCSPageObjects.getTableEditcolumn()).getText().trim();
		System.out.println(EC);
		Assert.assertEquals(EC, property.getProperty("Editcolumn"));

	}

	@Then("^Click on Edit button of the selected property key$")
	public void click_on_edit_button_of_the_selected_property_key() throws Throwable {
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getTableEditbutton()).click();

	}

	@Then("^verify Editproperty window is displayed$")
	public void verify_editproperty_window_is_displayed() throws Throwable {
		Thread.sleep(2000);
		Assert.assertTrue(driver.findElement(systemUtilitiesCirrusDCSPageObjects.getTableEdittable()).isDisplayed());

	}

	@Then("^Enter the property value and Reason$")
	public void enter_the_property_value_and_reason() throws Throwable {

		JavascriptExecutor js = (JavascriptExecutor) driver;

		wait.until(ExpectedConditions
				.visibilityOf(driver.findElement(systemUtilitiesCirrusDCSPageObjects.getEditpropertyvaluefield())));

		js.executeScript("arguments[0].value='60'",
				driver.findElement(systemUtilitiesCirrusDCSPageObjects.getEditpropertyvaluefield()));
		// driver.findElement(cirrusDCSPageObjects.getEditpropertyvaluefield()).sendKeys("60");
		// Thread.sleep(2000);

		js.executeScript("arguments[0].value='Test'",
				driver.findElement(systemUtilitiesCirrusDCSPageObjects.getEditreasonfield()));
		// driver.findElement(cirrusDCSPageObjects.getEditreasonfield()).sendKeys("Test");
		// Thread.sleep(1600);

	}

	@Then("^Click on Save button$")
	public void click_on_save_button() throws Throwable {
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getEditsavebutton()).click();

	}

	@Then("^Message is getting displayed$")
	public void message_is_getting_displayed() throws Throwable {
		wait.until(ExpectedConditions
				.visibilityOf(driver.findElement(systemUtilitiesCirrusDCSPageObjects.getEditsuccessmessage())));
		Assert.assertEquals(driver.findElement(systemUtilitiesCirrusDCSPageObjects.getEditsuccessmessage()).getText(),
				property.getProperty("Editsuccessmessagae"));

	}

	@Then("^Check Edited value is Saved$")
	public void check_edited_value_is_saved() throws Throwable {
		Assert.assertEquals(driver.findElement(systemUtilitiesCirrusDCSPageObjects.getEditvaluesaved()).getText(),
				property.getProperty("Editvaluesaved"));
	}

	@Then("^check sync or New button is present$")
	public void check_sync_or_new_button_is_present() throws Throwable {
		Assert.assertTrue(driver.findElement(systemUtilitiesCirrusDCSPageObjects.getNewsyncbutton()).isDisplayed());
	}

	@Then("^click on button and verify property detils popup is displayed or not$")
	public void click_on_button_and_verify_property_detils_popup_is_displayed_or_not() throws Throwable {
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getNewsyncbutton()).click();
		Thread.sleep(2000);
		Assert.assertTrue(
				driver.findElement(systemUtilitiesCirrusDCSPageObjects.getPropertydetailswindow()).isDisplayed());
		Assert.assertEquals(driver.findElement(systemUtilitiesCirrusDCSPageObjects.getPropertydetailstext()).getText(),
				property.getProperty("propertydetailstext"));
	}

	@Then("^I check Export button is present or not$")
	public void i_check_export_button_is_present_or_not() throws Throwable {
		Assert.assertTrue(
				driver.findElement(systemUtilitiesCirrusDCSPageObjects.getPropertydetailsExport()).isDisplayed());
	}

	@Then("^I Click on Export button$")
	public void i_click_on_export_button() throws Throwable {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,1000)");
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getPropertydetailsExport()).click();
		Thread.sleep(2000);
	}

	@Then("^I verify whether fie got exported$")
	public void i_verify_whether_fie_got_exported() throws Throwable {

		String filename = "System_Properties.csv";
		String downloadPath = "D:\\CirrusDCS\\CirrusDCS\\Downloads\\exportDismissalEmployee";
		File dir = new File(downloadPath);

		File[] dirContents = dir.listFiles();

		System.out.println(dirContents.length);

		for (int i = 0; i < dirContents.length; i++) {
			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}

	}

	@Then("^click on Property master list submodule$")
	public void click_on_property_master_list_submodule() throws Throwable {
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getSystemUtilities()).click();
		// wait.until(ExpectedConditions.visibilityOf(driver.findElement(cirrusDCSPageObjects.getSystemUtilitiesTable())));
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getPropertymasterlistsubmodule()).click();

	}

	@Then("^check property master list page is displayed$")
	public void check_property_master_list_page_is_displayed() throws Throwable {
		Assert.assertEquals(driver.getCurrentUrl(), property.getProperty("proeprtymasterlistpage"));
	}

	@Then("^Check Property key Text field is present$")
	public void check_property_key_text_field_is_present() throws Throwable {
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getMasterlistpropertykeyserachfield()).isDisplayed();
	}

	@Then("^Check property key search button is present$")
	public void check_property_key_search_button_is_present() throws Throwable {

		Assert.assertTrue(driver.findElement(systemUtilitiesCirrusDCSPageObjects.getMasterlistpropertykeysearchbutton())
				.isDisplayed());
	}

	@Then("^Enter the property key inside search field$")
	public void enter_the_property_key_inside_search_field() throws Throwable {
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getMasterlistpropertykeyserachfield())
				.sendKeys(property.getProperty("propertykey"));
	}

	@Then("^Click on search button$")
	public void click_on_search_button() throws Throwable {
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getMasterlistpropertykeysearchbutton()).click();
	}

	@Then("^validate property key is searched$")
	public void validate_property_key_is_searched() throws Throwable {
		String f = driver.findElement(systemUtilitiesCirrusDCSPageObjects.getPropertykeyfilter()).getText();
		System.out.println(f);
		Assert.assertEquals(driver.findElement(systemUtilitiesCirrusDCSPageObjects.getPropertykeyfilter()).getText(),
				property.getProperty("propertykey"));

	}

	@Then("^check New button present is present$")
	public void check_new_button_present_is_present() throws Throwable {
		Assert.assertTrue(driver.findElement(systemUtilitiesCirrusDCSPageObjects.getNewbutton()).isDisplayed());
	}

	@Then("^Click on New button$")
	public void click_on_new_button() throws Throwable {

		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,1000)");

		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getNewbutton()).click();

	}

	@Then("^verify property details pop up window displayed$")
	public void verify_property_details_pop_up_window_displayed() throws Throwable {
		Thread.sleep(2000);
		Assert.assertTrue(
				driver.findElement(systemUtilitiesCirrusDCSPageObjects.getPropertydetailspopupwindow()).isDisplayed());

	}

	@Then("^click on category dropdown$")
	public void click_on_category_dropdown() throws Throwable {
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getCategorydropdown()).click();

	}

	@Then("^select the Workday$")
	public void select_the_workday() throws Throwable {
		wait.until(ExpectedConditions
				.visibilityOf(driver.findElement(systemUtilitiesCirrusDCSPageObjects.getCategorylist())));
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getCategoryworkday()).click();
	}

	@Then("^Fill property key  in Text field$")
	public void fill_property_key_in_text_field() throws Throwable {
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getNewbuttonpropertykey())
				.sendKeys(property.getProperty("Newbuttonpropertykey"));

	}

	@Then("^Enter the property value$")
	public void enter_the_property_value() throws Throwable {
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getNewbuttonpropertyvalue())
				.sendKeys(property.getProperty("Newbuttonpropertyvalue"));
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getNewsavebutton()).click();
		Thread.sleep(2000);

	}

	@Then("^Make logout$")
	public void make_logout() throws Throwable {
		Thread.sleep(2000);

		actions.moveToElement(driver.findElement(systemUtilitiesCirrusDCSPageObjects.getUserbutton())).build()
				.perform();
		// driver.findElement(cirrusDCSPageObjects.getUserbutton()).click();
		wait.until(ExpectedConditions
				.visibilityOf(driver.findElement(systemUtilitiesCirrusDCSPageObjects.getLogoutwindow())));
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getLogoutbutton()).click();
	}

	@Then("^verify whether Newly crreated property key is displayed$")
	public void verify_whether_newly_crreated_property_key_is_displayed() throws Throwable {

		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getMasterlistpropertykeyserachfield())
				.sendKeys(property.getProperty("validatepropertykey"));
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getMasterlistpropertykeysearchbutton()).click();
		Assert.assertEquals(driver.findElement(systemUtilitiesCirrusDCSPageObjects.getValidatepropertykey()).getText(),
				property.getProperty("validatepropertykey"));
	}

	@Then("^Click on Export button$")
	public void click_on_export_button() throws Throwable {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,1000)");
		wait.until(ExpectedConditions
				.visibilityOf(driver.findElement(systemUtilitiesCirrusDCSPageObjects.getExportbutton()))).isDisplayed();
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getExportbutton()).click();
		Thread.sleep(2000);

	}

	@Then("^validate property master list got downloaded to local system$")
	public void validate_property_master_list_got_downloaded_to_local_system() throws Throwable {
		String filename = "Master_Properties.csv";
		String downloadPath = "D:\\CirrusDCS\\CirrusDCS\\Downloads\\exportDismissalEmployee";
		File dir = new File(downloadPath);

		File[] dirContents = dir.listFiles();

		System.out.println(dirContents.length);

		for (int i = 0; i < dirContents.length; i++) {
			if (dirContents[i].getName().equalsIgnoreCase(filename)) {
				System.out.println(dirContents[i].getName());
				System.out.println("File is downloaded");
				assert true;
				break;
			}
		}
	}

	@Then("^Click on Event Template Module$")
	public void click_on_event_template_module() throws Throwable {
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getEventTemplate()).click();

	}

	@Then("^Verify Event template page is displayed$")
	public void verify_event_template_page_is_displayed() throws Throwable {
		Assert.assertEquals(driver.getCurrentUrl(), property.getProperty("Eventtemplateurl"));

	}

	@Then("^verify Add Template button is present$")
	public void verify_add_template_button_is_present() throws Throwable {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,1000)");
		Assert.assertTrue(driver.findElement(systemUtilitiesCirrusDCSPageObjects.getAddtemplate()).isDisplayed());
	}

	@Then("^click on Add Template button is present$")
	public void click_on_add_template_button_is_present() throws Throwable {
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getAddtemplate()).click();
	}

	@Then("^validate pop up window is displayed$")
	public void validate_pop_up_window_is_displayed() throws Throwable {
		Thread.sleep(2000);
		Assert.assertTrue(driver.findElement(systemUtilitiesCirrusDCSPageObjects.getEventpopupwindow()).isDisplayed());
	}

	@Then("^enter Template name in template name text field$")
	public void enter_template_name_in_template_name_text_field() throws Throwable {
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getTemplateName()).sendKeys("Template Name");
	}

	@Then("^enter description in description text field$")
	public void enter_description_in_description_text_field() throws Throwable {
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getDescription()).sendKeys("Description");
	}

	@Then("^enter subject in subject text field$")
	public void enter_subject_in_subject_text_field() throws Throwable {
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getSubject()).sendKeys("Subject");
	}

	@Then("^enter content in content text field$")
	public void enter_content_in_content_text_field() throws Throwable {
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getContent()).sendKeys("Content");
	}

	@Then("^click on EventSave button$")
	public void click_on_eventsave_button() throws Throwable {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();",
				driver.findElement(systemUtilitiesCirrusDCSPageObjects.getEventsave()));

	}

	@Then("^Click on the Edit button the Event template$")
	public void click_on_the_edit_button_the_event_template() throws Throwable {
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getEventEdit()).click();
	}

	@Then("^check Event popup window displays$")
	public void check_event_popup_window_displays() throws Throwable {
		wait.until(ExpectedConditions
				.visibilityOf(driver.findElement(systemUtilitiesCirrusDCSPageObjects.getEventpopupwindow())))
				.isDisplayed();

	}

	@Then("^enter the data that needed to be changed$")
	public void enter_the_data_that_needed_to_be_changed() throws Throwable {
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getDescription()).clear();
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getDescription())
				.sendKeys(property.getProperty("EditDescription"));
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getSubject()).clear();
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getSubject())
				.sendKeys(property.getProperty("EditSubject"));
	}

	@Then("^Click on Save buttonn of Edit window$")
	public void click_on_save_buttonn_of_edit_window() throws Throwable {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();",
				driver.findElement(systemUtilitiesCirrusDCSPageObjects.getEventsave()));

	}

	@Then("^Click on Event Type Manager page$")
	public void click_on_event_type_manager_page() throws Throwable {
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getEventtypemanager()).click();

	}

	@Then("^verify Event Type Manager page is displayed$")
	public void verify_event_type_manager_page_is_displayed() throws Throwable {
		Assert.assertEquals(driver.getCurrentUrl(), property.getProperty("Eventtypemanagerpage"));

	}

	@Then("^click on Add event button$")
	public void click_on_add_event_button() throws Throwable {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,1000)");
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getAddeventtypebutton()).click();
		Thread.sleep(2000);

	}

	@Then("^verify event details window popup displayed$")
	public void verify_event_details_window_popup_displayed() throws Throwable {
		Assert.assertTrue(driver.findElement(systemUtilitiesCirrusDCSPageObjects.getEventtypepopup()).isDisplayed());

	}

	@Then("^fill all the textfields$")
	public void fill_all_the_textfields() throws Throwable {
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getEventtypeTF()).sendKeys("EventtypeTF");
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getEventtypedescriptionTF()).sendKeys("ETDescriptionTF");
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getETeventtemplateTF()).sendKeys("ETeventtemplateTF");
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getDeliverymode()).click();
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getETselectcategory()).click();
		Thread.sleep(2000);
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getETcategorytpe()).click();

	}

	@Then("^click on Event type save button$")
	public void click_on_event_type_save_button() throws Throwable {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();",
				driver.findElement(systemUtilitiesCirrusDCSPageObjects.getEventsave()));

	}

	@Then("^Click on Cron job sub module$")
	public void click_on_cron_job_sub_module() throws Throwable {
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getCronjobs()).click();

	}

	@Then("^verify whether Cron job module is displayed$")
	public void verify_whether_cron_job_module_is_displayed() throws Throwable {
		Assert.assertEquals(driver.getCurrentUrl(), property.getProperty("cronjobspage"));

	}

	@Then("^Enter the Cron job in search text field$")
	public void enter_the_cron_job_in_search_text_field() throws Throwable {

		// JavascriptExecutor js=(JavascriptExecutor)driver;
		// js.executeScript("arguments[0].value='"+property.getProperty("cronjobname")+"';",driver.findElement(cirrusDCSPageObjects.getEventsave()));
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getCronjobsearch())
				.sendKeys(property.getProperty("cronjobname"));
	}

	@Then("^click on cron search button$")
	public void click_on_cron_search_button() throws Throwable {
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getCronjobsearchbutton()).click();
	}

	@Then("^verify whether cron job entered got searched$")
	public void verify_whether_cron_job_entered_got_searched() throws Throwable {
		Assert.assertEquals(driver.findElement(systemUtilitiesCirrusDCSPageObjects.getCronjobID()).getText(),
				property.getProperty("cronjobname"));
		Thread.sleep(2000);

	}

	@Then("^click on cron edit button$")
	public void click_on_cron_edit_button() throws Throwable {

		List<WebElement> EditIcon = driver.findElements(By.xpath("//table/tbody/tr/td[5]/a[1]"));
		List<WebElement> jobId = driver.findElements(By.xpath("//table/tbody/tr/td[1]"));

		for (int i = 0; i < jobId.size(); i++) {
			String JobName = jobId.get(i).getText();
			System.out.println(JobName);

			if (JobName.equals(property.getProperty("cronjobname"))) {
				EditIcon.get(i).click();
			}
		}

		wait.until(ExpectedConditions
				.visibilityOf(driver.findElement(systemUtilitiesCirrusDCSPageObjects.getCronjobpopupwinndow())));

	}

	@Then("^Pass the alternate data into job name Text field$")
	public void pass_the_alternate_data_into_job_name_text_field() throws Throwable {
		// Thread.sleep(2000);

		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getCronjobEditjobname()).clear();
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getCronjobEditjobname())
				.sendKeys(property.getProperty("Editcronjobname"));
		Thread.sleep(3000);

	}

	@Then("^verify whether cron job get edited successfully$")
	public void verify_whether_cron_job_get_edited_successfully() throws Throwable {

		List<WebElement> jobId = driver.findElements(By.xpath("//table/tbody/tr/td[1]"));

		for (int i = 0; i < jobId.size(); i++) {
			String JobName = jobId.get(i).getText();
			if (JobName.equals(property.getProperty("Editcronjobname"))) {
				System.out.println("User is able to edit the jobid");
			}
		}
		// Assert.assertEquals(driver.findElement(cirrusDCSPageObjects.getCronjobID()).getText(),
		// property.getProperty("cronjobname"));
	}

	@Then("^click on the log icon of the job selected$")
	public void click_on_the_log_icon_of_the_job_selected() throws Throwable {
		List<WebElement> Joblog = driver.findElements(systemUtilitiesCirrusDCSPageObjects.getCronjoblogsbutton());
		List<WebElement> JobID = driver.findElements(systemUtilitiesCirrusDCSPageObjects.getCronjobID());

		for (int i = 0; i < JobID.size(); i++) {
			String JobName = JobID.get(i).getText();
			System.out.println(JobName);
			if (JobName.equals(property.getProperty("Editcronjobnamelogs"))) {
				Joblog.get(i).click();
			}

		}

	}

	@Then("^verify whether user is able to view job logs$")
	public void verify_whether_user_is_able_to_view_job_logs() throws Throwable {
		wait.until(ExpectedConditions
				.stalenessOf(driver.findElement(systemUtilitiesCirrusDCSPageObjects.getCronjobLogspopupwindow())));
	}

	@Then("^click on server reload context sub module$")
	public void click_on_server_reload_context_sub_module() throws Throwable {
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getServerreloadcontext()).click();
	}

	@Then("^verify whether server reload context page is displayed$")
	public void verify_whether_server_reload_context_page_is_displayed() throws Throwable {
		Assert.assertEquals(driver.getCurrentUrl(), property.getProperty("serverreloadcontextpageurl"));

	}

	@Then("^Click on Xmlpropertiesfile submodule$")
	public void click_on_xmlpropertiesfile_submodule() throws Throwable {
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getXMLpropertiesfile()).click();
	}

	@Then("^verify Xmlproperties page displayed$")
	public void verify_xmlproperties_page_displayed() throws Throwable {
		Assert.assertEquals(driver.getCurrentUrl(), property.getProperty("Xmlpropertiesfile"));

	}

	@Then("^Click on subscription submodule$")
	public void click_on_subscription_submodule() throws Throwable {
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getSubscriptionsubmodule()).click();
	}

	@Then("^verify subscription page displayed$")
	public void verify_subscription_page_displayed() throws Throwable {
		Assert.assertEquals(driver.getCurrentUrl(), property.getProperty("subscriptionpage"));

	}

	@Then("^Click on the check box an event provided$")
	public void click_on_the_check_box_an_event_provided() throws Throwable {
//                             List<WebElement> btn = driver.findElements(By.xpath("//span[@class='ui-paginator-pages']/span"));
//                             List<WebElement> Events = driver.findElements(By.xpath("//tbody/tr/td[1]"));
//                             List<WebElement> EventsDesc = driver.findElements(cirrusDCSPageObjects.getEventsdescription());
//                             
//                             JavascriptExecutor js = (JavascriptExecutor) driver;
//                             js.executeScript("window.scrollBy(0,1000)");
//                             for(int i=0;i<btn.size();i++)
//                             {
//                            	  
//                            	  btn.get(i).click();
//                            	  for(int j=1;j<Events.size();j++)
//                            	  {
//                            		  
//                            		  Thread.sleep(2000);
//                            		  String Eventsname = Events.get(j).getText();
//                            		  System.out.println(Eventsname);
//                            		  if(Eventsname.equals(property.getProperty("SubscriptionEvents")))
//                            		  {
//                            			  EventsDesc.get(j).click();
//                            		  }
//                            	  }
//                             }
//                             

		// List<WebElement> eventName =
		// driver.findElements(By.xpath("//tbody[@id='subscriptionForm:j_id_15_data']/tr/td[1]"));
		List<WebElement> checkbox = driver
				.findElements(By.xpath("//tbody[@id='subscriptionForm:j_id_15_data']/tr/td[3]/div/div[2]/span"));
		List<WebElement> Paginationbtns = driver
				.findElements(By.xpath("//div[@id='subscriptionForm:j_id_15_paginator_bottom']/span[3]/span"));

		for (int i = 0; i < Paginationbtns.size(); i++) {
			List<WebElement> eventName = driver
					.findElements(By.xpath("//tbody[@id='subscriptionForm:j_id_15_data']/tr/td[1]"));
			JavascriptExecutor js = (JavascriptExecutor) driver;
			js.executeScript("window.scrollBy(0,1000)");
			Thread.sleep(2000);
			Paginationbtns.get(i).click();
			for (int j = 0; j < eventName.size(); j++) {
				Thread.sleep(2000);
				String name = eventName.get(j).getText();
				if (name.contains("PropertyChangeEvent")) {
					Thread.sleep(2000);
					checkbox.get(j).click();

				}

			}
			eventName.clear();
			Thread.sleep(2000);
		}

	}

	@Then("^click on update subscription$")
	public void click_on_update_sunscription() throws Throwable {
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getUpdatebutton()).click();
		wait.until(ExpectedConditions
				.visibilityOf(driver.findElement(systemUtilitiesCirrusDCSPageObjects.getMessagecontainer())));
	}

	@Then("^verify the subscription got updated$")
	public void verify_the_subscription_got_updated() throws Throwable {

		String SM = driver.findElement(systemUtilitiesCirrusDCSPageObjects.getSubscriptionsuccessmessage()).getText();
		System.out.println(SM);
		Assert.assertEquals(
				driver.findElement(systemUtilitiesCirrusDCSPageObjects.getSubscriptionsuccessmessage()).getText(),
				property.getProperty("Subscriptionsuccessmessage"));

	}

	@Then("^I Click on Stimulate job submodule$")
	public void i_click_on_stimulate_job_submodule() throws Throwable {
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getStimulatejob()).click();
	}

	@Then("^I Verify stimulate job is displayed$")
	public void i_verify_stimulate_job_is_displayed() throws Throwable {
		Assert.assertEquals(driver.getCurrentUrl(), property.getProperty("stimulatejobURL"));
	}

	@Then("^I click on Pending Events sub module$")
	public void i_click_on_pending_events_sub_module() throws Throwable {
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getPendingEVents()).click();
	}

	@Then("^I verify Pending Events pages displayed or not$")
	public void i_verify_pending_events_pages_displayed_or_not() throws Throwable {
		Assert.assertEquals(driver.getCurrentUrl(), property.getProperty("pendingevents"));
	}

	@Then("^I Click  on Swagger UI sub module$")
	public void i_click_on_swagger_ui_sub_module() throws Throwable {
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getSwaggerUi()).click();
	}

	@Then("^I veriify swagger page displayed or not$")
	public void i_veriify_swagger_page_displayed_or_not() throws Throwable {
		Assert.assertEquals(driver.getCurrentUrl(), property.getProperty("swaggerUIURl"));
	}

	@Then("^I Click on Redis management sub module$")
	public void i_click_on_redis_management_sub_module() throws Throwable {
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getRedismanagementmodule()).click();
	}

	@Then("^I verify redis management page i displayed or not$")
	public void i_verify_redis_management_page_i_displayed_or_not() throws Throwable {
		Assert.assertEquals(driver.getCurrentUrl(), property.getProperty("REDISMANAGEMENTurl"));
	}

	@Then("^Click on System cache management sub module$")
	public void click_on_system_cache_management_sub_module() throws Throwable {
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getSystemcachemanagement()).click();
	}

	@Then("^I verify System cache management page iis displayed or not$")
	public void i_verify_system_cache_management_page_iis_displayed_or_not() throws Throwable {
		Assert.assertEquals(driver.getCurrentUrl(), property.getProperty("systemcachemanagement"));
	}

	@Then("^I select the server from server list$")
	public void i_select_the_server_from_server_list() throws Throwable {
		List<WebElement> serverList = driver.findElements(systemUtilitiesCirrusDCSPageObjects.getServerlist());
		for (int i = 0; i < serverList.size(); i++) {
			String Servername = serverList.get(i).getText();
			System.out.println(Servername);

			if (Servername.equals("http://10.1.1.38")) {
				serverList.get(i).click();

			}
		}
	}

	@Then("^I Click on Device Details$")
	public void i_click_on_device_details() throws Throwable {
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getDevicelistdrop()).click();

	}

	@Then("^I enter device details in the search field$")
	public void i_enter_device_details_in_the_search_field() throws Throwable {
		Thread.sleep(2000);
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getSysdevicesearchfield())
				.sendKeys(property.getProperty("Devicesnnumber"));
		Thread.sleep(2000);
	}

	@Then("^I click on Search Device search button$")
	public void i_click_on_search_device_search_button() throws Throwable {
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getSyssearchbutton()).click();

	}

	@Then("^I verify Device details is displayed or not$")
	public void i_verify_device_details_is_displayed_or_not() throws Throwable {
		Thread.sleep(2000);
		String deviceSn = driver.findElement(systemUtilitiesCirrusDCSPageObjects.getDevicesntable()).getText();
		String deviceDt = driver.findElement(systemUtilitiesCirrusDCSPageObjects.getDevicdetailstable()).getText();
		Thread.sleep(2000);
		// System.out.println(deviceSn);
		if (deviceSn.equals("6122213400084")) {
			System.out.println(deviceSn);
		}
		if (deviceDt.contains("primaryKey")) {
			System.out.println(deviceDt);
		}
	}

	@Then("^I click on Delete button of the device$")
	public void i_click_on_delete_button_of_the_device() throws Throwable {
		Thread.sleep(2000);
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getDevicedeletetable()).click();
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath("//div[@id='j_id_m']"))));
		Thread.sleep(2000);
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getDevicedeleteYesbutton()).click();
	}

	@Then("^I click on Device Environment drop$")
	public void i_click_on_device_environment_drop() throws Throwable {

		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,1900)");
		wait.until(ExpectedConditions
				.stalenessOf(driver.findElement(systemUtilitiesCirrusDCSPageObjects.getDeviceEnviromentdetails())));

		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getDeviceEnviromentdetails()).click();
		Thread.sleep(2000);

	}

	@Then("^I enter the Device sn in searchfield$")
	public void i_enter_the_device_sn_in_searchfield() throws Throwable {
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getDeviceenvsearchfield()).sendKeys("00048171");
	}

	@Then("^I Click on sn search button$")
	public void i_click_on_sn_search_button() throws Throwable {
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getDeviceEnvsearchbutton()).click();
		Thread.sleep(2000);
	}

	@Then("^I verify whether device got filtered$")
	public void i_verify_whether_device_got_filtered() throws Throwable {
		String DeviceEnvsn = driver.findElement(systemUtilitiesCirrusDCSPageObjects.getDeviceEnvDsn()).getText();
		// System.out.println(DeviceEnvsn);
		Thread.sleep(2000);
		String deviceEnvdetails = driver.findElement(systemUtilitiesCirrusDCSPageObjects.getDeviceEnvdetails())
				.getText();

		if (DeviceEnvsn.equals("00048171")) {
			System.out.println(DeviceEnvsn);

		}

		if (deviceEnvdetails.contains("client")) {
			System.out.println(deviceEnvdetails);
		}
	}

	@Then("^I click on Delete button of Device env details$")
	public void i_click_on_delete_button_of_device_env_details() throws Throwable {
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getDeviceEnvdeletebutton()).click();
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath("//div[@id='j_id_m']"))));
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getDevicedeleteYesbutton()).click();
	}

	@Then("^I click on Client List$")
	public void i_click_on_client_list() throws Throwable {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,1900)");
		wait.until(ExpectedConditions
				.stalenessOf(driver.findElement(systemUtilitiesCirrusDCSPageObjects.getClientlistdrop())));
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getClientlistdrop()).click();
	}

	@Then("^I click on company hirerarchy drop$")
	public void i_click_on_company_hirerarchy_drop() throws Throwable {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,2000)");
		wait.until(ExpectedConditions
				.stalenessOf(driver.findElement(systemUtilitiesCirrusDCSPageObjects.getCompanyHirerarchypage())));
		driver.findElement(systemUtilitiesCirrusDCSPageObjects.getCompanyHirerarchypage()).click();
	}

	@Given("^login in to the tenant  page$")
	public void login_in_to_the_tenant_pagee() throws Throwable {
		driver.get("https://cirrusdev1.workdayclocks.com/iclock/jsp/login.jsp");
		driver.findElement(companysetup.getUsername()).sendKeys(property.getProperty("Tenantusername"));
		driver.findElement(companysetup.getPassword()).sendKeys(property.getProperty("TenantPWD"));
		driver.findElement(companysetup.getSignIn()).click();
	}

	@Then("^I Click on Company setup module$")
	public void i_click_on_company_setup_module() throws Throwable {
		driver.findElement(companysetup.getComapnySetup()).click();
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath("//a[@title='Organizations']/../.."))));
	}

	@Then("^I click on organization submodule$")
	public void i_click_on_organization_submodule() throws Throwable {
		driver.findElement(companysetup.getOrganizations()).click();

	}

	@Then("^I verify organizationn page displayed or not$")
	public void i_verify_organizationn_page_displayed_or_not() throws Throwable {
		Assert.assertEquals(driver.getCurrentUrl(), property.getProperty("organizationURL"));
	}

	@Then("^I Click on organization type dropdown$")
	public void i_click_on_organization_type_dropdown() throws Throwable {
		driver.findElement(companysetup.getOrganizationtypedrop()).click();
		Thread.sleep(2000);
	}

	@Then("^I click on organization type$")
	public void i_click_on_organization_type() throws Throwable {
		driver.findElement(companysetup.getOrganizationtype()).click();
		Thread.sleep(2000);
	}

	@Then("^I click on organization type sub list right button$")
	public void i_click_on_organization_type_sub_list_right_button() throws Throwable {
		driver.findElement(companysetup.getOrganizationtypeextendrightanglebutton()).click();

	}

	@Then("^I count number of sub org type$")
	public void i_count_number_of_sub_org_type() throws Throwable {
		int Orgsize = driver.findElements(companysetup.getOrganizationtypelist()).size();
		System.out.println(Orgsize);

	}

	@Then("^I verify selected org details is displayed or not$")
	public void i_verify_selected_org_details_is_displayed_or_not() throws Throwable {
		List<WebElement> orglist = driver.findElements(companysetup.getOrganizationtypelist());

		for (int i = 0; i < orglist.size(); i++) {
			String orglistnames = orglist.get(i).getText();

			if (orglistnames.contains(property.getProperty("organizationname"))) {
				orglist.get(i).click();
			}

		}
		Assert.assertEquals(driver.findElement(companysetup.getOrgdetails()).getText(),
				property.getProperty("organizationname"));

	}

	@Then("^I Enter the Organization name in the search field$")
	public void i_enter_the_organization_name_in_the_search_field() throws Throwable {
		driver.findElement(companysetup.getOrgsearchfield()).sendKeys(property.getProperty("organizationtypename"));
	}

	@Then("^I click on org search button$")
	public void i_click_on_org_search_button() throws Throwable {
		driver.findElement(companysetup.getOrgsearchbutton()).click();
		Thread.sleep(2000);
	}

	@Then("^I verfy whether org details displayed or not$")
	public void i_verfy_whether_org_details_displayed_or_not() throws Throwable {
		List<WebElement> orgsearchdetails = driver.findElements(companysetup.getOrgsearchdetails());
		for (int i = 0; i < orgsearchdetails.size(); i++) {
			String orgd = orgsearchdetails.get(i).getText();
			if (orgd.contains("company")) {
				System.out.println("organization details found");
			} else {
				System.out.println("Org details not founds");
			}
		}
	}

	@Then("^I click on Employees sub module$")
	public void i_click_on_employees_sub_module() throws Throwable {
		driver.findElement(companysetup.getEmployeesmodule()).click();
	}

	@Then("^I verify whether Employees pages displayed or not$")
	public void i_verify_wheteher_employees_pages_displayed_or_not() throws Throwable {
		Assert.assertEquals(driver.getCurrentUrl(), property.getProperty("EmployeespageURl"));
	}

	@Then("^I verify Employees details displayed or not$")
	public void i_verify_employees_details_displayed_or_not() throws Throwable {
		List<WebElement> Etable = driver.findElements(companysetup.getEmployeetable());

		for (WebElement Edt : Etable) {
			Assert.assertTrue(Edt.isDisplayed());
		}
	}

	@Then("^Enter the Employee details in Employee search field$")
	public void enter_the_employee_details_in_employee_search_field() throws Throwable {
		driver.findElement(companysetup.getEmployeesearchfield()).sendKeys(property.getProperty("EmployeeNo"));
	}

	@Then("^I click on Employee search button$")
	public void i_click_on_employee_search_button() throws Throwable {
		driver.findElement(companysetup.getEmployeesearchButton()).click();
		Thread.sleep(2000);
	}

	@Then("^i verify whether Employee searched or not$")
	public void i_verify_whether_employee_searched_or_not() throws Throwable {
		Assert.assertEquals(driver.findElement(companysetup.getEmployeeNofield()).getText(),
				property.getProperty("EmployeeNo"));
	}

	@Then("^I click on Employee status dropdown$")
	public void i_click_on_employee_status_dropdown() throws Throwable {
		driver.findElement(companysetup.getEmployeestatusdrop()).click();
	}

	@Then("^I select the Active status$")
	public void i_select_the_active_status() throws Throwable {
		driver.findElement(companysetup.getEmployeestatusactive()).click();
		driver.findElement(companysetup.getEmployeesearchButton()).click();
		Thread.sleep(2000);

	}

	@Then("^I select a employee from table$")
	public void i_select_a_employee_from_table() throws Throwable {

		driver.findElement(companysetup.getEmployeeNofield()).click();
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,2000)");

	}

	@Then("^I verify employee status$")
	public void i_verify_employee_status() throws Throwable {
		Assert.assertEquals(driver.findElement(companysetup.getEmployeecurrentstatus()).getText(), "Active");

	}

	@Then("^I select the Inactive status$")
	public void i_select_the_inactive_status() throws Throwable {
		driver.findElement(companysetup.getEmployeestatusinactive()).click();
	}

	@Then("^I verify employee inactive status$")
	public void i_verify_employee_inactive_status() throws Throwable {
		Assert.assertEquals(driver.findElement(companysetup.getEmployeecurrentstatus()).getText(), "Inactive");
	}

	@Then("^I click on Advance search Dropdown$")
	public void i_click_on_advance_search_dropdown() throws Throwable {
		driver.findElement(companysetup.getEmpAdavancesearch()).click();
	}

	@Then("^I Enter position in text field$")
	public void i_enter_position_in_text_field() throws Throwable {
		driver.findElement(companysetup.getEmppositionsearch()).sendKeys(property.getProperty("position"));
	}

	@Then("^I Enter Location Iin text field$")
	public void i_enter_location_iin_text_field() throws Throwable {
		// driver.findElement(companysetup.getEmplocationsearch()).sendKeys("");

	}

	@Then("^I enter organization in Text field$")
	public void i_enter_organization_in_text_field() throws Throwable {
		driver.findElement(companysetup.getEmporganization()).sendKeys(property.getProperty("organization"));
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,500)");

	}

	@Then("^I Enter Time type in text field$")
	public void i_enter_time_type_in_text_field() throws Throwable {
		driver.findElement(companysetup.getEmptimetype()).sendKeys(property.getProperty("Timetype"));

	}

	@Then("^I Enter Work Type in text field$")
	public void i_enter_work_type_in_text_field() throws Throwable {
		// driver.findElement(companysetup.getEmpworktype()).sendKeys(property.getProperty(""));

	}

	@Then("^I Enter Pay type in text field$")
	public void i_enter_pay_type_in_text_field() throws Throwable {
		driver.findElement(companysetup.getEmppaytype()).sendKeys(property.getProperty("paytype"));
	}

	@Then("^I Enter worker Id type in Text field$")
	public void i_enter_worker_id_type_in_text_field() throws Throwable {

	}

	@Then("^I click on Search Button$")
	public void i_click_on_search_button() throws Throwable {
		driver.findElement(companysetup.getEmpadvancesearchButton()).click();
		Thread.sleep(2000);
	}

	@Then("^I verify whether advance search is successful$")
	public void i_verify_whether_advance_search_is_successful() throws Throwable {
		String Emptype = driver.findElement(companysetup.getEmployeetypeverify()).getText();
		System.out.println(Emptype);
		Thread.sleep(2000);
		String Vr = driver.findElement(companysetup.getEmployeetypeverify()).getText();
		System.out.println(Vr);
		Assert.assertEquals(driver.findElement(companysetup.getEmployeetypeverify()).getText(),
				property.getProperty("Employeetype"));
		Assert.assertEquals(driver.findElement(companysetup.getTimetypeverify()).getText().trim(),
				property.getProperty("Timetype"));
		String Vt = driver.findElement(companysetup.getPaytype()).getText();
		System.out.println(Vt);
		Assert.assertEquals(driver.findElement(companysetup.getPaytype()).getText(), property.getProperty("paytype"));
		String Vo = driver.findElement(companysetup.getOrganizationtypeverify()).getText();
		System.out.println(Vo);
		Assert.assertEquals(driver.findElement(companysetup.getOrganizationtypeverify()).getText(),
				property.getProperty("organization"));
		Assert.assertEquals(driver.findElement(companysetup.getPositiontypeverify()).getText(),
				property.getProperty("position"));
		String Vp = driver.findElement(companysetup.getPositiontypeverify()).getText();
		System.out.println(Vp);

	}

	@Then("^I click on organizationtype dropdown$")
	public void i_click_on_organizationtype_dropdown() throws Throwable {
		driver.findElement(companysetup.getEmploorgtypeverify()).click();
		wait.until(ExpectedConditions
				.visibilityOf(driver.findElement(By.xpath("//ul[@id='orgChartform:organizationType_items']"))));

	}

	@Then("^I Click on required organization type$")
	public void i_click_on_required_organization_type() throws Throwable {
		driver.findElement(companysetup.getEmporgtpeselect()).click();

	}

	@Then("^i click on Employee selected$")
	public void i_click_on_employee_selected() throws Throwable {
		driver.findElement(companysetup.getEmployeeNofield()).click();
		// Thread.sleep(1000);
		// JavascriptExecutor js = (JavascriptExecutor) driver;
//                	   js.executeScript("window.scrollBy(0,500)");
	}

	@Then("^I verify Employee information table$")
	public void i_verify_employee_information_table() throws Throwable {
		List<WebElement> EIT = driver.findElements(companysetup.getEmpinfotableverify());
		for (WebElement Einfo : EIT) {
			JavascriptExecutor js = (JavascriptExecutor) driver;
			js.executeScript("window.scrollBy(0,500)");

			Assert.assertTrue(Einfo.isDisplayed());
		}
		Thread.sleep(2000);

	}

	@Then("^I verify Employee information$")
	public void i_verify_employee_information() throws Throwable {

		Assert.assertEquals(driver.findElement(companysetup.getEmpinfoEmpnoverify()).getText(),
				property.getProperty("EmployeeNo"));
		Thread.sleep(2000);
	}

	@Then("^I click on Reload employee Button$")
	public void i_click_on_reload_employee_button() throws Throwable {
		driver.findElement(companysetup.getEmpreloadbutton()).click();
	}

	@Then("^I Click on Yes Button$")
	public void i_click_on_yes_buttonn() throws Throwable {
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath("//div[@id='j_id_f']"))));
		driver.findElement(companysetup.getEmpreloadyesbutton()).click();
	}

	@Then("^I verify Employee is active or inactive and click on Button$")
	public void i_verify_employee_is_active_or_inactive() throws Throwable {
		String Estatus = driver.findElement(companysetup.getButtonstatus()).getText();
		System.out.println(Estatus);

		if (Estatus.contains("Inactivate")) {

			WebElement btn = driver.findElement(companysetup.getEmpInactivebutton());
			JavascriptExecutor js = (JavascriptExecutor) driver;
			js.executeScript("arguments[0].click();", btn);

			wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath("//div[@id='j_id_f']"))));
			driver.findElement(companysetup.getEmpreloadyesbutton()).click();
			System.out.println("Employee inactivated");

		} else {
			System.out.println("Employee is already active, if you want to change status change if condition value");
		}
		// else if(Estatus.equals("Activate"))
		{
			driver.findElement(companysetup.getEmpInactivebutton()).click();
			wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath("//div[@id='j_id_f']"))));
			driver.findElement(companysetup.getEmpreloadyesbutton()).click();
			System.out.println("Employee made active");

		}
	}

	@Then("^I verify the status changed$")
	public void i_verify_the_status_changed() throws Throwable {
		Assert.assertEquals(driver.findElement(companysetup.getStatuscontainer()).getText(),
				property.getProperty("Inactivestatusmsg"));
		System.out.println("Emp status change successfull");

	}

	@Then("^I verify Employee job status and make employee inactive$")
	public void i_verify_employee_job_status_and_make_employee_inactive() throws Throwable {
		String Empstatus = driver.findElement(companysetup.getButtonstatus()).getText();

		if (Empstatus.equals("Inactivate")) {
			driver.findElement(companysetup.getEmpInactivebutton()).click();
			wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath("//div[@id='j_id_f']"))));
			driver.findElement(companysetup.getEmpreloadyesbutton()).click();
			System.out.println("Employee made inactive");
		} else {
			System.out.println("Employee was already inactive");
		}
	}

	// @Then("^I Make employee inactive$")
	public void i_make_employee_inactive() throws Throwable {

	}

	@Then("^I make logout$")
	public void i_make_logout() throws Throwable {
		driver.findElement(companysetup.getLogutbutton()).click();

	}

	@Then("^I navigate to Device data sync$")
	public void i_navigate_to_device_data_sync() throws Throwable {
		driver.findElement(companysetup.getDevicemanager()).click();
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(companysetup.getDevicemanagersubmenu())));
		driver.findElement(companysetup.getDevicedatasync()).click();
		Thread.sleep(2000);

	}

	@Then("^I Click on sync employee radio Button$")
	public void i_click_on_sync_employee_radio_button() throws Throwable {
		driver.findElement(companysetup.getSyncEmployeebutton()).click();

	}

	@Then("^I Enter Employee Nunber in quicksearch text field$")
	public void i_enter_employee_nunber_in_quicksearch_text_field() throws Throwable {
		driver.findElement(companysetup.getQuicksearchtextfield()).sendKeys(property.getProperty("EmployeeNo"));

	}

	@Then("^I Click on quicksearch search Button$")
	public void i_click_on_quicksearch_search_button() throws Throwable {
		driver.findElement(companysetup.getQuicksearchbutton()).click();
		Thread.sleep(2000);

	}

	@Then("^I verify whether employee is available$")
	public void i_verify_whether_employee_is_available() throws Throwable {

		Assert.assertEquals(driver.findElement(companysetup.getStatuscontainer()).getText(),
				property.getProperty("Datasyncemployeestatus"));

	}

	@Then("^I make employee active$")
	public void i_make_employee_active() throws Throwable {
		String Emplstatus = driver.findElement(companysetup.getButtonstatus()).getText();

		if (Emplstatus.equals("Activate")) {
			driver.findElement(companysetup.getEmpInactivebutton()).click();
			wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath("//div[@id='j_id_f']"))));
			driver.findElement(companysetup.getEmpreloadyesbutton()).click();
			System.out.println("Employee made active");
		} else {
			System.out.println("Employee was already active");
		}

	}

	@Then("^I verify whether employee status updated to active$")
	public void i_verify_whether_employee_status_updated_to_active() throws Throwable {

		wait.until(ExpectedConditions.invisibilityOf(driver.findElement(By.xpath("//img[@id='j_id_b']"))));
		String Actstatus = driver.findElement(companysetup.getStatuscontainer()).getText();
		System.out.println(Actstatus);
		Assert.assertEquals("Status Updated to Active", Actstatus);

	}

	@Then("^I click on Employee Attendence information Tab$")
	public void i_click_on_employee_attendence_information_tab() throws Throwable {

		JavascriptExecutor executor = (JavascriptExecutor) driver;
		executor.executeScript("arguments[0].scrollIntoView(true);",
				driver.findElement(companysetup.getEmployeeattendanceinformation()));
		executor.executeScript("arguments[0].click();",
				driver.findElement(companysetup.getEmployeeattendanceinformation()));
		Thread.sleep(2000);
		executor.executeScript("arguments[0].click();",
				driver.findElement(companysetup.getEmployeeattendanceinformation()));

	}

	@Then("^I verify whether all the field are displayeds$")
	public void i_verify_whether_all_the_field_are_displayeds() throws Throwable {
		List<WebElement> Empattinfo = driver.findElements(companysetup.getAttendenceinfotablevuerify());

		for (WebElement Empatt : Empattinfo) {
			Assert.assertTrue(Empatt.isDisplayed());
			// System.out.println(Empattinfo);
		}
		// List<WebElement> EITatt =
		// driver.findElements(companysetup.getEmpinfotableverify());
		// for(WebElement Einfoatt:EITatt)
		{
			// JavascriptExecutor js = (JavascriptExecutor) driver;
			// js.executeScript("window.scrollBy(0,1000)");

			// Assert.assertTrue(Einfoatt.isDisplayed());
		}
	}

	@Then("^I Enter badge number$")
	public void i_enter_badge_number() throws Throwable {
		driver.findElement(companysetup.getEmpbadgenumber()).clear();
		driver.findElement(companysetup.getEmpbadgenumber()).sendKeys(property.getProperty("Badgenumber"));
	}

	@Then("^I change verify mode$")
	public void i_change_verify_mode() throws Throwable {
		driver.findElement(companysetup.getEmpverifymodedropdown()).click();
		Thread.sleep(1500);
		driver.findElement(companysetup.getEmpverifymode()).click();
	}

	@Then("^I Change the device permission$")
	public void i_change_the_device_permission() throws Throwable {
		driver.findElement(companysetup.getEmpdevicepermissondropdown()).click();
		Thread.sleep(1500);
		driver.findElement(companysetup.getEmpdevicepermissiontype()).click();

	}

	@Then("^I click on save Button$")
	public void i_click_on_save_buttonn() throws Throwable {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,1000)");
		driver.findElement(companysetup.getEmpAttinfosaveButton()).click();
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath("//div[@id='j_id_f']"))));
		driver.findElement(companysetup.getEmpreloadyesbutton()).click();
	}

	@Then("^I verify the changes made$")
	public void i_verify_the_changes_made() throws Throwable {
		wait.until(ExpectedConditions.invisibilityOf(driver.findElement(By.xpath("//img[@id='j_id_b']"))));
		Assert.assertEquals(property.getProperty("EmpAttinfostatuschangemsg"),
				driver.findElement(companysetup.getStatuscontainer()).getText());

	}

	@Then("^I verify whether Assigned device Button$")
	public void i_verify_whether_assigned_device_button() throws Throwable {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,1000)");
		Assert.assertTrue(driver.findElement(companysetup.getAttAssigndeevicebutton()).isDisplayed());
	}

	@Then("^I click on Assigned device Button$")
	public void i_click_on_assigned_device_button() throws Throwable {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,1000)");
		driver.findElement(companysetup.getAttAssigndeevicebutton()).click();
	}

	@Then("^I selct the Device to be dropped off$")
	public void i_selct_the_device_to_be_dropped_off() throws Throwable {
		List<WebElement> AssDevice = driver.findElements(companysetup.getAssigndevicelist());
		for (WebElement AssnD : AssDevice) {
			JavascriptExecutor executor = (JavascriptExecutor) driver;
			executor.executeScript("arguments[0].scrollIntoView(true);", AssnD);
			String AD = AssnD.getText();
			System.out.println(AD);

			if (AD.equals("sudharshan11")) {
				Thread.sleep(1000);
				AssnD.click();
				break;
			}

		}
	}

	@Then("^I click on drop assignment device Button$")
	public void i_click_on_drop_assignment_device_button() throws Throwable {
		driver.findElement(companysetup.getDropAssigndeviceButton()).click();
		driver.findElement(companysetup.getEmpreloadyesbutton()).click();
	}

	@Then("^I verify the whether device is dropped off$")
	public void i_verify_the_whether_device_is_dropped_off() throws Throwable {
		Thread.sleep(2000);
		Assert.assertEquals(property.getProperty("EmpAssgndevicedrop"),
				driver.findElement(companysetup.getStatuscontainer()).getText());

	}

	@Then("^I click on  Employee Groups sub module$")
	public void i_click_on_employee_groups_sub_module() throws Throwable {
		driver.findElement(companysetup.getEmployeeGroupmodule()).click();
	}

	@Then("^I verify whether  Employee Groups page$")
	public void i_verify_whether_employee_groups_page() throws Throwable {
		Assert.assertEquals(property.getProperty("EmployeegroupUrl"), driver.getCurrentUrl());
	}

	@Then("^I click  on Add New Button$")
	public void i_click_on_add_new_button() throws Throwable {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,1000)");
		Thread.sleep(1500);
		driver.findElement(companysetup.getEmpGrpAddNewButton()).click();
		// driver.findElement(By.xpath("//div[@id='employeeGroupTab']")).click();
		Thread.sleep(1500);

		js.executeScript("window.scrollBy(0,-1000)");

	}

	@Then("^I verify whether Detail Info window is displayed and all fields are present$")
	public void i_verify_whether_detail_info_window_is_displayed_and_all_fields_are_present() throws Throwable {
		List<WebElement> Deviceinfo = driver.findElements(companysetup.getDeviceinfodetailsmenu());
		String print = driver.findElement(companysetup.getDeviceinfoDetailsfields()).getText();
		for (WebElement Dinfo : Deviceinfo) {
//                		JavascriptExecutor js = (JavascriptExecutor) driver;
//                		   js.executeScript("window.scrollBy(0,-1000)");
			Assert.assertTrue(Dinfo.isDisplayed());
			System.out.println(print);
		}
		List<WebElement> DeviceDet = driver.findElements(companysetup.getDeviceinfoDetailsfields());
		for (WebElement DDetails : DeviceDet) {
			Assert.assertTrue(DDetails.isDisplayed());
		}

	}

	@Then("^I Enter Group code$")
	public void i_enter_group_code() throws Throwable {
		driver.findElement(companysetup.getGroupcode()).sendKeys(property.getProperty("Groupcode"));
	}

	@Then("^I Enter Group Name and Description$")
	public void i_enter_group_name_and_description() throws Throwable {
		driver.findElement(companysetup.getGroupname()).sendKeys(property.getProperty("GroupName"));
		driver.findElement(companysetup.getGroupdescription()).sendKeys(property.getProperty("Description"));

	}

	@Then("^I Enter the Group criteria in Group definition field$")
	public void i_enter_the_group_criteria_in_group_definition_field() throws Throwable {
		driver.findElement(companysetup.getEmpGrpGroupdefinitionTextfield())
				.sendKeys(property.getProperty("GroupDefinitioncriteria"));
	}

	@Then("^I click on Deviceinfo save Button$")
	public void i_click_onn_deviceinfo_save_button() throws Throwable {
		JavascriptExecutor executor = (JavascriptExecutor) driver;
		executor.executeScript("arguments[0].scrollIntoView(true);",
				driver.findElement(companysetup.getDeviceinfosaveButton()));
		executor.executeScript("arguments[0].click();", driver.findElement(companysetup.getDeviceinfosaveButton()));
		// driver.findElement(companysetup.getDeviceinfosaveButton()).click();
		driver.findElement(companysetup.getEmpreloadyesbutton()).click();
		Thread.sleep(2000);

	}

	@Then("^I verify creationn of new group$")
	public void i_verify_creationn_of_new_group() throws Throwable {
		Thread.sleep(2000);
		Assert.assertEquals(property.getProperty("empgrpcreatedstatusmsg"),
				driver.findElement(companysetup.getStatuscontainer()).getText());
	}

	@Then("^I select required Employee group and click on Edit Button$")
	public void i_select_required_employee_group_and_click_on_edit() throws Throwable {
		List<WebElement> GrpName = driver.findElements(companysetup.getGroupnamelist());
		List<WebElement> GrpEdit = driver.findElements(companysetup.getGroupnameEditButton());

		for (int i = 0; i < GrpName.size(); i++) {
			String GName = GrpName.get(i).getText();
			// System.out.println(GName);
			if (GName.equals(property.getProperty("GroupName"))) {
				GrpEdit.get(i).click();
				break;
			}

		}
		Thread.sleep(3000);

	}

	@Then("^I Enter  New Group code$")
	public void i_enter_new_group_code() throws Throwable {
		driver.findElement(companysetup.getGroupcode()).clear();
		driver.findElement(companysetup.getGroupcode()).sendKeys(property.getProperty("EditGroupcode"));
	}

	@Then("^I Enter  New Group Name and Description$")
	public void i_enter_new_group_name_and_description() throws Throwable {
		driver.findElement(companysetup.getGroupname()).clear();
		driver.findElement(companysetup.getGroupname()).sendKeys(property.getProperty("EditGroupname"));
		Thread.sleep(2000);
	}

	@Then("^I verify Edit of Employee Group$")
	public void i_verify_edit_of_employee_group() throws Throwable {
		Assert.assertEquals(property.getProperty("EmpgroupEditstatusmessage"),
				driver.findElement(companysetup.getStatuscontainer()).getText());
	}

	@Then("^I click on Add Employee Button$")
	public void i_click_on_add_employee_button() throws Throwable {
		JavascriptExecutor executor = (JavascriptExecutor) driver;
		executor.executeScript("arguments[0].scrollIntoView(true);",
				driver.findElement(companysetup.getGroupAddEmployeeButton()));
		driver.findElement(companysetup.getGroupAddEmployeeButton()).click();

	}

	@Then("^I Enter Employee number in search field and click on search Button$")
	public void i_enter_employee_number_in_search_field_and_click_on_search_button() throws Throwable {
		wait.until(ExpectedConditions
				.visibilityOf(driver.findElement(By.xpath("//div[@id='employeeGroupTab:employeeSelection']"))));
		driver.findElement(companysetup.getAddEmployeesearchfield())
				.sendKeys(property.getProperty("AddemployeeNumber"));
		Thread.sleep(2000);
		driver.findElement(companysetup.getAddEmployeesearchfieldsearchButton()).click();
		Thread.sleep(3000);
	}

	@Then("^I select the Employee searched$")
	public void i_select_the_employee_searched() throws Throwable {
		// wait.until(ExpectedConditions.stalenessOf(driver.findElement(companysetup.getAddEmployeeEmployeeselect())));
		driver.findElement(companysetup.getAddEmployeeEmployeeselect()).click();

	}

	@Then("^I Click on Add to group Button$")
	public void i_click_on_add_to_group_button() throws Throwable {
		driver.findElement(companysetup.getAddtogroupButton()).click();
		Assert.assertTrue(driver.findElement(By.xpath("//div[@id='j_id_f']")).isDisplayed());
		driver.findElement(companysetup.getEmpreloadyesbutton()).click();
		Thread.sleep(1000);

	}

	@Then("^I verify whether the employee is added to group$")
	public void i_verify_whether_the_employee_is_added_to_group() throws Throwable {
		List<WebElement> EmpAdd = driver.findElements(companysetup.getEmpGrpEmployeeAddedlist());
		for (WebElement EmpAddelist : EmpAdd) {
			String Emplist = EmpAddelist.getText();
			if (Emplist.equals(property.getProperty("AddemployeeNumber"))) {
				System.out.println("Employee is added to group");

			}

		}
	}

	@Then("^I Select the required Employee$")
	public void i_select_the_required_employee() throws Throwable {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,1000)");
		List<WebElement> Empllist = driver.findElements(companysetup.getEmpGrpEmployeeAddedlist());
		for (int i = 0; i < Empllist.size(); i++) {
			java.lang.String Empno = Empllist.get(i).getText();
			if (Empno.equals(property.getProperty("AddemployeeNumber"))) {
				Empllist.get(i).click();
			}
		}
	}

	@Then("^I Click on Remove Employee Button$")
	public void i_click_on_remove_employee_button() throws Throwable {
		driver.findElement(companysetup.getEmpGrpEmployeeRemoveButton()).click();
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath("//div[@id='j_id_f']"))));
		driver.findElement(companysetup.getEmpreloadyesbutton()).click();
	}

	@Then("^I verify whether employee removed or not$")
	public void i_verify_whether_employee_removed_or_not() throws Throwable {
		List<WebElement> Empllist = driver.findElements(companysetup.getEmpGrpEmployeeAddedlist());
		for (int i = 0; i < Empllist.size(); i++) {
			String EmpNo = Empllist.get(i).getText();
			if (EmpNo != property.getProperty("AddemployeeNumber")) {
				// System.out.println("Employee Removed");
				assert true;

			}
		}

	}

	@Then("^I Click on Load Employee Button$")
	public void i_click_on_load_employee_button() throws Throwable {
		JavascriptExecutor executor = (JavascriptExecutor) driver;
		executor.executeScript("arguments[0].scrollIntoView(true);",
				driver.findElement(companysetup.getEmpGrpLoadEmployeeButton()));
		driver.findElement(companysetup.getEmpGrpLoadEmployeeButton()).click();
		Thread.sleep(2000);
	}

	@Then("^I verify whether Employees got loaded$")
	public void i_verify_whether_employees_got_loaded() throws Throwable {
		Assert.assertEquals(driver.findElement(companysetup.getStatuscontainer()).getText(),
				property.getProperty("LoadEmployeesuccessmsg"));

	}

	@Then("^I verify whether group details are displayed$")
	public void i_verify_whether_group_details_are_displayed() throws Throwable {
		// wait.until(ExpectedConditions.visibilityOf(driver.findElement(companysetup.getGroupcode())));

		Assert.assertEquals(property.getProperty("EditGroupcode"),
				driver.findElement(companysetup.getGroupcode()).getAttribute("value"));
		Assert.assertEquals(property.getProperty("EditGroupname"),
				driver.findElement(companysetup.getGroupname()).getAttribute("value"));
		Assert.assertEquals(property.getProperty("Description"),
				driver.findElement(companysetup.getGroupdescription()).getAttribute("value"));

	}

	@Then("^I Select required Employee group and click on Delete Button$")
	public void i_select_required_employee_group_and_click_on_delete_button() throws Throwable {
		List<WebElement> GrpName = driver.findElements(companysetup.getGroupnamelist());
		List<WebElement> GrpDelete = driver.findElements(companysetup.getEmpGrpGroupDeleteButton());

		for (int i = 0; i < GrpName.size(); i++) {
			String GName = GrpName.get(i).getText();
			// System.out.println(GName);
			if (GName.equals(property.getProperty("GroupName"))) {
				GrpDelete.get(i).click();
				driver.findElement(companysetup.getEmpreloadyesbutton()).click();
				break;
			}

		}
		Thread.sleep(3000);
	}

	@Then("^I verify whether Group is deleted successfully$")
	public void i_verify_whether_group_is_deleted_successfully() throws Throwable {
		Assert.assertEquals(property.getProperty("GroupDeleteMsg"),
				driver.findElement(companysetup.getStatuscontainer()).getText());
	}

	@Then("^I click on TimeoffTimepay submodule$")
	public void i_click_on_timeofftimepay_submodule() throws Throwable {
		driver.findElement(companysetup.getTimeoffTimepaysubmodule()).click();
	}

	@Then("^I verify whether TimeoffTimepay page is displayed$")
	public void i_verify_whether_timeofftimepay_page_is_displayed() throws Throwable {
		Assert.assertEquals(property.getProperty("TimeoffTimepaypageURL"), driver.getCurrentUrl());
	}

	@Then("^I select the Default group$")
	public void i_select_the_default_group() throws Throwable {
		List<WebElement> ToTplist = driver.findElements(companysetup.getToTpDefaultgroup());
		// List<WebElement> linkButton =
		// driver.findElements(By.xpath("//a[@class='ui-commandlink ui-widget']"));

		for (int i = 0; i < ToTplist.size(); i++) {
			java.lang.String Codelist = ToTplist.get(i).getText();
			if (Codelist.equals("ALL")) {

				ToTplist.get(i).click();
			}
		}
	}

	@Then("^I click on Add Code Button$")
	public void i_click_on_add_code_button() throws Throwable {
		driver.findElement(companysetup.getToTpAddcodeButton()).click();

	}

	@Then("^I Enter Details in the text field$")
	public void i_enter_details_in_the_text_field() throws Throwable {
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath("//div[@id='payCodeDialog']"))));
		driver.findElement(companysetup.getAddcodecodeTF()).sendKeys(property.getProperty("Addcode"));
		driver.findElement(companysetup.getAddcodeDescriptionTF()).sendKeys(property.getProperty("Description"));
		driver.findElement(companysetup.getAddcodeuntidrop()).click();
		wait.until(ExpectedConditions
				.visibilityOf(driver.findElement(By.xpath("//ul[@id=\"payCodeDialogForm:unit_items\"]"))));
		driver.findElement(companysetup.getAddcodeunitdropday()).click();
		driver.findElement(companysetup.getAddcodeTimeoffTypedrop()).click();
		wait.until(ExpectedConditions
				.visibilityOf(driver.findElement(By.xpath("//ul[@id=\"payCodeDialogForm:timeOffType_items\"]"))));
		driver.findElement(companysetup.getAddcodetimeoffPartialDay()).click();

	}

	@Then("^I Click on Add code Save Button$")
	public void i_click_on_add_code_save_button() throws Throwable {
		driver.findElement(companysetup.getAddcodeSaveButton()).click();
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath("//div[@id='j_id_f']"))));
		driver.findElement(companysetup.getEmpreloadyesbutton()).click();
	}

	@Then("^I verify whethercode is added$")
	public void i_verify_whethercode_is_added() throws Throwable {
		List<WebElement> Paycode = driver.findElements(companysetup.getToTppaycodelist());
		for (int i = 0; i < Paycode.size(); i++) {
			java.lang.String PClist = Paycode.get(i).getText();
			if (PClist.equals(property.getProperty("Addcode"))) {
				assert true;
			}
		}
	}

	@Then("^I select the Group$")
	public void i_select_the_group() throws Throwable {

		List<WebElement> ToTplist = driver.findElements(companysetup.getToTpDefaultgroup());

		for (int i = 0; i < ToTplist.size(); i++) {
			java.lang.String Codelist = ToTplist.get(i).getText();
			if (Codelist.equals(property.getProperty("Group"))) {

				ToTplist.get(i).click();
			}
		}
	}

	@Then("^I Click on assignpaycode Button$")
	public void i_click_on_assignpaycode_button() throws Throwable {
		driver.findElement(companysetup.getToTpAssignpaycodeButton()).click();
	}

	@Then("^I select the paycodes$")
	public void i_select_the_paycodes() throws Throwable {
		List<WebElement> paycodelist = driver.findElements(companysetup.getToTpcodes());
		for (int i = 0; i < paycodelist.size(); i++) {
			java.lang.String paycodes = paycodelist.get(i).getText();
			if (paycodes.equals(property.getProperty("Addcode"))) {
				paycodelist.get(i).click();
			}
		}
	}

	@Then("^I click on assign pay codes to group$")
	public void i_click_on_assign_pay_codes_to_group() throws Throwable {
		driver.findElement(companysetup.getToTpAssignpaycodestoGrpButton()).click();
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath("//div[@id='j_id_f']"))));
		driver.findElement(companysetup.getEmpreloadyesbutton()).click();

	}

	@Then("^I verify whether pay codes are added to group$")
	public void i_verify_whether_pay_codes_are_added_to_group() throws Throwable {
		List<WebElement> paycode = driver.findElements(companysetup.getPaycodelist());
		for (int i = 0; i < paycode.size(); i++) {
			java.lang.String paycodes = paycode.get(i).getText();
			if (paycodes.equals(property.getProperty("Addcode"))) {
				assert true;
			}
		}
	}

	@Then("^I enter neccessary details and unit as Day$")
	public void i_enter_neccessary_details_and_unit_as_day() throws Throwable {
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath("//div[@id='payCodeDialog']"))));
		driver.findElement(companysetup.getAddcodecodeTF()).sendKeys(property.getProperty("Addcode"));
		driver.findElement(companysetup.getAddcodeDescriptionTF()).sendKeys(property.getProperty("Description"));
		driver.findElement(companysetup.getAddcodeuntidrop()).click();
		wait.until(ExpectedConditions
				.visibilityOf(driver.findElement(By.xpath("//ul[@id=\"payCodeDialogForm:unit_items\"]"))));
		driver.findElement(companysetup.getAddcodeunitdropday()).click();
		driver.findElement(companysetup.getAddcodeTimeoffTypedrop()).click();
		wait.until(ExpectedConditions
				.visibilityOf(driver.findElement(By.xpath("//ul[@id=\"payCodeDialogForm:timeOffType_items\"]"))));
		driver.findElement(companysetup.getAddcodetimeoffPartialDay()).click();
	}

	@Then("^I enter neccessary details and unit as Hour$")
	public void i_enter_neccessary_details_and_unit_as_hour() throws Throwable {
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath("//div[@id='payCodeDialog']"))));
		driver.findElement(companysetup.getAddcodecodeTF()).sendKeys(property.getProperty("Addcode"));
		driver.findElement(companysetup.getAddcodeDescriptionTF()).sendKeys(property.getProperty("Description"));
		driver.findElement(companysetup.getAddcodeuntidrop()).click();
		wait.until(ExpectedConditions
				.visibilityOf(driver.findElement(By.xpath("//ul[@id=\"payCodeDialogForm:unit_items\"]"))));
		driver.findElement(companysetup.getAddcodeunitdropHour()).click();
		driver.findElement(companysetup.getAddcodeTimeoffTypedrop()).click();
		wait.until(ExpectedConditions
				.visibilityOf(driver.findElement(By.xpath("//ul[@id=\"payCodeDialogForm:timeOffType_items\"]"))));
		driver.findElement(companysetup.getAddcodetimeoffPartialDay()).click();
	}

	@Then("^I Enter Details in the text field and Timeofftype as Both$")
	public void i_enter_details_in_the_text_field_and_timeofftype_as_both() throws Throwable {
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath("//div[@id='payCodeDialog']"))));
		driver.findElement(companysetup.getAddcodecodeTF()).sendKeys(property.getProperty("Addcode"));
		driver.findElement(companysetup.getAddcodeDescriptionTF()).sendKeys(property.getProperty("Description"));
		driver.findElement(companysetup.getAddcodeuntidrop()).click();
		wait.until(ExpectedConditions
				.visibilityOf(driver.findElement(By.xpath("//ul[@id=\"payCodeDialogForm:unit_items\"]"))));
		driver.findElement(companysetup.getAddcodeunitdropHour()).click();
		driver.findElement(companysetup.getAddcodeTimeoffTypedrop()).click();
		wait.until(ExpectedConditions
				.visibilityOf(driver.findElement(By.xpath("//ul[@id=\"payCodeDialogForm:timeOffType_items\"]"))));
		driver.findElement(companysetup.getAddcodeTimeoffTypeBoth()).click();
	}

	@Then("^I Enter Details in the text field and Timeofftype as Full$")
	public void i_enter_details_in_the_text_field_and_timeofftype_as_Full() throws Throwable {
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath("//div[@id='payCodeDialog']"))));
		driver.findElement(companysetup.getAddcodecodeTF()).sendKeys(property.getProperty("Addcode"));
		driver.findElement(companysetup.getAddcodeDescriptionTF()).sendKeys(property.getProperty("Description"));
		driver.findElement(companysetup.getAddcodeuntidrop()).click();
		wait.until(ExpectedConditions
				.visibilityOf(driver.findElement(By.xpath("//ul[@id=\"payCodeDialogForm:unit_items\"]"))));
		driver.findElement(companysetup.getAddcodeunitdropHour()).click();
		driver.findElement(companysetup.getAddcodeTimeoffTypedrop()).click();
		wait.until(ExpectedConditions
				.visibilityOf(driver.findElement(By.xpath("//ul[@id=\"payCodeDialogForm:timeOffType_items\"]"))));
		driver.findElement(companysetup.getAddcoeTimeofftypeFullday()).click();
	}

	@Then("^I Enter Details in the text field and Timeofftype as partial$")
	public void i_enter_details_in_the_text_field_and_timeofftype_as_partial() throws Throwable {
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath("//div[@id='payCodeDialog']"))));
		driver.findElement(companysetup.getAddcodecodeTF()).sendKeys(property.getProperty("Addcode"));
		driver.findElement(companysetup.getAddcodeDescriptionTF()).sendKeys(property.getProperty("Description"));
		driver.findElement(companysetup.getAddcodeuntidrop()).click();
		wait.until(ExpectedConditions
				.visibilityOf(driver.findElement(By.xpath("//ul[@id=\"payCodeDialogForm:unit_items\"]"))));
		driver.findElement(companysetup.getAddcodeunitdropHour()).click();
		driver.findElement(companysetup.getAddcodeTimeoffTypedrop()).click();
		wait.until(ExpectedConditions
				.visibilityOf(driver.findElement(By.xpath("//ul[@id=\"payCodeDialogForm:timeOffType_items\"]"))));
		driver.findElement(companysetup.getAddcodetimeoffPartialDay()).click();
	}

	@Then("^I Enter Details in the text field and include Weekend$")
	public void i_enter_details_in_the_text_field_and_include_weekend() throws Throwable {
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath("//div[@id='payCodeDialog']"))));
		driver.findElement(companysetup.getAddcodecodeTF()).sendKeys(property.getProperty("Addcode"));
		driver.findElement(companysetup.getAddcodeDescriptionTF()).sendKeys(property.getProperty("Description"));
		driver.findElement(companysetup.getAddcodeuntidrop()).click();
		wait.until(ExpectedConditions
				.visibilityOf(driver.findElement(By.xpath("//ul[@id=\"payCodeDialogForm:unit_items\"]"))));
		driver.findElement(companysetup.getAddcodeunitdropHour()).click();
		driver.findElement(companysetup.getAddcodeTimeoffTypedrop()).click();
		wait.until(ExpectedConditions
				.visibilityOf(driver.findElement(By.xpath("//ul[@id=\"payCodeDialogForm:timeOffType_items\"]"))));
		driver.findElement(companysetup.getAddcodetimeoffPartialDay()).click();
		driver.findElement(companysetup.getAddcodeIncludeweekendButton()).click();
	}

	@Then("^I click on attestation module$")
	public void i_click_on_bioattestation_module() throws Throwable {
		WebElement ele = driver.findElement(companysetup.getAttestationsubmodule());
		Actions action = new Actions(driver);
		action.moveToElement(ele).perform();
	}

	@Then("^I click on Bioattesation$")
	public void i_click_on_bioattesation() throws Throwable {
		wait.until(ExpectedConditions.visibilityOf(
				driver.findElement(By.xpath("//ul[@class='dropdown-menu submenu dropdown-menu-right']"))));
		driver.findElement(companysetup.getBioattestation()).click();

	}

	@Then("^I verify whether Bioattestation page is displayed$")
	public void i_verify_whether_bioattestation_page_is_displayed() throws Throwable {
		Assert.assertEquals(property.getProperty("BioattestationURl"), driver.getCurrentUrl());
	}

	@Then("^I click on New Button$")
	public void i_click_on_new_button() throws Throwable {
		JavascriptExecutor executor = (JavascriptExecutor) driver;
		executor.executeScript("arguments[0].scrollIntoView(true);",
				driver.findElement(companysetup.getBioAttNewButton()));
		driver.findElement(companysetup.getBioAttNewButton()).click();
		Thread.sleep(2000);
		executor.executeScript("window.scrollBy(0,-1000)");
	}

	@Then("^I Enter Bioattestation name$")
	public void i_enter_bioattestation_name() throws Throwable {
		driver.findElement(companysetup.getBioAttBioNameTF()).sendKeys(property.getProperty("BioattsName"));
	}

	@Then("^I select Bioattestation Type$")
	public void i_select_bioattestation_type() throws Throwable {
		driver.findElement(companysetup.getBioAttsAttstype()).click();
		wait.until(ExpectedConditions
				.visibilityOf(driver.findElement(By.xpath("//ul[@id='bioAttestationDetails:attestationType_items']"))));
		driver.findElement(companysetup.getBioAttsTypeFace()).click();

	}

	@Then("^I click on Add language Button$")
	public void i_click_on_add_language_button() throws Throwable {
		driver.findElement(companysetup.getBioAttsAddlangButton()).click();
		driver.findElement(companysetup.getBioAttsAddlangType()).click();

	}

	@Then("^I select the Language$")
	public void i_select_the_language() throws Throwable {
		driver.findElement(companysetup.getBioAttsAddlangTypeEnglish()).click();
		Thread.sleep(2000);
	}

	@Then("^I Enter attestation policy$")
	public void i_enter_attestation_policy() throws Throwable {
		driver.findElement(companysetup.getBioAttsAttpolicyTF()).sendKeys(property.getProperty("BioAttsPolicy"));
		// List<WebElement> Attpolicy =
		// driver.findElements(companysetup.getBioAttsAttpolicyTF());
		// Attpolicy.get(0).sendKeys(property.getProperty("BioAttsPolicy"));
		// Attpolicy.get(1).sendKeys(property.getProperty("BioAttsPolicy"));
	}

	@Then("^I click on AttSave Button$")
	public void i_click_on_attsave_button() throws Throwable {
		JavascriptExecutor executor = (JavascriptExecutor) driver;
		executor.executeScript("arguments[0].scrollIntoView(true);",
				driver.findElement(companysetup.getBioAttsSaveButton()));
		driver.findElement(companysetup.getBioAttsSaveButton()).click();
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath("//div[@id='j_id_f']"))));
		driver.findElement(companysetup.getEmpreloadyesbutton()).click();
		Thread.sleep(2000);

	}

	@Then("^I verify wherther created Bioattstation is saved or not$")
	public void i_verify_wherther_created_bioattstation_is_saved_or_not() throws Throwable {
		List<WebElement> Bname = driver.findElements(companysetup.getBioAttsNamelist());
		List<WebElement> Blist = driver.findElements(companysetup.getBioAttBioTypelist());

		for (int i = 0; i < Bname.size(); i++) {
			java.lang.String BN = Bname.get(i).getText();
			System.out.println(BN);
			if (BN.contains("Automation Testing")) {
				// System.out.println("coming in result");
				java.lang.String BL = Blist.get(i).getText();
				if (BL.contains("Face")) {
					// System.out.println("2nd result came");
					assert true;
				}
			}
		}
	}

	@Then("^I Enter Bioattestation name finger$")
	public void i_enter_bioattestation_name_finger() throws Throwable {
		driver.findElement(companysetup.getBioAttBioNameTF()).sendKeys("Auto Finger");
	}

	@Then("^I select Bioattestation Type Finger$")
	public void i_select_bioattestation_type_finger() throws Throwable {
		driver.findElement(companysetup.getBioAttsAttstype()).click();
		wait.until(ExpectedConditions
				.visibilityOf(driver.findElement(By.xpath("//ul[@id='bioAttestationDetails:attestationType_items']"))));
		driver.findElement(companysetup.getBioAttsTypeFinger()).click();
	}

	@Then("^I verify wherther created Bioattstation finger is saved or not$")
	public void i_verify_wherther_created_bioattstation_finger_is_saved_or_not() throws Throwable {
		List<WebElement> Bname = driver.findElements(companysetup.getBioAttsNamelist());
		List<WebElement> Blist = driver.findElements(companysetup.getBioAttBioTypelist());

		for (int i = 0; i < Bname.size(); i++) {
			java.lang.String BN = Bname.get(i).getText();
			System.out.println(BN);
			if (BN.contains("Auto Finger")) {
				// System.out.println("coming in result");
				java.lang.String BL = Blist.get(i).getText();
				if (BL.contains("Fingerprint")) {
					System.out.println("fingerprint came");
					assert true;
					break;
				}
			}
		}
	}

	@Then("^I Enter Bioattestation name multiple lang$")
	public void i_enter_bioattestation_name_multiple_lang() throws Throwable {
		driver.findElement(companysetup.getBioAttBioNameTF()).sendKeys("Auto multiple lang");
	}

	@Then("^I select the  New Language$")
	public void i_select_the_new_language() throws Throwable {
		// driver.findElement(companysetup.getBioAttsAddlangButton()).click();
		Thread.sleep(2000);
		// driver.findElement(companysetup.getBioAttsAddlangType()).click();
		wait.until(ExpectedConditions.visibilityOf(driver
				.findElement(By.xpath("//ul[contains(@id,'bioAttestationDetails:languageList:1:j_id_2e_items')]"))));
		driver.findElement(companysetup.getBioAttAddlangTypePortugese()).click();
		Thread.sleep(2000);
		// driver.findElement(companysetup.getBioAttsAttpolicyTF()).sendKeys(property.getProperty("BioAttsPolicy"));
	}

	@Then("^I Enter attestation policy 2$")
	public void i_enter_attestation_policy_2() throws Throwable {

		driver.findElement(companysetup.getBioAttsAttpolicyTF()).click();
		driver.findElement(companysetup.getBioAttAttpolicy2nd()).sendKeys(property.getProperty("BioAttsPolicy"));
	}

	@Then("^I verify wherther created Bioattstation with multiple lang is saved or not$")
	public void i_verify_wherther_created_bioattstation_with_multiple_lang_is_saved_or_not() throws Throwable {
		List<WebElement> Bname = driver.findElements(companysetup.getBioAttsNamelist());
		List<WebElement> Blist = driver.findElements(companysetup.getBioAttBioTypelist());

		for (int i = 0; i < Bname.size(); i++) {
			java.lang.String BN = Bname.get(i).getText();
			// System.out.println(BN);
			if (BN.contains("Auto multiple lang")) {
				// System.out.println("coming in result");
				java.lang.String BL = Blist.get(i).getText();
				if (BL.contains("Face")) {
					System.out.println("Auto multi lang found");
					assert true;
					break;
				}
			}
		}
	}

	@Then("^I select the required BioAttestaion profile and click on Edit Button$")
	public void i_select_the_required_bioattestaion_profile() throws Throwable {
		List<WebElement> Bname = driver.findElements(companysetup.getBioAttsNamelist());
		List<WebElement> BEdit = driver.findElements(companysetup.getBioAttprofilelistEditButton());
		for (int i = 0; i < Bname.size(); i++) {
			java.lang.String BP = Bname.get(i).getText();
			if (BP.equals("Auto multiple lang")) {
				BEdit.get(i).click();
			}
		}
		Thread.sleep(2000);
	}

	@Then("^I make the changes in the profile$")
	public void i_make_the_changes_in_the_profile() throws Throwable {
		driver.findElement(companysetup.getBioAttsAttstype()).click();
		wait.until(ExpectedConditions
				.visibilityOf(driver.findElement(By.xpath("//ul[@id='bioAttestationDetails:attestationType_items']"))));
		driver.findElement(companysetup.getBioAttsTypeFinger()).click();

	}

	@Then("^I verify wherther created Bioattstation with changes is saved or not$")
	public void i_verify_wherther_created_bioattstation_with_changes_is_saved_or_not() throws Throwable {
		List<WebElement> Bname = driver.findElements(companysetup.getBioAttsNamelist());
		List<WebElement> Blist = driver.findElements(companysetup.getBioAttBioTypelist());

		for (int i = 0; i < Bname.size(); i++) {
			java.lang.String BN = Bname.get(i).getText();
			if (BN.contains("Auto multiple lang")) {
				java.lang.String BL = Blist.get(i).getText();
				if (BL.contains("Finger")) {
					System.out.println("Changes are saved successfully");
					assert true;
					break;
				}
			}
		}

	}

	@Then("^I select the required BioAttestaion profile and click on Delete  Button$")
	public void i_select_the_required_bioattestaion_profile_and_click_on_delete_button() throws Throwable {
		List<WebElement> Bname = driver.findElements(companysetup.getBioAttsNamelist());
		List<WebElement> BDelete = driver.findElements(companysetup.getBioAttprofileDeleteButton());
		for (int i = 0; i < Bname.size(); i++) {
			java.lang.String BP = Bname.get(i).getText();
			if (BP.equals("Auto multiple lang")) {
				BDelete.get(i).click();
				wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath("//div[@id='j_id_f']"))));
				driver.findElement(companysetup.getEmpreloadyesbutton()).click();

			}
		}
	}

	@Then("^I verify whether Deleted BioAttsprofille is deleted from the list$")
	public void i_verify_whether_deleted_bioattsprofille_is_deleted_from_the_list() throws Throwable {
		List<WebElement> Bname = driver.findElements(companysetup.getBioAttsNamelist());
		for (int i = 0; i < Bname.size(); i++) {
			java.lang.String BN = Bname.get(i).getText();
			if (BN != "Auto multiple lang") {
				System.out.println("successfully  Deleted");
				break;
			}
		}
	}

	@Then("^I Enter BioAttestation Name in the Search field$")
	public void i_enter_bioattestation_name_in_the_search_field() throws Throwable {
		driver.findElement(companysetup.getBioAttsSearchTF()).sendKeys(property.getProperty("BioAttSearchName"));
	}

	@Then("^I click on BioAtts search Button$")
	public void i_click_on_bioatts_search_button() throws Throwable {
		driver.findElement(companysetup.getBioAttSeachButton()).click();

	}

	@Then("^I verify whether search is successfull or not$")
	public void i_verify_whether_search_is_successfull_or_not() throws Throwable {
		List<WebElement> Bname = driver.findElements(companysetup.getBioAttsNamelist());
		for (int i = 0; i < Bname.size(); i++) {
			java.lang.String AttName = Bname.get(i).getText();
			if (AttName.equals(property.getProperty("BioAttSearchName"))) {
				System.out.println("Search is successfull");
				break;
			}
		}

	}

	@Then("^I move cursor on General Attestation$")
	public void i_move_cursor_on_general_attestation() throws Throwable {
		WebElement ele = driver.findElement(companysetup.getGenAtt());
		Actions action = new Actions(driver);
		action.moveToElement(ele).perform();

	}

	@Then("^I click on Question submodule$")
	public void i_click_on_question_submodule() throws Throwable {
		driver.findElement(companysetup.getGenAttQns()).click();
	}

	@Then("^I verify whether Questions page is displayed or not$")
	public void i_verify_whether_questions_page_is_displayed_or_not() throws Throwable {
		Assert.assertEquals(property.getProperty("GenAttQnspageURl"), driver.getCurrentUrl());
	}

	@Then("^I click on Qns page New button$")
	public void i_click_on_Qns_page_new_button() throws Throwable {
		JavascriptExecutor executor = (JavascriptExecutor) driver;
		executor.executeScript("arguments[0].scrollIntoView(true);",
				driver.findElement(companysetup.getGenAttNewButton()));

		driver.findElement(companysetup.getGenAttNewButton()).click();
		Thread.sleep(1500);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,-1000)");
	}

	@Then("^I Enter Question Name$")
	public void i_enter_question_name() throws Throwable {
		driver.findElement(companysetup.getGenAttQnsnameTF()).click();
		Thread.sleep(1000);
		driver.findElement(companysetup.getGenAttQnsnameTF()).sendKeys(property.getProperty("QuestionName"));
		Thread.sleep(2000);
	}

	@Then("^I Enter Question$")
	public void i_enter_question() throws Throwable {
		// driver.findElement(companysetup.getGenAttQuestionTF()).click();
		driver.findElement(companysetup.getGenAttQuestionTF()).sendKeys(property.getProperty("QnsPageQuestion"));
	}

	@Then("^I click on Response Button Dropdown$")
	public void i_click_on_response_button_dropdown() throws Throwable {
		driver.findElement(companysetup.getGenAttQnsResponseBtn()).click();

	}

	@Then("^I select Response1$")
	public void i_select_response1() throws Throwable {
		List<WebElement> Btnlist = driver.findElements(companysetup.getGenAttQnsReponsebtnList());
		for (int i = 0; i < Btnlist.size(); i++) {
			java.lang.String Bl = Btnlist.get(i).getText();
			// System.out.println(Bl);
			if (Bl.equals(property.getProperty("GenAttsQnsButton1"))) {
				Btnlist.get(i).click();
				break;
			}
		}
		Thread.sleep(2000);
	}

	@Then("^I click on Add Button$")
	public void i_click_on_add_button() throws Throwable {
		driver.findElement(companysetup.getGenAttQnsResponseBtnAddButton()).click();

	}

	@Then("^I select Response2$")
	public void i_select_response2() throws Throwable {
		List<WebElement> Btlist = driver.findElements(companysetup.getGenAttQnsReponsebtnList());

		// wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath("//ul[@id='buttonDetails:buttonList:1:j_id_2e_items']"))));
		for (int i = 0; i < Btlist.size(); i++) {
			java.lang.String Btl = Btlist.get(i).getText();
			if (Btl.equals(property.getProperty("GenAttsQnsButton2"))) {
				Btlist.get(i).click();
				break;
			}
		}

	}

	@Then("^I click on Qnspage Save Button$")
	public void i_click_on_qnspage_save_button() throws Throwable {
//                	JavascriptExecutor executor = (JavascriptExecutor) driver;
//                    executor.executeScript("arguments[0].scrollIntoView(true);", driver.findElement(companysetup.getGenAttQnsSaveButton()));
		driver.findElement(companysetup.getGenAttQnsSaveButton()).click();
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath("//div[@id='j_id_f']"))));
		driver.findElement(companysetup.getEmpreloadyesbutton()).click();
	}

	@Then("^I verify whether Qns got created or not$")
	public void i_verify_whether_qns_got_created_or_not() throws Throwable {
		List<WebElement> Qlist = driver.findElements(companysetup.getGenAttQnsNamelist());
		for (int i = 0; i < Qlist.size(); i++) {
			java.lang.String Qns = Qlist.get(i).getText();
			if (Qns.equals("Automation")) {
				System.out.println("Qns name found");
				break;
			} else {
				JavascriptExecutor executor = (JavascriptExecutor) driver;
				executor.executeScript("window.scrollBy(0,1000)");
				Thread.sleep(2000);

				executor.executeScript("arguments[0].scrollIntoView(true);",
						driver.findElement(companysetup.getPageForwardButton()));
				wait.until(ExpectedConditions.visibilityOf(driver.findElement(companysetup.getPageForwardButton())));
				driver.findElement(companysetup.getPageForwardButton()).click();
				executor.executeScript("window.scrollBy(0,-1000)");
				System.out.println("not found");
				Thread.sleep(2000);
			}
		}
	}

	@Then("^I Edit the Question$")
	public void i_edit_the_question() throws Throwable {
		driver.findElement(companysetup.getGenAttQuestionTF()).sendKeys(property.getProperty("GenattEditedQns"));
	}

	@Then("^I click on Profile Sub module$")
	public void i_click_on_profile_sub_module() throws Throwable {
		driver.findElement(companysetup.getGenAttProfilemodule()).click();
		Assert.assertEquals(property.getProperty("profilepageURL"), driver.getCurrentUrl());

	}

	@Then("^I click on profile New Button$")
	public void i_click_on_profile_new_button() throws Throwable {
		JavascriptExecutor executor = (JavascriptExecutor) driver;
		executor.executeScript("arguments[0].click();", driver.findElement(companysetup.getGenAttsprofileNewButton()));
		;
		Thread.sleep(1000);
	}

	@Then("^I click on Question1 dropdown$")
	public void i_click_on_question1_dropdown() throws Throwable {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		WebElement arrow = driver.findElement(
				By.xpath("(//div[@class='ui-selectonemenu-trigger ui-state-default ui-corner-right'][1]/span[1])[2]"));
		js.executeScript("arguments[0].click();", arrow);
		;
		// driver.findElement(companysetup.getGenAttsQns1Dropdown()).click();
	}

	@Then("^I verify whether required question is reflected in dropdown list$")
	public void i_verify_whether_required_question_is_reflected_in_dropdown_list() throws Throwable {
		List<WebElement> ProfileQns = driver.findElements(companysetup.getGenAttsQns1list());
		for (int i = 0; i < ProfileQns.size(); i++) {
			java.lang.String PQ = ProfileQns.get(i).getText();
			// System.out.println(PQ);
			if (PQ.equals(property.getProperty("QuestionName"))) {
				assert true;
				// System.out.println("found qns created");
				break;

			}
		}
	}

	@Then("^I Enter Question in search field$")
	public void i_enter_question_in_search_field() throws Throwable {
		driver.findElement(companysetup.getGenAttQnssearchfield()).sendKeys(property.getProperty("QuestionName"));

	}

	@Then("^I click on Search Button of Seach TF$")
	public void i_click_on_search_button_of_seach_tf() throws Throwable {
		driver.findElement(companysetup.getGenAttQnssearchButton()).click();
		Thread.sleep(1500);
	}

	@Then("^I verify qns ans click on Delete Button$")
	public void i_verify_qns_ans_click_on_deleter_button() throws Throwable {
		List<WebElement> Qns = driver.findElements(companysetup.getGenAttsQnscreatedList());
		List<WebElement> Delete = driver.findElements(companysetup.getGenAttQnsDeleteButton());
		for (int i = 0; i < Qns.size(); i++) {
			java.lang.String QL = Qns.get(i).getText();
			if (QL.equals(property.getProperty("QuestionName"))) {
				Delete.get(i).click();
				wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath("//div[@id='j_id_f']"))));
				driver.findElement(companysetup.getEmpreloadyesbutton()).click();
				System.out.println("Qns Deleted");
				break;
			}
		}

	}

	@Then("^I verify whether Qns is deleted or not$")
	public void i_verify_whether_qns_is_deleted_or_not() throws Throwable {
		List<WebElement> Qns = driver.findElements(companysetup.getGenAttsQnscreatedList());
		for (int i = 0; i < Qns.size(); i++) {
			driver.findElement(companysetup.getGenAttQnssearchButton()).click();
			java.lang.String QL = Qns.get(i).getText();
			if (QL.equals(property.getProperty("QuestionName"))) {
				assert true;
				System.out.println("Qn not Deleted");
				break;
			} else {
				System.out.println("Qn deleted");
				break;
			}
		}
	}

	@Then("^I Enter profile Name$")
	public void i_enter_profile_name() throws Throwable {
		driver.findElement(companysetup.getGenAttproProfilenameTF()).sendKeys(property.getProperty("profileName"));
	}

	@Then("^I Enter profile Description$")
	public void i_enter_profile_description() throws Throwable {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		driver.findElement(companysetup.getGenAttprofileDescriptionTF()).click();
		Thread.sleep(1000);
		driver.findElement(companysetup.getGenAttprofileDescriptionTF())
				.sendKeys(property.getProperty("ProfileDescription"));
		Thread.sleep(1000);
//                     WebElement arrow = driver.findElement(By.xpath("(//div[@class='ui-selectonemenu-trigger ui-state-default ui-corner-right'][1]/span[1])[2]"));
//                	 js.executeScript("arguments[0].click();",arrow );;
	}

	@Then("^I select the required question$")
	public void i_select_the_required_question() throws Throwable {
		List<WebElement> ProfileQns = driver.findElements(companysetup.getGenAttsQns1list());
		for (int i = 0; i < ProfileQns.size(); i++) {
			java.lang.String PQ = ProfileQns.get(i).getText();
			// System.out.println(PQ);
			if (PQ.equals(property.getProperty("QuestionName"))) {
				assert true;
				// System.out.println("found qns created");
				break;

			}
		}
	}

	@Then("^I click on Map_Clock Data Field dropdown$")
	public void i_click_on_mapclock_data_field_dropdown() throws Throwable {
		// driver.findElement(companysetup.getGenAttprofileMapclockDropDown()).click();
		JavascriptExecutor js = (JavascriptExecutor) driver;
		WebElement arrow = driver.findElement(companysetup.getGenAttprofileMapclockDropDown());
		js.executeScript("arguments[0].click();", arrow);
		;
	}

	@Then("^I select the MaMap_Clock Data$")
	public void i_select_the_mamapclock_data() throws Throwable {
		wait.until(ExpectedConditions.visibilityOf(
				driver.findElement(By.xpath("//ul[contains(@id,'j_id_25:0:profileQuestion:mapClockData_items')]"))));
		List<WebElement> MappingData = driver.findElements(companysetup.getGenAttprofileMapclocklist());
		for (int i = 0; i < MappingData.size(); i++) {
			java.lang.String MapData = MappingData.get(i).getText();
			// System.out.println(MapData);
			if (MapData.contains(property.getProperty("Map_ClockData"))) {
				MappingData.get(i).click();
				System.out.println("MappingDataselected");
				break;
			} else {
				System.out.println("Mapdatanotselected");

			}
		}

	}

	@Then("^I click on profile save Button$")
	public void i_click_on_profile_save_button() throws Throwable {
		JavascriptExecutor executor = (JavascriptExecutor) driver;
		executor.executeScript("arguments[0].scrollIntoView(true);",
				driver.findElement(companysetup.getGenAttprofilesaveButton()));
		driver.findElement(companysetup.getGenAttprofilesaveButton()).click();
		wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath("//div[@id='j_id_f']"))));
		driver.findElement(companysetup.getEmpreloadyesbutton()).click();
		Thread.sleep(2000);

	}

	@Then("^I verify whether Created new profile is listed in Profile list$")
	public void i_verify_whether_created_new_profile_is_listed_in_profile_list() throws Throwable {
		driver.findElement(companysetup.getGenAttprofileSearchfield()).sendKeys(property.getProperty("profilename2"));
		driver.findElement(companysetup.getGEnAttprofileSearchButton()).click();
		Thread.sleep(2000);
		List<WebElement> ProfileList = driver.findElements(companysetup.getGenAttprofileNamelistTable());
		for (int i = 0; i < ProfileList.size(); i++) {
			java.lang.String PL = ProfileList.get(i).getText();
			if (PL.equals(property.getProperty("profilename2"))) {
				System.out.println("New profile is created");
				break;
			} else {
				System.out.println("New profile is not created");
				break;
			}
		}
	}

	@Then("^I select the required question from dropdown$")
	public void i_select_the_required_question_from_dropdown() throws Throwable {
		List<WebElement> ProfileQns = driver.findElements(companysetup.getGenAttsQns1list());
		for (int i = 0; i < ProfileQns.size(); i++) {
			java.lang.String PQ = ProfileQns.get(i).getText();
			// System.out.println(PQ);
			if (PQ.equals(property.getProperty("QuestionName"))) {
				ProfileQns.get(i).click();
				// System.out.println("found qns created");
				break;

			}
		}
		Thread.sleep(2000);
	}

	@Then("^I Enter profile Name with 2 Qns$")
	public void i_enter_profile_name_with_2_qns() throws Throwable {
		driver.findElement(companysetup.getGenAttproProfilenameTF()).sendKeys(property.getProperty("profilename2"));

	}

	@Then("^I click on Question2 dropdown$")
	public void i_click_on_question2_dropdown() throws Throwable {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		WebElement arrow = driver.findElement(companysetup.getGenAttsQns2Dropdown());
		js.executeScript("arguments[0].click();", arrow);
		;
	}

	@Then("^I select the required 2nd question from dropdown$")
	public void i_select_the_required_2nd_question_from_dropdown() throws Throwable {
		List<WebElement> ProfileQns = driver.findElements(companysetup.getGenAttsQns2list());
		for (int i = 0; i < ProfileQns.size(); i++) {
			java.lang.String PQ = ProfileQns.get(i).getText();
			// System.out.println(PQ);
			if (PQ.equals(property.getProperty("QuestionName2"))) {
				ProfileQns.get(i).click();
				// System.out.println("found qns created");
				break;

			}
		}
		Thread.sleep(2000);
	}

	@Then("^I click on Map_Clock Data2 Field dropdown$")
	public void i_click_on_mapclock_data2_field_dropdown() throws Throwable {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		WebElement arrow = driver.findElement(companysetup.getGenAttprofileMapclockDropDown2());
		js.executeScript("arguments[0].click();", arrow);
		;
		Thread.sleep(1000);
	}

	@Then("^I select the MaMap_Clock2 Data$")
	public void i_select_the_mamapclock2_data() throws Throwable {
		// wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath("//ul[contains(@id,'j_id_25:0:profileQuestion:mapClockData_items')]"))));
		List<WebElement> MappingData2 = driver.findElements(companysetup.getGenAttprofileMapclocklist2());
		for (int i = 0; i < MappingData2.size(); i++) {
			java.lang.String MapData = MappingData2.get(i).getText();
			// System.out.println(MapData);
			if (MapData.equals("customV7")) {
				MappingData2.get(i).click();
				System.out.println("MappingDataselected2");
				break;
			} else {
				System.out.println("Mapdatanotselected2");

			}
		}
	}

	@Then("^I click on Qns Add Button$")
	public void i_click_on_qns_add_button() throws Throwable {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		WebElement arrow = driver.findElement(companysetup.getGenAttprofileAddqnsButton());
		js.executeScript("arguments[0].click();", arrow);
		;
	}

	@Then("^I click on Link to Question Dropdown$")
	public void i_click_on_link_to_question_dropdown() throws Throwable {
		driver.findElement(companysetup.getGenAttprofileLinkQnsDropdown()).click();
		wait.until(ExpectedConditions.visibilityOf(
				driver.findElement(By.xpath("//ul[@id='j_id_25:1:profileQuestion:linkQuestion_items']"))));
	}

	@Then("^I select the Qns to be linked$")
	public void i_select_the_qns_to_be_linked() throws Throwable {
		List<WebElement> Qnslist = driver.findElements(companysetup.getGenAttprofileLinkQnsdropdownlist());
		for (int i = 0; i < Qnslist.size(); i++) {
			java.lang.String linkQns = Qnslist.get(i).getText();
			if (linkQns.equals(property.getProperty("Questionlinkllist"))) {
				Qnslist.get(i).click();
				break;
			}
		}
		Thread.sleep(1500);

	}

	@Then("^I click on Link to Button Dropdown$")
	public void i_click_on_link_to_button_dropdown() throws Throwable {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		WebElement arrow = driver.findElement(companysetup.getGenAttprofileLinktoButtonDropdown());
		js.executeScript("arguments[0].click();", arrow);
		;
		Thread.sleep(1500);
		// driver.findElement(companysetup.getGenAttprofileLinktoButtonDropdown()).click();
		// wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath("//ul[contains(@id,'j_id_25:1:profileQuestion:linkButton_items')]"))));
	}

	@Then("^I select Link Button$")
	public void i_select_on_link_button() throws Throwable {
		List<WebElement> linkqns = driver.findElements(companysetup.getGenAttprofileLinktoButtonList());
		for (int i = 0; i < linkqns.size(); i++) {
			String qnslist = linkqns.get(i).getText();
			System.out.println(qnslist);
			if (qnslist.equals(property.getProperty("LinkQnslist"))) {
				linkqns.get(i).click();
			}
		}

	}

	@Then("^I Enter value for setvalue TF of Qns1 Yes Button$")
	public void i_enter_value_for_setvalue_tf_of_qns1_yes_button() throws Throwable {
		driver.findElement(companysetup.getGenAttprofileQns1YESsetvalueTF()).click();
		driver.findElement(companysetup.getGenAttprofileQns1YESsetvalueTF())
				.sendKeys(property.getProperty("setvalueYESButton"));
	}

	@Then("^I click on action dropdown of Qns1 Yes Button$")
	public void i_click_on_action_dropdown_of_qns1_yes_button() throws Throwable {
		driver.findElement(companysetup.getGenAttprofileQns1YESsetvalueActiondropdown()).click();
		Thread.sleep(1500);
	}

	@Then("^I select the Action of Yes Button of Qns1$")
	public void i_select_the_action_of_yes_button_of_qns1() throws Throwable {
		List<WebElement> Actionvalue = driver
				.findElements(companysetup.getGenAttprofileQns1YESsetvalueActiondropdownList());
		for (int i = 0; i < Actionvalue.size(); i++) {
			java.lang.String Actionv = Actionvalue.get(i).getText();
			if (Actionv.equals(property.getProperty("setvalueYESButtonAction"))) {
				Actionvalue.get(i).click();
				break;
			}
		}
	}

	@Then("^I Enter value for setvalue TF of Qns1 No Button$")
	public void i_enter_value_for_setvalue_tf_of_qns1_no_button() throws Throwable {
		driver.findElement(companysetup.getGenAttprofileQns1NosetvalueTF())
				.sendKeys(property.getProperty("setvalueNOButton"));

	}

	@Then("^I click on action dropdown of Qns1 No Button$")
	public void i_click_on_action_dropdown_of_qns1_no_button() throws Throwable {
		driver.findElement(companysetup.getGenAttprofileQns1NosetvalueActiodropdown()).click();

	}

	@Then("^I select the Action of No Button of Qns1$")
	public void i_select_the_action_of_no_button_of_qns1() throws Throwable {
		List<WebElement> Actionvalue = driver
				.findElements(companysetup.getGenAttprofileQns1NosetvalueActiodropdownList());
		for (int i = 0; i < Actionvalue.size(); i++) {
			java.lang.String Actionv = Actionvalue.get(i).getText();
			if (Actionv.equals(property.getProperty("setvalueNOButtonAction"))) {
				Actionvalue.get(i).click();
				break;
			}
		}

	}

	@Then("^I Search the Profile need to be Edited$")
	public void i_search_the_profile_need_to_be_edited() throws Throwable {
		driver.findElement(companysetup.getGenAttprofileSearchfield()).sendKeys(property.getProperty("profilename2"));
		driver.findElement(companysetup.getGEnAttprofileSearchButton()).click();
		Thread.sleep(2000);

	}

	@Then("^I click on Edit Button of the profile$")
	public void i_click_on_edit_button_of_the_profile() throws Throwable {
		List<WebElement> profilelist = driver.findElements(companysetup.getGenAttprofilelisttable());
		List<WebElement> profileEdit = driver.findElements(companysetup.getGroupnameEditButton());
		for (int i = 0; i < profilelist.size(); i++) {
			java.lang.String profilename = profilelist.get(i).getText();
			if (profilename.equals(property.getProperty("profilename2"))) {
				profileEdit.get(i).click();
				break;
			} else {
				System.out.println("profile name not found");
			}

		}
		Thread.sleep(2000);

	}

	@Then("^I Edit the profile$")
	public void i_edit_the_profile() throws Throwable {
		driver.findElement(companysetup.getGenAttproProfilenameTF()).clear();
		Thread.sleep(1500);
		driver.findElement(companysetup.getGenAttproProfilenameTF()).sendKeys(property.getProperty("ProfileEdit"));

	}

	@Then("^I Verify whether Edited profile is updated$")
	public void i_verify_whether_edited_profile_is_updated() throws Throwable {
		driver.findElement(companysetup.getGenAttprofileSearchfield()).clear();
		driver.findElement(companysetup.getGenAttprofileSearchfield()).sendKeys(property.getProperty("ProfileEdit"));
		driver.findElement(companysetup.getGEnAttprofileSearchButton()).click();
		Thread.sleep(2000);
		List<WebElement> profilelist = driver.findElements(companysetup.getGenAttprofilelisttable());
		for (int i = 0; i < profilelist.size(); i++) {
			java.lang.String PL = profilelist.get(i).getText();
			if (PL.equals(property.getProperty("ProfileEdit"))) {
				System.out.println("New profile is created");
				break;
			} else {
				System.out.println("New profile is not created");

			}
		}
	}

	@Then("^I Search the Profile need to be Deleted$")
	public void i_search_the_profile_need_to_be_deleted() throws Throwable {
		driver.findElement(companysetup.getGenAttprofileSearchfield()).clear();
		driver.findElement(companysetup.getGenAttprofileSearchfield()).sendKeys(property.getProperty("Deleteprofile"));
		driver.findElement(companysetup.getGEnAttprofileSearchButton()).click();
		Thread.sleep(2000);
	}

	@Then("^I click on Delete Button of the profile$")
	public void i_click_on_delete_button_of_the_profile() throws Throwable {
		List<WebElement> profilelist = driver.findElements(companysetup.getGenAttprofilelisttable());
		List<WebElement> profileDelete = driver.findElements(companysetup.getDeleteButton());
		for (int i = 0; i < profilelist.size(); i++) {
			java.lang.String profilename = profilelist.get(i).getText();
			if (profilename.equals(property.getProperty("Deleteprofile"))) {
				profilelist.get(i).click();
				profileDelete.get(i).click();
				wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath("//div[@id='j_id_f']"))));
				JavascriptExecutor js = (JavascriptExecutor) driver;
				WebElement arrow = driver.findElement(By.xpath("//button[@id='j_id_g']"));
				js.executeScript("arguments[0].click();", arrow);
				;
				break;
			} else {
				System.out.println("profile name not found");
			}

		}
	}

	@Then("^I verify whether profile is Deleted$")
	public void i_verify_whether_profile_is_deleted() throws Throwable {
		driver.findElement(companysetup.getGenAttprofileSearchfield()).clear();
		driver.findElement(companysetup.getGenAttprofileSearchfield()).sendKeys(property.getProperty("Deleteprofile"));
		driver.findElement(companysetup.getGEnAttprofileSearchButton()).click();
		Thread.sleep(2000);
		List<WebElement> profilelist = driver.findElements(companysetup.getGenAttprofilelisttable());
		for (int i = 0; i < profilelist.size(); i++) {
			java.lang.String Deletecheck = profilelist.get(i).getText();
			if (Deletecheck.equals(property.getProperty("Deleteprofile"))) {
				System.out.println("profile successfully Deleted");
				break;
			} else {
				System.out.println("profile not Deleted");
			}
		}

	}

	@Then("I perform mousehower on useraccount")
	public void I_perform_mousehower_on_useraccount()
	{
		actions.moveToElement(supertenantpageobjects.getuserAccount()).build().perform();
		
		
	}
	
	@Then("^I click on switch account$")
	public void I_click_on_switch_account() throws InterruptedException
	{
		//I_perform_mousehower_on_useraccount();
		
		util.clickonlinks("Switch Account");
		
		util.click(supertenantpageobjects.getswitchAccountButton());
		
	}
}






	
	
	

	
	
	



